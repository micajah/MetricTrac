#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetricTrac.Bll
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class LinqDBDataContext : System.Data.Linq.DataContext
	{
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationLog(ApplicationLog instance);
    partial void UpdateApplicationLog(ApplicationLog instance);
	void DeleteApplicationLog(ApplicationLog instance) { instance.Delete(this); }
    partial void InsertD_DataRule(D_DataRule instance);
    partial void UpdateD_DataRule(D_DataRule instance);
	void DeleteD_DataRule(D_DataRule instance) { instance.Delete(this); }
    partial void InsertD_EntityNode(D_EntityNode instance);
    partial void UpdateD_EntityNode(D_EntityNode instance);
	void DeleteD_EntityNode(D_EntityNode instance) { instance.Delete(this); }
    partial void InsertD_GroupCategoryAspect(D_GroupCategoryAspect instance);
    partial void UpdateD_GroupCategoryAspect(D_GroupCategoryAspect instance);
	void DeleteD_GroupCategoryAspect(D_GroupCategoryAspect instance) { instance.Delete(this); }
    partial void InsertD_MetricCategory(D_MetricCategory instance);
    partial void UpdateD_MetricCategory(D_MetricCategory instance);
	void DeleteD_MetricCategory(D_MetricCategory instance) { instance.Delete(this); }
    partial void InsertD_MetricOrgLocationPath(D_MetricOrgLocationPath instance);
    partial void UpdateD_MetricOrgLocationPath(D_MetricOrgLocationPath instance);
	void DeleteD_MetricOrgLocationPath(D_MetricOrgLocationPath instance) { instance.Delete(this); }
    partial void InsertD_MetricOrgLocationRule(D_MetricOrgLocationRule instance);
    partial void UpdateD_MetricOrgLocationRule(D_MetricOrgLocationRule instance);
	void DeleteD_MetricOrgLocationRule(D_MetricOrgLocationRule instance) { instance.Delete(this); }
    partial void InsertD_MetricRelation(D_MetricRelation instance);
    partial void UpdateD_MetricRelation(D_MetricRelation instance);
	void DeleteD_MetricRelation(D_MetricRelation instance) { instance.Delete(this); }
    partial void InsertD_PeriodDate(D_PeriodDate instance);
    partial void UpdateD_PeriodDate(D_PeriodDate instance);
	void DeleteD_PeriodDate(D_PeriodDate instance) { instance.Delete(this); }
    partial void InsertDataCollectorRuleOut(DataCollectorRuleOut instance);
    partial void UpdateDataCollectorRuleOut(DataCollectorRuleOut instance);
	void DeleteDataCollectorRuleOut(DataCollectorRuleOut instance) { instance.Delete(this); }
    partial void InsertDataRule(DataRule instance);
    partial void UpdateDataRule(DataRule instance);
	void DeleteDataRule(DataRule instance) { instance.Delete(this); }
    partial void InsertDataRuleType(DataRuleType instance);
    partial void UpdateDataRuleType(DataRuleType instance);
	void DeleteDataRuleType(DataRuleType instance) { instance.Delete(this); }
    partial void InsertDataViewColumn(DataViewColumn instance);
    partial void UpdateDataViewColumn(DataViewColumn instance);
	void DeleteDataViewColumn(DataViewColumn instance) { instance.Delete(this); }
    partial void InsertDataViewColumnListType(DataViewColumnListType instance);
    partial void UpdateDataViewColumnListType(DataViewColumnListType instance);
	void DeleteDataViewColumnListType(DataViewColumnListType instance) { instance.Delete(this); }
    partial void InsertDataViewConditionType(DataViewConditionType instance);
    partial void UpdateDataViewConditionType(DataViewConditionType instance);
	void DeleteDataViewConditionType(DataViewConditionType instance) { instance.Delete(this); }
    partial void InsertDataViewList(DataViewList instance);
    partial void UpdateDataViewList(DataViewList instance);
	void DeleteDataViewList(DataViewList instance) { instance.Delete(this); }
    partial void InsertDataViewWhere(DataViewWhere instance);
    partial void UpdateDataViewWhere(DataViewWhere instance);
	void DeleteDataViewWhere(DataViewWhere instance) { instance.Delete(this); }
    partial void InsertMfs_File(Mfs_File instance);
    partial void UpdateMfs_File(Mfs_File instance);
	void DeleteMfs_File(Mfs_File instance) { instance.Delete(this); }
    partial void InsertFrequency(Frequency instance);
    partial void UpdateFrequency(Frequency instance);
	void DeleteFrequency(Frequency instance) { instance.Delete(this); }
    partial void InsertGroupCategoryAspect(GroupCategoryAspect instance);
    partial void UpdateGroupCategoryAspect(GroupCategoryAspect instance);
	void DeleteGroupCategoryAspect(GroupCategoryAspect instance) { instance.Delete(this); }
    partial void InsertMc_Database(Mc_Database instance);
    partial void UpdateMc_Database(Mc_Database instance);
	void DeleteMc_Database(Mc_Database instance) { instance.Delete(this); }
    partial void InsertMc_DatabaseServer(Mc_DatabaseServer instance);
    partial void UpdateMc_DatabaseServer(Mc_DatabaseServer instance);
	void DeleteMc_DatabaseServer(Mc_DatabaseServer instance) { instance.Delete(this); }
    partial void InsertMc_EntityNode(Mc_EntityNode instance);
    partial void UpdateMc_EntityNode(Mc_EntityNode instance);
	void DeleteMc_EntityNode(Mc_EntityNode instance) { instance.Delete(this); }
    partial void InsertMc_EntityNodesRelatedEntityNodes(Mc_EntityNodesRelatedEntityNodes instance);
    partial void UpdateMc_EntityNodesRelatedEntityNodes(Mc_EntityNodesRelatedEntityNodes instance);
	void DeleteMc_EntityNodesRelatedEntityNodes(Mc_EntityNodesRelatedEntityNodes instance) { instance.Delete(this); }
    partial void InsertMc_EntityNodeType(Mc_EntityNodeType instance);
    partial void UpdateMc_EntityNodeType(Mc_EntityNodeType instance);
	void DeleteMc_EntityNodeType(Mc_EntityNodeType instance) { instance.Delete(this); }
    partial void InsertMc_Group(Mc_Group instance);
    partial void UpdateMc_Group(Mc_Group instance);
	void DeleteMc_Group(Mc_Group instance) { instance.Delete(this); }
    partial void InsertMc_Instance(Mc_Instance instance);
    partial void UpdateMc_Instance(Mc_Instance instance);
	void DeleteMc_Instance(Mc_Instance instance) { instance.Delete(this); }
    partial void InsertMc_Organization(Mc_Organization instance);
    partial void UpdateMc_Organization(Mc_Organization instance);
	void DeleteMc_Organization(Mc_Organization instance) { instance.Delete(this); }
    partial void InsertMc_OrganizationsUsers(Mc_OrganizationsUsers instance);
    partial void UpdateMc_OrganizationsUsers(Mc_OrganizationsUsers instance);
	void DeleteMc_OrganizationsUsers(Mc_OrganizationsUsers instance) { instance.Delete(this); }
    partial void InsertMc_UnitsOfMeasure(Mc_UnitsOfMeasure instance);
    partial void UpdateMc_UnitsOfMeasure(Mc_UnitsOfMeasure instance);
	void DeleteMc_UnitsOfMeasure(Mc_UnitsOfMeasure instance) { instance.Delete(this); }
    partial void InsertMc_UnitsOfMeasureConversion(Mc_UnitsOfMeasureConversion instance);
    partial void UpdateMc_UnitsOfMeasureConversion(Mc_UnitsOfMeasureConversion instance);
	void DeleteMc_UnitsOfMeasureConversion(Mc_UnitsOfMeasureConversion instance) { instance.Delete(this); }
    partial void InsertMc_User(Mc_User instance);
    partial void UpdateMc_User(Mc_User instance);
	void DeleteMc_User(Mc_User instance) { instance.Delete(this); }
    partial void InsertMc_Website(Mc_Website instance);
    partial void UpdateMc_Website(Mc_Website instance);
	void DeleteMc_Website(Mc_Website instance) { instance.Delete(this); }
    partial void InsertMetric(Metric instance);
    partial void UpdateMetric(Metric instance);
	void DeleteMetric(Metric instance) { instance.Delete(this); }
    partial void InsertMetricCategory(MetricCategory instance);
    partial void UpdateMetricCategory(MetricCategory instance);
	void DeleteMetricCategory(MetricCategory instance) { instance.Delete(this); }
    partial void InsertMetricDataType(MetricDataType instance);
    partial void UpdateMetricDataType(MetricDataType instance);
	void DeleteMetricDataType(MetricDataType instance) { instance.Delete(this); }
    partial void InsertMetricFilter(MetricFilter instance);
    partial void UpdateMetricFilter(MetricFilter instance);
	void DeleteMetricFilter(MetricFilter instance) { instance.Delete(this); }
    partial void InsertMetricFormula(MetricFormula instance);
    partial void UpdateMetricFormula(MetricFormula instance);
	void DeleteMetricFormula(MetricFormula instance) { instance.Delete(this); }
    partial void InsertMetricOrgLocationName(MetricOrgLocationName instance);
    partial void UpdateMetricOrgLocationName(MetricOrgLocationName instance);
	void DeleteMetricOrgLocationName(MetricOrgLocationName instance) { instance.Delete(this); }
    partial void InsertMetricOrgLocationUoM(MetricOrgLocationUoM instance);
    partial void UpdateMetricOrgLocationUoM(MetricOrgLocationUoM instance);
	void DeleteMetricOrgLocationUoM(MetricOrgLocationUoM instance) { instance.Delete(this); }
    partial void InsertMetricRelation(MetricRelation instance);
    partial void UpdateMetricRelation(MetricRelation instance);
	void DeleteMetricRelation(MetricRelation instance) { instance.Delete(this); }
    partial void InsertMetricType(MetricType instance);
    partial void UpdateMetricType(MetricType instance);
	void DeleteMetricType(MetricType instance) { instance.Delete(this); }
    partial void InsertMetricValue(MetricValue instance);
    partial void UpdateMetricValue(MetricValue instance);
	void DeleteMetricValue(MetricValue instance) { instance.Delete(this); }
    partial void InsertMetricValueChangeLog(MetricValueChangeLog instance);
    partial void UpdateMetricValueChangeLog(MetricValueChangeLog instance);
	void DeleteMetricValueChangeLog(MetricValueChangeLog instance) { instance.Delete(this); }
    partial void InsertMetricValueChangeType(MetricValueChangeType instance);
    partial void UpdateMetricValueChangeType(MetricValueChangeType instance);
	void DeleteMetricValueChangeType(MetricValueChangeType instance) { instance.Delete(this); }
    partial void InsertPerformanceIndicator(PerformanceIndicator instance);
    partial void UpdatePerformanceIndicator(PerformanceIndicator instance);
	void DeletePerformanceIndicator(PerformanceIndicator instance) { instance.Delete(this); }
    partial void InsertPerformanceIndicatorForm(PerformanceIndicatorForm instance);
    partial void UpdatePerformanceIndicatorForm(PerformanceIndicatorForm instance);
	void DeletePerformanceIndicatorForm(PerformanceIndicatorForm instance) { instance.Delete(this); }
    partial void InsertPerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc instance);
    partial void UpdatePerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc instance);
	void DeletePerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc instance) { instance.Delete(this); }
    partial void InsertPerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc instance);
    partial void UpdatePerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc instance);
	void DeletePerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc instance) { instance.Delete(this); }
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
	void DeleteRequirement(Requirement instance) { instance.Delete(this); }
    partial void InsertScoreCard(ScoreCard instance);
    partial void UpdateScoreCard(ScoreCard instance);
	void DeleteScoreCard(ScoreCard instance) { instance.Delete(this); }
    partial void InsertScoreCardDashboard(ScoreCardDashboard instance);
    partial void UpdateScoreCardDashboard(ScoreCardDashboard instance);
	void DeleteScoreCardDashboard(ScoreCardDashboard instance) { instance.Delete(this); }
    partial void InsertScoreCardHidden(ScoreCardHidden instance);
    partial void UpdateScoreCardHidden(ScoreCardHidden instance);
	void DeleteScoreCardHidden(ScoreCardHidden instance) { instance.Delete(this); }
    partial void InsertScoreCardMetric(ScoreCardMetric instance);
    partial void UpdateScoreCardMetric(ScoreCardMetric instance);
	void DeleteScoreCardMetric(ScoreCardMetric instance) { instance.Delete(this); }
    partial void InsertScoreCardPeriod(ScoreCardPeriod instance);
    partial void UpdateScoreCardPeriod(ScoreCardPeriod instance);
	void DeleteScoreCardPeriod(ScoreCardPeriod instance) { instance.Delete(this); }
    partial void InsertScoreCardValue(ScoreCardValue instance);
    partial void UpdateScoreCardValue(ScoreCardValue instance);
	void DeleteScoreCardValue(ScoreCardValue instance) { instance.Delete(this); }
    partial void InsertSector(Sector instance);
    partial void UpdateSector(Sector instance);
	void DeleteSector(Sector instance) { instance.Delete(this); }
    #endregion
		
		public LinqDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationLog> ApplicationLog
		{
			get
			{
				return this.GetTable<ApplicationLog>();
			}
		}
		
		public System.Data.Linq.Table<CurrentFrequencyView> CurrentFrequencyView
		{
			get
			{
				return this.GetTable<CurrentFrequencyView>();
			}
		}
		
		public System.Data.Linq.Table<D_DataRule> D_DataRule
		{
			get
			{
				return this.GetTable<D_DataRule>();
			}
		}
		
		public System.Data.Linq.Table<D_EntityNode> D_EntityNode
		{
			get
			{
				return this.GetTable<D_EntityNode>();
			}
		}
		
		public System.Data.Linq.Table<D_GroupCategoryAspect> D_GroupCategoryAspect
		{
			get
			{
				return this.GetTable<D_GroupCategoryAspect>();
			}
		}
		
		public System.Data.Linq.Table<D_MetricCategory> D_MetricCategory
		{
			get
			{
				return this.GetTable<D_MetricCategory>();
			}
		}
		
		public System.Data.Linq.Table<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this.GetTable<D_MetricOrgLocationPath>();
			}
		}
		
		public System.Data.Linq.Table<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this.GetTable<D_MetricOrgLocationRule>();
			}
		}
		
		public System.Data.Linq.Table<D_MetricRelation> D_MetricRelation
		{
			get
			{
				return this.GetTable<D_MetricRelation>();
			}
		}
		
		public System.Data.Linq.Table<D_PeriodDate> D_PeriodDate
		{
			get
			{
				return this.GetTable<D_PeriodDate>();
			}
		}
		
		public System.Data.Linq.Table<DataCollectorRuleOut> DataCollectorRuleOut
		{
			get
			{
				return this.GetTable<DataCollectorRuleOut>();
			}
		}
		
		public System.Data.Linq.Table<DataRule> DataRule
		{
			get
			{
				return this.GetTable<DataRule>();
			}
		}
		
		public System.Data.Linq.Table<DataRuleFullOrgLocationView> DataRuleFullOrgLocationView
		{
			get
			{
				return this.GetTable<DataRuleFullOrgLocationView>();
			}
		}
		
		public System.Data.Linq.Table<DataRuleType> DataRuleType
		{
			get
			{
				return this.GetTable<DataRuleType>();
			}
		}
		
		public System.Data.Linq.Table<DataViewColumn> DataViewColumn
		{
			get
			{
				return this.GetTable<DataViewColumn>();
			}
		}
		
		public System.Data.Linq.Table<DataViewColumnListType> DataViewColumnListType
		{
			get
			{
				return this.GetTable<DataViewColumnListType>();
			}
		}
		
		public System.Data.Linq.Table<DataViewConditionType> DataViewConditionType
		{
			get
			{
				return this.GetTable<DataViewConditionType>();
			}
		}
		
		public System.Data.Linq.Table<DataViewList> DataViewList
		{
			get
			{
				return this.GetTable<DataViewList>();
			}
		}
		
		public System.Data.Linq.Table<DataViewWhere> DataViewWhere
		{
			get
			{
				return this.GetTable<DataViewWhere>();
			}
		}
		
		public System.Data.Linq.Table<EntityNodeFullNameView> EntityNodeFullNameView
		{
			get
			{
				return this.GetTable<EntityNodeFullNameView>();
			}
		}
		
		public System.Data.Linq.Table<Mfs_File> Mfs_File
		{
			get
			{
				return this.GetTable<Mfs_File>();
			}
		}
		
		public System.Data.Linq.Table<Frequency> Frequency
		{
			get
			{
				return this.GetTable<Frequency>();
			}
		}
		
		public System.Data.Linq.Table<GCAFullNameView> GCAFullNameView
		{
			get
			{
				return this.GetTable<GCAFullNameView>();
			}
		}
		
		public System.Data.Linq.Table<GroupCategoryAspect> GroupCategoryAspect
		{
			get
			{
				return this.GetTable<GroupCategoryAspect>();
			}
		}
								
		public System.Data.Linq.Table<Mc_Database> Mc_Database
		{
			get
			{
				return this.GetTable<Mc_Database>();
			}
		}
		
		public System.Data.Linq.Table<Mc_DatabaseServer> Mc_DatabaseServer
		{
			get
			{
				return this.GetTable<Mc_DatabaseServer>();
			}
		}
								
		public System.Data.Linq.Table<Mc_EntityNode> Mc_EntityNode
		{
			get
			{
				return this.GetTable<Mc_EntityNode>();
			}
		}
		
		public System.Data.Linq.Table<Mc_EntityNodesRelatedEntityNodes> Mc_EntityNodesRelatedEntityNodes
		{
			get
			{
				return this.GetTable<Mc_EntityNodesRelatedEntityNodes>();
			}
		}
		
		public System.Data.Linq.Table<Mc_EntityNodeType> Mc_EntityNodeType
		{
			get
			{
				return this.GetTable<Mc_EntityNodeType>();
			}
		}
		
		public System.Data.Linq.Table<Mc_Group> Mc_Group
		{
			get
			{
				return this.GetTable<Mc_Group>();
			}
		}
						
		public System.Data.Linq.Table<Mc_Instance> Mc_Instance
		{
			get
			{
				return this.GetTable<Mc_Instance>();
			}
		}
								
		public System.Data.Linq.Table<Mc_Organization> Mc_Organization
		{
			get
			{
				return this.GetTable<Mc_Organization>();
			}
		}
				
		public System.Data.Linq.Table<Mc_OrganizationsUsers> Mc_OrganizationsUsers
		{
			get
			{
				return this.GetTable<Mc_OrganizationsUsers>();
			}
		}
																								
		public System.Data.Linq.Table<Mc_UnitsOfMeasure> Mc_UnitsOfMeasure
		{
			get
			{
				return this.GetTable<Mc_UnitsOfMeasure>();
			}
		}
		
		public System.Data.Linq.Table<Mc_UnitsOfMeasureConversion> Mc_UnitsOfMeasureConversion
		{
			get
			{
				return this.GetTable<Mc_UnitsOfMeasureConversion>();
			}
		}
		
		public System.Data.Linq.Table<Mc_User> Mc_User
		{
			get
			{
				return this.GetTable<Mc_User>();
			}
		}
								
		public System.Data.Linq.Table<Mc_Website> Mc_Website
		{
			get
			{
				return this.GetTable<Mc_Website>();
			}
		}
		
		public System.Data.Linq.Table<Metric> Metric
		{
			get
			{
				return this.GetTable<Metric>();
			}
		}
		
		public System.Data.Linq.Table<MetricCategory> MetricCategory
		{
			get
			{
				return this.GetTable<MetricCategory>();
			}
		}
		
		public System.Data.Linq.Table<MetricCategoryFullNameView> MetricCategoryFullNameView
		{
			get
			{
				return this.GetTable<MetricCategoryFullNameView>();
			}
		}
		
		public System.Data.Linq.Table<MetricDataType> MetricDataType
		{
			get
			{
				return this.GetTable<MetricDataType>();
			}
		}
		
		public System.Data.Linq.Table<MetricFilter> MetricFilter
		{
			get
			{
				return this.GetTable<MetricFilter>();
			}
		}
		
		public System.Data.Linq.Table<MetricFormula> MetricFormula
		{
			get
			{
				return this.GetTable<MetricFormula>();
			}
		}
		
		public System.Data.Linq.Table<MetricOrgLocationName> MetricOrgLocationName
		{
			get
			{
				return this.GetTable<MetricOrgLocationName>();
			}
		}
		
		public System.Data.Linq.Table<MetricOrgLocationUoM> MetricOrgLocationUoM
		{
			get
			{
				return this.GetTable<MetricOrgLocationUoM>();
			}
		}
		
		public System.Data.Linq.Table<MetricPathView> MetricPathView
		{
			get
			{
				return this.GetTable<MetricPathView>();
			}
		}
		
		public System.Data.Linq.Table<MetricRelation> MetricRelation
		{
			get
			{
				return this.GetTable<MetricRelation>();
			}
		}
		
		public System.Data.Linq.Table<MetricType> MetricType
		{
			get
			{
				return this.GetTable<MetricType>();
			}
		}
		
		public System.Data.Linq.Table<MetricValue> MetricValue
		{
			get
			{
				return this.GetTable<MetricValue>();
			}
		}
		
		public System.Data.Linq.Table<MetricValueChangeLog> MetricValueChangeLog
		{
			get
			{
				return this.GetTable<MetricValueChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<MetricValueChangeType> MetricValueChangeType
		{
			get
			{
				return this.GetTable<MetricValueChangeType>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceIndicator> PerformanceIndicator
		{
			get
			{
				return this.GetTable<PerformanceIndicator>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceIndicatorForm> PerformanceIndicatorForm
		{
			get
			{
				return this.GetTable<PerformanceIndicatorForm>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceIndicatorFormPerformanceIndicatorJunc> PerformanceIndicatorFormPerformanceIndicatorJunc
		{
			get
			{
				return this.GetTable<PerformanceIndicatorFormPerformanceIndicatorJunc>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceIndicatorMetricJunc> PerformanceIndicatorMetricJunc
		{
			get
			{
				return this.GetTable<PerformanceIndicatorMetricJunc>();
			}
		}
		
		public System.Data.Linq.Table<PIFormOrgLocationJuncView> PIFormOrgLocationJuncView
		{
			get
			{
				return this.GetTable<PIFormOrgLocationJuncView>();
			}
		}
		
		public System.Data.Linq.Table<Requirement> Requirement
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCard> ScoreCard
		{
			get
			{
				return this.GetTable<ScoreCard>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCardDashboard> ScoreCardDashboard
		{
			get
			{
				return this.GetTable<ScoreCardDashboard>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCardHidden> ScoreCardHidden
		{
			get
			{
				return this.GetTable<ScoreCardHidden>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this.GetTable<ScoreCardMetric>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCardPeriod> ScoreCardPeriod
		{
			get
			{
				return this.GetTable<ScoreCardPeriod>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCardValue> ScoreCardValue
		{
			get
			{
				return this.GetTable<ScoreCardValue>();
			}
		}
		
		public System.Data.Linq.Table<Sector> Sector
		{
			get
			{
				return this.GetTable<Sector>();
			}
		}
		
		public System.Data.Linq.Table<UserFullNameView> UserFullNameView
		{
			get
			{
				return this.GetTable<UserFullNameView>();
			}
		}
		
		public System.Nullable<bool> Equal(System.Nullable<System.Guid> iD1, System.Nullable<System.Guid> iD2)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD1, iD2).ReturnValue));
		}
		
		public string FxGetGCAFullName(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> gCAId)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, gCAId).ReturnValue));
		}
		
		public IQueryable<FxGetInputMetricListResult> FxGetInputMetricList(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> refMetricID)
		{
			return this.CreateMethodCallQuery<FxGetInputMetricListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, refMetricID);
		}
		
		public System.Nullable<System.Guid> FxGetMetricFormulaID(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> metricID, System.Nullable<System.DateTime> date)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, metricID, date).ReturnValue));
		}
		
		public System.Nullable<bool> FxIsParentGCA(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> parentGCAId, System.Nullable<System.Guid> checkGCAId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, parentGCAId, checkGCAId).ReturnValue));
		}
		
		public System.Nullable<bool> FxIsParentMetricCategory(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> parentMCId, System.Nullable<System.Guid> checkMCId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, parentMCId, checkMCId).ReturnValue));
		}
		
		public System.Nullable<bool> FxIsParentOrgLocation(System.Nullable<System.Guid> parentLocationId, System.Nullable<System.Guid> checkLocationId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentLocationId, checkLocationId).ReturnValue));
		}
		
		public IQueryable<Iter_charlist_to_tableResult> Iter_charlist_to_table(string list, string delimiter)
		{
			return this.CreateMethodCallQuery<Iter_charlist_to_tableResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), list, delimiter);
		}
																																																																																																																																																																																																																																																																																																						
		public System.Nullable<System.Guid> OrgNodeParent(System.Nullable<System.Guid> parentID, System.Nullable<System.Guid> entityNodeTypeID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentID, entityNodeTypeID).ReturnValue));
		}
		
		public int Sp_d_DataRule()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_EntityNode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_GroupCategoryAspect()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_MetricCategory()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_MetricOrgLocationPath()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_MetricOrgLocationRule()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_MetricRelation()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_PeriodDate()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_d_UpdateAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectApproverWorkListResult> Sp_SelectApproverWorkList(System.Nullable<System.Guid> instanceId, System.Nullable<int> count, System.Nullable<int> skipCount, System.Nullable<System.Guid> selectedID, System.Nullable<bool> orderByMetric, System.Nullable<System.Guid> approverUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, count, skipCount, selectedID, orderByMetric, approverUserId);
			return ((ISingleResult<Sp_SelectApproverWorkListResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectFilterMetricsResult> Sp_SelectFilterMetrics(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> metricCategoryID, string nameDescriptionPattern)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, metricCategoryID, nameDescriptionPattern);
			return ((ISingleResult<Sp_SelectFilterMetricsResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectMetricListResult> Sp_SelectMetricList(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> collectorUserId, System.Nullable<System.Guid> orgLocationID, System.Nullable<System.Guid> groupCategoryAspectID, System.Nullable<System.Guid> performanceIndicatorID, System.Nullable<System.Guid> performanceIndicatorFormID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, collectorUserId, orgLocationID, groupCategoryAspectID, performanceIndicatorID, performanceIndicatorFormID);
			return ((ISingleResult<Sp_SelectMetricListResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectMetricRelatedValuesResult> Sp_SelectMetricRelatedValues(System.Nullable<System.Guid> instanceId, System.Nullable<int> frequencyID, System.Nullable<System.Guid> calcMetricID, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate, System.Nullable<bool> orderByMetric, System.Nullable<System.Guid> approverUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, frequencyID, calcMetricID, beginDate, endDate, orderByMetric, approverUserId);
			return ((ISingleResult<Sp_SelectMetricRelatedValuesResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectMetricValuesResult> Sp_SelectMetricValues(
					System.Nullable<System.Guid> instanceId, 
					System.Nullable<int> frequencyID, 
					System.Nullable<System.DateTime> endDate, 
					System.Nullable<System.DateTime> beginDate, 
					System.Nullable<System.Guid> selectedMetricID, 
					System.Nullable<System.Guid> selMetricID, 
					System.Nullable<System.Guid> selOrgLocationID, 
					System.Nullable<System.Guid> selGcaID, 
					System.Nullable<System.Guid> selPiID, 
					System.Nullable<System.Guid> selPifID, 
					System.Nullable<System.Guid> selUserId, 
					System.Nullable<bool> orderByMetric, 
					System.Nullable<bool> viewMode, 
					System.Nullable<System.Guid> approverUserId, 
					string orgLocationsID, 
					System.Nullable<bool> includeApprovedValues)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, frequencyID, endDate, beginDate, selectedMetricID, selMetricID, selOrgLocationID, selGcaID, selPiID, selPifID, selUserId, orderByMetric, viewMode, approverUserId, orgLocationsID, includeApprovedValues);
			return ((ISingleResult<Sp_SelectMetricValuesResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectMissedInputMetricValuesResult> Sp_SelectMissedInputMetricValues(System.Nullable<System.Guid> instanceId, System.Nullable<System.DateTime> baseDate, System.Nullable<System.DateTime> endDate, System.Nullable<int> frequencyID, System.Nullable<System.Guid> metricID, System.Nullable<System.Guid> orgLocationID, System.Nullable<System.Guid> selUserId, System.Nullable<bool> orderByMetric)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, baseDate, endDate, frequencyID, metricID, orgLocationID, selUserId, orderByMetric);
			return ((ISingleResult<Sp_SelectMissedInputMetricValuesResult>)(result.ReturnValue));
		}
		
		public IMultipleResults Sp_SelectOutputMetricValues(System.Nullable<int> generation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), generation);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		public IMultipleResults Sp_SelectPIReportValues(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> orgLocationID, System.Nullable<System.Guid> groupID, System.Nullable<int> frequencyID, System.Nullable<System.Guid> locationTypeID, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, orgLocationID, groupID, frequencyID, locationTypeID, beginDate, endDate);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectUnassignedMetricResult> Sp_SelectUnassignedMetric(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> performanceIndicatorID, System.Nullable<System.Guid> selCollectorId, System.Nullable<System.Guid> selPiID, System.Nullable<System.Guid> selGcaID, System.Nullable<System.Guid> selPifID, System.Nullable<System.Guid> selOrgLocationID, string orgLocationsID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, performanceIndicatorID, selCollectorId, selPiID, selGcaID, selPifID, selOrgLocationID, orgLocationsID);
			return ((ISingleResult<Sp_SelectUnassignedMetricResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectUnassignedPerformanceIndicatorResult> Sp_SelectUnassignedPerformanceIndicator(System.Nullable<System.Guid> instanceId, System.Nullable<System.Guid> pIFormId, System.Nullable<System.Guid> gCAId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, pIFormId, gCAId);
			return ((ISingleResult<Sp_SelectUnassignedPerformanceIndicatorResult>)(result.ReturnValue));
		}
		
		public ISingleResult<Sp_SelectUnderReviewMetricValuesResult> Sp_SelectUnderReviewMetricValues(System.Nullable<System.Guid> instanceId, System.Nullable<System.DateTime> endDate, System.Nullable<bool> viewMode, System.Nullable<int> frequencyID, System.Nullable<System.Guid> metricID, System.Nullable<System.Guid> orgLocationID, System.Nullable<System.Guid> selUserId, System.Nullable<System.Guid> approverUserId, System.Nullable<bool> orderByMetric)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceId, endDate, viewMode, frequencyID, metricID, orgLocationID, selUserId, approverUserId, orderByMetric);
			return ((ISingleResult<Sp_SelectUnderReviewMetricValuesResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.ApplicationLog")]
	public partial class ApplicationLog : LinqMicajahEntitybase
	{
		
		private System.Guid _ApplicationLogID;
		
		private string _Code;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _Created;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationLogIDChanging(System.Guid value);
    partial void OnApplicationLogIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    #endregion
		
		public ApplicationLog()
		{
			OnCreated();
		}
		
		[Column(Name="ApplicationLogID", Storage="_ApplicationLogID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationLogID
		{
			get
			{
				return this._ApplicationLogID;
			}
			set
			{
				if ((this._ApplicationLogID != value))
				{
					this.OnApplicationLogIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationLogID = value;
					this.SendPropertyChanged("ApplicationLogID");
					this.OnApplicationLogIDChanged();
				}
			}
		}
		
		[Column(Name="Code", Storage="_Code", DbType="NVarChar(1000)", IsPrimaryKey=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Name="Message", Storage="_Message", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.CurrentFrequencyView")]
	public partial class CurrentFrequencyView : LinqMicajahEntitybase
	{
		
		private int _FrequencyID;
		
		private string _Name;
		
		private int _PeriodNumber;
		
		private System.DateTime _Date;
		
		private string _ShortName;
		
		private string _LongName;
		
		public CurrentFrequencyView()
		{
		}
		
		[Column(Name="FrequencyID", Storage="_FrequencyID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="PeriodNumber", Storage="_PeriodNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int PeriodNumber
		{
			get
			{
				return this._PeriodNumber;
			}
			set
			{
				if ((this._PeriodNumber != value))
				{
					this._PeriodNumber = value;
				}
			}
		}
		
		[Column(Name="Date", Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Name="ShortName", Storage="_ShortName", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this._ShortName = value;
				}
			}
		}
		
		[Column(Name="LongName", Storage="_LongName", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string LongName
		{
			get
			{
				return this._LongName;
			}
			set
			{
				if ((this._LongName != value))
				{
					this._LongName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.D_DataRule")]
	public partial class D_DataRule : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _D_DataRuleID;
		
		private System.Guid _DataRuleID;
		
		private int _DataRuleTypeID;
		
		private int _OrderNumber;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.Guid> _GroupId;
		
		private EntityRef<DataRuleType> _DataRuleType;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Group> _Mc_Group;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnD_DataRuleIDChanging(System.Guid value);
    partial void OnD_DataRuleIDChanged();
    partial void OnDataRuleIDChanging(System.Guid value);
    partial void OnDataRuleIDChanged();
    partial void OnDataRuleTypeIDChanging(int value);
    partial void OnDataRuleTypeIDChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnOrgLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrgLocationIDChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnMetricIDChanging(System.Nullable<System.Guid> value);
    partial void OnMetricIDChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(System.Nullable<System.Guid> value);
    partial void OnGroupIdChanged();
    #endregion
		
		public D_DataRule()
		{
			this._DataRuleType = default(EntityRef<DataRuleType>);
			this._GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Group = default(EntityRef<Mc_Group>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._Metric = default(EntityRef<Metric>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._PerformanceIndicatorForm = default(EntityRef<PerformanceIndicatorForm>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="D_DataRuleID", Storage="_D_DataRuleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid D_DataRuleID
		{
			get
			{
				return this._D_DataRuleID;
			}
			set
			{
				if ((this._D_DataRuleID != value))
				{
					this.OnD_DataRuleIDChanging(value);
					this.SendPropertyChanging();
					this._D_DataRuleID = value;
					this.SendPropertyChanged("D_DataRuleID");
					this.OnD_DataRuleIDChanged();
				}
			}
		}
		
		[Column(Name="DataRuleID", Storage="_DataRuleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataRuleID
		{
			get
			{
				return this._DataRuleID;
			}
			set
			{
				if ((this._DataRuleID != value))
				{
					this.OnDataRuleIDChanging(value);
					this.SendPropertyChanging();
					this._DataRuleID = value;
					this.SendPropertyChanged("DataRuleID");
					this.OnDataRuleIDChanged();
				}
			}
		}
		
		[Column(Name="DataRuleTypeID", Storage="_DataRuleTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int DataRuleTypeID
		{
			get
			{
				return this._DataRuleTypeID;
			}
			set
			{
				if ((this._DataRuleTypeID != value))
				{
					if (this._DataRuleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataRuleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataRuleTypeID = value;
					this.SendPropertyChanged("DataRuleTypeID");
					this.OnDataRuleTypeIDChanged();
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					if (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="GroupId", Storage="_GroupId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Mc_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		public DataRuleType DataRuleType
		{
			get
			{
				return this._DataRuleType.Entity;
			}
			set
			{
				DataRuleType previousValue = this._DataRuleType.Entity;
				if (((previousValue != value) 
							|| (this._DataRuleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataRuleType.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._DataRuleType.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._DataRuleTypeID = value.DataRuleTypeID;
					}
					else
					{
						this._DataRuleTypeID = default(int);
					}
					this.SendPropertyChanged("DataRuleType");
				}
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._GroupCategoryAspectID = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._GroupCategoryAspectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Group Mc_Group
		{
			get
			{
				return this._Mc_Group.Entity;
			}
			set
			{
				Mc_Group previousValue = this._Mc_Group.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Group.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._Mc_Group.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Group");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public PerformanceIndicatorForm PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm.Entity;
			}
			set
			{
				PerformanceIndicatorForm previousValue = this._PerformanceIndicatorForm.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicatorForm.Entity = null;
						previousValue.D_DataRule.Remove(this);
					}
					this._PerformanceIndicatorForm.Entity = value;
					if ((value != null))
					{
						value.D_DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorFormID = value.PerformanceIndicatorFormID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorFormID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicatorForm");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_EntityNode")]
	public partial class D_EntityNode : LinqMicajahEntitybase
	{
		
		private System.Guid _D_EntityNodeID;
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _OrganizationId;
		
		private System.Guid _EntityNodeId;
		
		private System.Guid _IncludedId;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_EntityNode> _Included;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_Organization> _Mc_Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnD_EntityNodeIDChanging(System.Guid value);
    partial void OnD_EntityNodeIDChanged();
    partial void OnInstanceIdChanging(System.Nullable<System.Guid> value);
    partial void OnInstanceIdChanged();
    partial void OnOrganizationIdChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationIdChanged();
    partial void OnEntityNodeIdChanging(System.Guid value);
    partial void OnEntityNodeIdChanged();
    partial void OnIncludedIdChanging(System.Guid value);
    partial void OnIncludedIdChanged();
    #endregion
		
		public D_EntityNode()
		{
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Included = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_Organization = default(EntityRef<Mc_Organization>);
			OnCreated();
		}
		
		[Column(Name="D_EntityNodeID", Storage="_D_EntityNodeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid D_EntityNodeID
		{
			get
			{
				return this._D_EntityNodeID;
			}
			set
			{
				if ((this._D_EntityNodeID != value))
				{
					this.OnD_EntityNodeIDChanging(value);
					this.SendPropertyChanging();
					this._D_EntityNodeID = value;
					this.SendPropertyChanged("D_EntityNodeID");
					this.OnD_EntityNodeIDChanged();
				}
			}
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					if (this._Mc_Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="EntityNodeId", Storage="_EntityNodeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityNodeId
		{
			get
			{
				return this._EntityNodeId;
			}
			set
			{
				if ((this._EntityNodeId != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityNodeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodeId = value;
					this.SendPropertyChanged("EntityNodeId");
					this.OnEntityNodeIdChanged();
				}
			}
		}
		
		[Column(Name="IncludedId", Storage="_IncludedId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid IncludedId
		{
			get
			{
				return this._IncludedId;
			}
			set
			{
				if ((this._IncludedId != value))
				{
					if (this._Included.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncludedIdChanging(value);
					this.SendPropertyChanging();
					this._IncludedId = value;
					this.SendPropertyChanged("IncludedId");
					this.OnIncludedIdChanged();
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.D_EntityNode.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.D_EntityNode.Add(this);
						this._EntityNodeId = value.EntityNodeId;
					}
					else
					{
						this._EntityNodeId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_EntityNode Included
		{
			get
			{
				return this._Included.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Included.Entity;
				if (((previousValue != value) 
							|| (this._Included.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Included.Entity = null;
						previousValue.EntityNode.Remove(this);
					}
					this._Included.Entity = value;
					if ((value != null))
					{
						value.EntityNode.Add(this);
						this._IncludedId = value.EntityNodeId;
					}
					else
					{
						this._IncludedId = default(System.Guid);
					}
					this.SendPropertyChanged("Included");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.D_EntityNode.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.D_EntityNode.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_Organization Mc_Organization
		{
			get
			{
				return this._Mc_Organization.Entity;
			}
			set
			{
				Mc_Organization previousValue = this._Mc_Organization.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Organization.Entity = null;
						previousValue.D_EntityNode.Remove(this);
					}
					this._Mc_Organization.Entity = value;
					if ((value != null))
					{
						value.D_EntityNode.Add(this);
						this._OrganizationId = value.OrganizationId;
					}
					else
					{
						this._OrganizationId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Organization");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_GroupCategoryAspect")]
	public partial class D_GroupCategoryAspect : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _GroupCategoryAspectID;
		
		private System.Guid _IncludedID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Guid value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnIncludedIDChanging(System.Guid value);
    partial void OnIncludedIDChanged();
    #endregion
		
		public D_GroupCategoryAspect()
		{
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="IncludedID", Storage="_IncludedID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IncludedID
		{
			get
			{
				return this._IncludedID;
			}
			set
			{
				if ((this._IncludedID != value))
				{
					this.OnIncludedIDChanging(value);
					this.SendPropertyChanging();
					this._IncludedID = value;
					this.SendPropertyChanged("IncludedID");
					this.OnIncludedIDChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_MetricCategory")]
	public partial class D_MetricCategory : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricCategoryID;
		
		private System.Guid _IncludedID;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<MetricCategory> _MetricCategory;
		
		private EntityRef<MetricCategory> _D_MetricCategory_MetricCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricCategoryIDChanging(System.Guid value);
    partial void OnMetricCategoryIDChanged();
    partial void OnIncludedIDChanging(System.Guid value);
    partial void OnIncludedIDChanged();
    #endregion
		
		public D_MetricCategory()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._MetricCategory = default(EntityRef<MetricCategory>);
			this._D_MetricCategory_MetricCategory1 = default(EntityRef<MetricCategory>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricCategoryID", Storage="_MetricCategoryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					if (this._MetricCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MetricCategoryID = value;
					this.SendPropertyChanged("MetricCategoryID");
					this.OnMetricCategoryIDChanged();
				}
			}
		}
		
		[Column(Name="IncludedID", Storage="_IncludedID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IncludedID
		{
			get
			{
				return this._IncludedID;
			}
			set
			{
				if ((this._IncludedID != value))
				{
					if (this._D_MetricCategory_MetricCategory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncludedIDChanging(value);
					this.SendPropertyChanging();
					this._IncludedID = value;
					this.SendPropertyChanged("IncludedID");
					this.OnIncludedIDChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.D_MetricCategory.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.D_MetricCategory.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public MetricCategory MetricCategory
		{
			get
			{
				return this._MetricCategory.Entity;
			}
			set
			{
				MetricCategory previousValue = this._MetricCategory.Entity;
				if (((previousValue != value) 
							|| (this._MetricCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricCategory.Entity = null;
						previousValue.D_MetricCategory.Remove(this);
					}
					this._MetricCategory.Entity = value;
					if ((value != null))
					{
						value.D_MetricCategory.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricCategoryID = value.MetricCategoryID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged("MetricCategory");
				}
			}
		}
		
		public MetricCategory D_MetricCategory_MetricCategory1
		{
			get
			{
				return this._D_MetricCategory_MetricCategory1.Entity;
			}
			set
			{
				MetricCategory previousValue = this._D_MetricCategory_MetricCategory1.Entity;
				if (((previousValue != value) 
							|| (this._D_MetricCategory_MetricCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._D_MetricCategory_MetricCategory1.Entity = null;
						previousValue.D_MetricCategory_MetricCategory1.Remove(this);
					}
					this._D_MetricCategory_MetricCategory1.Entity = value;
					if ((value != null))
					{
						value.D_MetricCategory_MetricCategory1.Add(this);
						this._InstanceId = value.InstanceId;
						this._IncludedID = value.MetricCategoryID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._IncludedID = default(System.Guid);
					}
					this.SendPropertyChanged("D_MetricCategory_MetricCategory1");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_MetricOrgLocationPath")]
	public partial class D_MetricOrgLocationPath : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricOrgLocationPathID;
		
		private System.Guid _MetricID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Guid _OrgLocationID;
		
		private bool _IsVirtual;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricOrgLocationPathIDChanging(System.Guid value);
    partial void OnMetricOrgLocationPathIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnOrgLocationIDChanging(System.Guid value);
    partial void OnOrgLocationIDChanged();
    partial void OnIsVirtualChanging(bool value);
    partial void OnIsVirtualChanged();
    #endregion
		
		public D_MetricOrgLocationPath()
		{
			this._GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._PerformanceIndicatorForm = default(EntityRef<PerformanceIndicatorForm>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricOrgLocationPathID", Storage="_MetricOrgLocationPathID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricOrgLocationPathID
		{
			get
			{
				return this._MetricOrgLocationPathID;
			}
			set
			{
				if ((this._MetricOrgLocationPathID != value))
				{
					this.OnMetricOrgLocationPathIDChanging(value);
					this.SendPropertyChanging();
					this._MetricOrgLocationPathID = value;
					this.SendPropertyChanged("MetricOrgLocationPathID");
					this.OnMetricOrgLocationPathIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					if (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="IsVirtual", Storage="_IsVirtual", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool IsVirtual
		{
			get
			{
				return this._IsVirtual;
			}
			set
			{
				if ((this._IsVirtual != value))
				{
					this.OnIsVirtualChanging(value);
					this.SendPropertyChanging();
					this._IsVirtual = value;
					this.SendPropertyChanged("IsVirtual");
					this.OnIsVirtualChanged();
				}
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._InstanceId = value.InstanceId;
						this._GroupCategoryAspectID = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._GroupCategoryAspectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public PerformanceIndicatorForm PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm.Entity;
			}
			set
			{
				PerformanceIndicatorForm previousValue = this._PerformanceIndicatorForm.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicatorForm.Entity = null;
						previousValue.D_MetricOrgLocationPath.Remove(this);
					}
					this._PerformanceIndicatorForm.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationPath.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorFormID = value.PerformanceIndicatorFormID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorFormID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicatorForm");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_MetricOrgLocationRule")]
	public partial class D_MetricOrgLocationRule : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricID;
		
		private System.Guid _OrgLocationID;
		
		private System.Nullable<System.Guid> _CollectorUserId;
		
		private System.Nullable<System.Guid> _CollectorGroupId;
		
		private System.Nullable<System.Guid> _CollectorDataRuleID;
		
		private System.Nullable<System.Guid> _ApproverUserId;
		
		private System.Nullable<System.Guid> _ApproverGroupId;
		
		private System.Nullable<System.Guid> _ApproverDataRuleID;
		
		private EntityRef<DataRule> _DataRule;
		
		private EntityRef<DataRule> _D_MetricOrgLocationRule_DataRule_Collector;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Group> _Mc_Group;
		
		private EntityRef<Mc_Group> _CollectorGroup;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<Mc_User> _CollectorUser;
		
		private EntityRef<Metric> _Metric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnOrgLocationIDChanging(System.Guid value);
    partial void OnOrgLocationIDChanged();
    partial void OnCollectorUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnCollectorUserIdChanged();
    partial void OnCollectorGroupIdChanging(System.Nullable<System.Guid> value);
    partial void OnCollectorGroupIdChanged();
    partial void OnCollectorDataRuleIDChanging(System.Nullable<System.Guid> value);
    partial void OnCollectorDataRuleIDChanged();
    partial void OnApproverUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnApproverUserIdChanged();
    partial void OnApproverGroupIdChanging(System.Nullable<System.Guid> value);
    partial void OnApproverGroupIdChanged();
    partial void OnApproverDataRuleIDChanging(System.Nullable<System.Guid> value);
    partial void OnApproverDataRuleIDChanged();
    #endregion
		
		public D_MetricOrgLocationRule()
		{
			this._DataRule = default(EntityRef<DataRule>);
			this._D_MetricOrgLocationRule_DataRule_Collector = default(EntityRef<DataRule>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Group = default(EntityRef<Mc_Group>);
			this._CollectorGroup = default(EntityRef<Mc_Group>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._CollectorUser = default(EntityRef<Mc_User>);
			this._Metric = default(EntityRef<Metric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._DataRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="CollectorUserId", Storage="_CollectorUserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> CollectorUserId
		{
			get
			{
				return this._CollectorUserId;
			}
			set
			{
				if ((this._CollectorUserId != value))
				{
					if (this._CollectorUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CollectorUserId = value;
					this.SendPropertyChanged("CollectorUserId");
					this.OnCollectorUserIdChanged();
				}
			}
		}
		
		[Column(Name="CollectorGroupId", Storage="_CollectorGroupId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> CollectorGroupId
		{
			get
			{
				return this._CollectorGroupId;
			}
			set
			{
				if ((this._CollectorGroupId != value))
				{
					if (this._CollectorGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectorGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CollectorGroupId = value;
					this.SendPropertyChanged("CollectorGroupId");
					this.OnCollectorGroupIdChanged();
				}
			}
		}
		
		[Column(Name="CollectorDataRuleID", Storage="_CollectorDataRuleID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> CollectorDataRuleID
		{
			get
			{
				return this._CollectorDataRuleID;
			}
			set
			{
				if ((this._CollectorDataRuleID != value))
				{
					if (this._D_MetricOrgLocationRule_DataRule_Collector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectorDataRuleIDChanging(value);
					this.SendPropertyChanging();
					this._CollectorDataRuleID = value;
					this.SendPropertyChanged("CollectorDataRuleID");
					this.OnCollectorDataRuleIDChanged();
				}
			}
		}
		
		[Column(Name="ApproverUserId", Storage="_ApproverUserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ApproverUserId
		{
			get
			{
				return this._ApproverUserId;
			}
			set
			{
				if ((this._ApproverUserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverUserIdChanging(value);
					this.SendPropertyChanging();
					this._ApproverUserId = value;
					this.SendPropertyChanged("ApproverUserId");
					this.OnApproverUserIdChanged();
				}
			}
		}
		
		[Column(Name="ApproverGroupId", Storage="_ApproverGroupId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ApproverGroupId
		{
			get
			{
				return this._ApproverGroupId;
			}
			set
			{
				if ((this._ApproverGroupId != value))
				{
					if (this._Mc_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ApproverGroupId = value;
					this.SendPropertyChanged("ApproverGroupId");
					this.OnApproverGroupIdChanged();
				}
			}
		}
		
		[Column(Name="ApproverDataRuleID", Storage="_ApproverDataRuleID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ApproverDataRuleID
		{
			get
			{
				return this._ApproverDataRuleID;
			}
			set
			{
				if ((this._ApproverDataRuleID != value))
				{
					if (this._DataRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverDataRuleIDChanging(value);
					this.SendPropertyChanging();
					this._ApproverDataRuleID = value;
					this.SendPropertyChanged("ApproverDataRuleID");
					this.OnApproverDataRuleIDChanged();
				}
			}
		}
		
		public DataRule DataRule
		{
			get
			{
				return this._DataRule.Entity;
			}
			set
			{
				DataRule previousValue = this._DataRule.Entity;
				if (((previousValue != value) 
							|| (this._DataRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataRule.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._DataRule.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._ApproverDataRuleID = value.DataRuleID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ApproverDataRuleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataRule");
				}
			}
		}
		
		public DataRule D_MetricOrgLocationRule_DataRule_Collector
		{
			get
			{
				return this._D_MetricOrgLocationRule_DataRule_Collector.Entity;
			}
			set
			{
				DataRule previousValue = this._D_MetricOrgLocationRule_DataRule_Collector.Entity;
				if (((previousValue != value) 
							|| (this._D_MetricOrgLocationRule_DataRule_Collector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._D_MetricOrgLocationRule_DataRule_Collector.Entity = null;
						previousValue.D_MetricOrgLocationRule_DataRule_Collector.Remove(this);
					}
					this._D_MetricOrgLocationRule_DataRule_Collector.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule_DataRule_Collector.Add(this);
						this._InstanceId = value.InstanceId;
						this._CollectorDataRuleID = value.DataRuleID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._CollectorDataRuleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("D_MetricOrgLocationRule_DataRule_Collector");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Group Mc_Group
		{
			get
			{
				return this._Mc_Group.Entity;
			}
			set
			{
				Mc_Group previousValue = this._Mc_Group.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Group.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._Mc_Group.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._ApproverGroupId = value.GroupId;
					}
					else
					{
						this._ApproverGroupId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Group");
				}
			}
		}
		
		public Mc_Group CollectorGroup
		{
			get
			{
				return this._CollectorGroup.Entity;
			}
			set
			{
				Mc_Group previousValue = this._CollectorGroup.Entity;
				if (((previousValue != value) 
							|| (this._CollectorGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollectorGroup.Entity = null;
						previousValue.Group.Remove(this);
					}
					this._CollectorGroup.Entity = value;
					if ((value != null))
					{
						value.Group.Add(this);
						this._CollectorGroupId = value.GroupId;
					}
					else
					{
						this._CollectorGroupId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CollectorGroup");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._ApproverUserId = value.UserId;
					}
					else
					{
						this._ApproverUserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public Mc_User CollectorUser
		{
			get
			{
				return this._CollectorUser.Entity;
			}
			set
			{
				Mc_User previousValue = this._CollectorUser.Entity;
				if (((previousValue != value) 
							|| (this._CollectorUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollectorUser.Entity = null;
						previousValue.User.Remove(this);
					}
					this._CollectorUser.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._CollectorUserId = value.UserId;
					}
					else
					{
						this._CollectorUserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CollectorUser");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.D_MetricOrgLocationRule.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.D_MetricOrgLocationRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_MetricRelation")]
	public partial class D_MetricRelation : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _CalculatedMetricID;
		
		private System.Guid _InputMetricID;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<Metric> _D_MetricRelation_Metric_Input;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnCalculatedMetricIDChanging(System.Guid value);
    partial void OnCalculatedMetricIDChanged();
    partial void OnInputMetricIDChanging(System.Guid value);
    partial void OnInputMetricIDChanged();
    #endregion
		
		public D_MetricRelation()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			this._D_MetricRelation_Metric_Input = default(EntityRef<Metric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="CalculatedMetricID", Storage="_CalculatedMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CalculatedMetricID
		{
			get
			{
				return this._CalculatedMetricID;
			}
			set
			{
				if ((this._CalculatedMetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalculatedMetricIDChanging(value);
					this.SendPropertyChanging();
					this._CalculatedMetricID = value;
					this.SendPropertyChanged("CalculatedMetricID");
					this.OnCalculatedMetricIDChanged();
				}
			}
		}
		
		[Column(Name="InputMetricID", Storage="_InputMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InputMetricID
		{
			get
			{
				return this._InputMetricID;
			}
			set
			{
				if ((this._InputMetricID != value))
				{
					if (this._D_MetricRelation_Metric_Input.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInputMetricIDChanging(value);
					this.SendPropertyChanging();
					this._InputMetricID = value;
					this.SendPropertyChanged("InputMetricID");
					this.OnInputMetricIDChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.D_MetricRelation.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.D_MetricRelation.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.D_MetricRelation.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.D_MetricRelation.Add(this);
						this._InstanceId = value.InstanceId;
						this._CalculatedMetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._CalculatedMetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public Metric D_MetricRelation_Metric_Input
		{
			get
			{
				return this._D_MetricRelation_Metric_Input.Entity;
			}
			set
			{
				Metric previousValue = this._D_MetricRelation_Metric_Input.Entity;
				if (((previousValue != value) 
							|| (this._D_MetricRelation_Metric_Input.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._D_MetricRelation_Metric_Input.Entity = null;
						previousValue.D_MetricRelation_Metric_Input.Remove(this);
					}
					this._D_MetricRelation_Metric_Input.Entity = value;
					if ((value != null))
					{
						value.D_MetricRelation_Metric_Input.Add(this);
						this._InstanceId = value.InstanceId;
						this._InputMetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._InputMetricID = default(System.Guid);
					}
					this.SendPropertyChanged("D_MetricRelation_Metric_Input");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.D_PeriodDate")]
	public partial class D_PeriodDate : LinqMicajahEntitybase
	{
		
		private int _FrequencyID;
		
		private int _PeriodNumber;
		
		private System.DateTime _Date;
		
		private string _ShortName;
		
		private string _LongName;
		
		private EntityRef<Frequency> _Frequency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFrequencyIDChanging(int value);
    partial void OnFrequencyIDChanged();
    partial void OnPeriodNumberChanging(int value);
    partial void OnPeriodNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLongNameChanging(string value);
    partial void OnLongNameChanged();
    #endregion
		
		public D_PeriodDate()
		{
			this._Frequency = default(EntityRef<Frequency>);
			OnCreated();
		}
		
		[Column(Name="FrequencyID", Storage="_FrequencyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					if (this._Frequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._FrequencyID = value;
					this.SendPropertyChanged("FrequencyID");
					this.OnFrequencyIDChanged();
				}
			}
		}
		
		[Column(Name="PeriodNumber", Storage="_PeriodNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PeriodNumber
		{
			get
			{
				return this._PeriodNumber;
			}
			set
			{
				if ((this._PeriodNumber != value))
				{
					this.OnPeriodNumberChanging(value);
					this.SendPropertyChanging();
					this._PeriodNumber = value;
					this.SendPropertyChanged("PeriodNumber");
					this.OnPeriodNumberChanged();
				}
			}
		}
		
		[Column(Name="Date", Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Name="ShortName", Storage="_ShortName", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Name="LongName", Storage="_LongName", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string LongName
		{
			get
			{
				return this._LongName;
			}
			set
			{
				if ((this._LongName != value))
				{
					this.OnLongNameChanging(value);
					this.SendPropertyChanging();
					this._LongName = value;
					this.SendPropertyChanged("LongName");
					this.OnLongNameChanged();
				}
			}
		}
		
		public Frequency Frequency
		{
			get
			{
				return this._Frequency.Entity;
			}
			set
			{
				Frequency previousValue = this._Frequency.Entity;
				if (((previousValue != value) 
							|| (this._Frequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Frequency.Entity = null;
						previousValue.D_PeriodDate.Remove(this);
					}
					this._Frequency.Entity = value;
					if ((value != null))
					{
						value.D_PeriodDate.Add(this);
						this._FrequencyID = value.FrequencyID;
					}
					else
					{
						this._FrequencyID = default(int);
					}
					this.SendPropertyChanged("Frequency");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.DataCollectorRuleOut")]
	public partial class DataCollectorRuleOut : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _RuleId;
		
		private System.Guid _UserId;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnRuleIdChanging(System.Guid value);
    partial void OnRuleIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public DataCollectorRuleOut()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="RuleId", Storage="_RuleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.DataCollectorRuleOut.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.DataCollectorRuleOut.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.DataCollectorRuleOut.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.DataCollectorRuleOut.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.DataRule")]
	public partial class DataRule : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _DataRuleID;
		
		private int _DataRuleTypeID;
		
		private int _OrderNumber;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _GroupId;
		
		private System.Nullable<System.Guid> _RuleClusterID;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule_DataRule_Collector;
		
		private EntityRef<DataRuleType> _DataRuleType;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Group> _Mc_Group;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnDataRuleIDChanging(System.Guid value);
    partial void OnDataRuleIDChanged();
    partial void OnDataRuleTypeIDChanging(int value);
    partial void OnDataRuleTypeIDChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnOrgLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrgLocationIDChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnMetricIDChanging(System.Nullable<System.Guid> value);
    partial void OnMetricIDChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGroupIdChanging(System.Nullable<System.Guid> value);
    partial void OnGroupIdChanged();
    partial void OnRuleClusterIDChanging(System.Nullable<System.Guid> value);
    partial void OnRuleClusterIDChanged();
    #endregion
		
		public DataRule()
		{
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._D_MetricOrgLocationRule_DataRule_Collector = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule_DataRule_Collector), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule_DataRule_Collector));
			this._DataRuleType = default(EntityRef<DataRuleType>);
			this._GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Group = default(EntityRef<Mc_Group>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._Metric = default(EntityRef<Metric>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._PerformanceIndicatorForm = default(EntityRef<PerformanceIndicatorForm>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="DataRuleID", Storage="_DataRuleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataRuleID
		{
			get
			{
				return this._DataRuleID;
			}
			set
			{
				if ((this._DataRuleID != value))
				{
					this.OnDataRuleIDChanging(value);
					this.SendPropertyChanging();
					this._DataRuleID = value;
					this.SendPropertyChanged("DataRuleID");
					this.OnDataRuleIDChanged();
				}
			}
		}
		
		[Column(Name="DataRuleTypeID", Storage="_DataRuleTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int DataRuleTypeID
		{
			get
			{
				return this._DataRuleTypeID;
			}
			set
			{
				if ((this._DataRuleTypeID != value))
				{
					if (this._DataRuleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataRuleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataRuleTypeID = value;
					this.SendPropertyChanged("DataRuleTypeID");
					this.OnDataRuleTypeIDChanged();
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					if (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="GroupId", Storage="_GroupId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Mc_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Name="RuleClusterID", Storage="_RuleClusterID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> RuleClusterID
		{
			get
			{
				return this._RuleClusterID;
			}
			set
			{
				if ((this._RuleClusterID != value))
				{
					this.OnRuleClusterIDChanging(value);
					this.SendPropertyChanging();
					this._RuleClusterID = value;
					this.SendPropertyChanged("RuleClusterID");
					this.OnRuleClusterIDChanged();
				}
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule_DataRule_Collector
		{
			get
			{
				return this._D_MetricOrgLocationRule_DataRule_Collector;
			}
			set
			{
				this._D_MetricOrgLocationRule_DataRule_Collector.Assign(value);
			}
		}
		
		public DataRuleType DataRuleType
		{
			get
			{
				return this._DataRuleType.Entity;
			}
			set
			{
				DataRuleType previousValue = this._DataRuleType.Entity;
				if (((previousValue != value) 
							|| (this._DataRuleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataRuleType.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._DataRuleType.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._DataRuleTypeID = value.DataRuleTypeID;
					}
					else
					{
						this._DataRuleTypeID = default(int);
					}
					this.SendPropertyChanged("DataRuleType");
				}
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._GroupCategoryAspectID = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._GroupCategoryAspectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Group Mc_Group
		{
			get
			{
				return this._Mc_Group.Entity;
			}
			set
			{
				Mc_Group previousValue = this._Mc_Group.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Group.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._Mc_Group.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Group");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public PerformanceIndicatorForm PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm.Entity;
			}
			set
			{
				PerformanceIndicatorForm previousValue = this._PerformanceIndicatorForm.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicatorForm.Entity = null;
						previousValue.DataRule.Remove(this);
					}
					this._PerformanceIndicatorForm.Entity = value;
					if ((value != null))
					{
						value.DataRule.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorFormID = value.PerformanceIndicatorFormID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorFormID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicatorForm");
				}
			}
		}
		
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRule = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRule = null;
		}
		
		private void attach_D_MetricOrgLocationRule_DataRule_Collector(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricOrgLocationRule_DataRule_Collector = this;
		}
		
		private void detach_D_MetricOrgLocationRule_DataRule_Collector(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricOrgLocationRule_DataRule_Collector = null;
		}
	}
	
	[Table(Name="dbo.DataRuleFullOrgLocationView")]
	public partial class DataRuleFullOrgLocationView : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _DataRuleID;
		
		private int _DataRuleTypeID;
		
		private int _OrderNumber;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _GroupId;
		
		public DataRuleFullOrgLocationView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="DataRuleID", Storage="_DataRuleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataRuleID
		{
			get
			{
				return this._DataRuleID;
			}
			set
			{
				if ((this._DataRuleID != value))
				{
					this._DataRuleID = value;
				}
			}
		}
		
		[Column(Name="DataRuleTypeID", Storage="_DataRuleTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int DataRuleTypeID
		{
			get
			{
				return this._DataRuleTypeID;
			}
			set
			{
				if ((this._DataRuleTypeID != value))
				{
					this._DataRuleTypeID = value;
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this._OrderNumber = value;
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this._GroupCategoryAspectID = value;
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					this._PerformanceIndicatorID = value;
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					this._PerformanceIndicatorFormID = value;
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this._Updated = value;
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Name="GroupId", Storage="_GroupId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.DataRuleType")]
	public partial class DataRuleType : LinqMicajahEntitybase
	{
		
		private int _DataRuleTypeID;
		
		private string _Name;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<DataRule> _DataRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataRuleTypeIDChanging(int value);
    partial void OnDataRuleTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataRuleType()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			OnCreated();
		}
		
		[Column(Name="DataRuleTypeID", Storage="_DataRuleTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataRuleTypeID
		{
			get
			{
				return this._DataRuleTypeID;
			}
			set
			{
				if ((this._DataRuleTypeID != value))
				{
					this.OnDataRuleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataRuleTypeID = value;
					this.SendPropertyChanged("DataRuleTypeID");
					this.OnDataRuleTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRuleType = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRuleType = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRuleType = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.DataRuleType = null;
		}
	}
	
	[Table(Name="dbo.DataViewColumn")]
	public partial class DataViewColumn : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _DataViewColumnID;
		
		private System.Guid _DataViewListID;
		
		private int _DataViewColumnListTypeID;
		
		private string _TableName;
		
		private string _ColumnName;
		
		private int _OrderNumber;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<DataViewColumnListType> _DataViewColumnListType;
		
		private EntityRef<DataViewList> _DataViewList;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntitySet<DataViewWhere> _DataViewWhere;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnDataViewColumnIDChanging(System.Guid value);
    partial void OnDataViewColumnIDChanged();
    partial void OnDataViewListIDChanging(System.Guid value);
    partial void OnDataViewListIDChanged();
    partial void OnDataViewColumnListTypeIDChanging(int value);
    partial void OnDataViewColumnListTypeIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public DataViewColumn()
		{
			this._DataViewColumnListType = default(EntityRef<DataViewColumnListType>);
			this._DataViewList = default(EntityRef<DataViewList>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._DataViewWhere = new EntitySet<DataViewWhere>(new Action<DataViewWhere>(this.attach_DataViewWhere), new Action<DataViewWhere>(this.detach_DataViewWhere));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._DataViewList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="DataViewColumnID", Storage="_DataViewColumnID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataViewColumnID
		{
			get
			{
				return this._DataViewColumnID;
			}
			set
			{
				if ((this._DataViewColumnID != value))
				{
					this.OnDataViewColumnIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewColumnID = value;
					this.SendPropertyChanged("DataViewColumnID");
					this.OnDataViewColumnIDChanged();
				}
			}
		}
		
		[Column(Name="DataViewListID", Storage="_DataViewListID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataViewListID
		{
			get
			{
				return this._DataViewListID;
			}
			set
			{
				if ((this._DataViewListID != value))
				{
					if (this._DataViewList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataViewListIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewListID = value;
					this.SendPropertyChanged("DataViewListID");
					this.OnDataViewListIDChanged();
				}
			}
		}
		
		[Column(Name="DataViewColumnListTypeID", Storage="_DataViewColumnListTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int DataViewColumnListTypeID
		{
			get
			{
				return this._DataViewColumnListTypeID;
			}
			set
			{
				if ((this._DataViewColumnListTypeID != value))
				{
					if (this._DataViewColumnListType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataViewColumnListTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewColumnListTypeID = value;
					this.SendPropertyChanged("DataViewColumnListTypeID");
					this.OnDataViewColumnListTypeIDChanged();
				}
			}
		}
		
		[Column(Name="TableName", Storage="_TableName", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[Column(Name="ColumnName", Storage="_ColumnName", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public DataViewColumnListType DataViewColumnListType
		{
			get
			{
				return this._DataViewColumnListType.Entity;
			}
			set
			{
				DataViewColumnListType previousValue = this._DataViewColumnListType.Entity;
				if (((previousValue != value) 
							|| (this._DataViewColumnListType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataViewColumnListType.Entity = null;
						previousValue.DataViewColumn.Remove(this);
					}
					this._DataViewColumnListType.Entity = value;
					if ((value != null))
					{
						value.DataViewColumn.Add(this);
						this._DataViewColumnListTypeID = value.DataViewColumnListTypeID;
					}
					else
					{
						this._DataViewColumnListTypeID = default(int);
					}
					this.SendPropertyChanged("DataViewColumnListType");
				}
			}
		}
		
		public DataViewList DataViewList
		{
			get
			{
				return this._DataViewList.Entity;
			}
			set
			{
				DataViewList previousValue = this._DataViewList.Entity;
				if (((previousValue != value) 
							|| (this._DataViewList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataViewList.Entity = null;
						previousValue.DataViewColumn.Remove(this);
					}
					this._DataViewList.Entity = value;
					if ((value != null))
					{
						value.DataViewColumn.Add(this);
						this._InstanceId = value.InstanceId;
						this._DataViewListID = value.DataViewListID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._DataViewListID = default(System.Guid);
					}
					this.SendPropertyChanged("DataViewList");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.DataViewColumn.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.DataViewColumn.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public EntitySet<DataViewWhere> DataViewWhere
		{
			get
			{
				return this._DataViewWhere;
			}
			set
			{
				this._DataViewWhere.Assign(value);
			}
		}
		
		
		private void attach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewColumn = this;
		}
		
		private void detach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewColumn = null;
		}
	}
	
	[Table(Name="dbo.DataViewColumnListType")]
	public partial class DataViewColumnListType : LinqMicajahEntitybase
	{
		
		private int _DataViewColumnListTypeID;
		
		private string _Name;
		
		private EntitySet<DataViewColumn> _DataViewColumn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataViewColumnListTypeIDChanging(int value);
    partial void OnDataViewColumnListTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataViewColumnListType()
		{
			this._DataViewColumn = new EntitySet<DataViewColumn>(new Action<DataViewColumn>(this.attach_DataViewColumn), new Action<DataViewColumn>(this.detach_DataViewColumn));
			OnCreated();
		}
		
		[Column(Name="DataViewColumnListTypeID", Storage="_DataViewColumnListTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataViewColumnListTypeID
		{
			get
			{
				return this._DataViewColumnListTypeID;
			}
			set
			{
				if ((this._DataViewColumnListTypeID != value))
				{
					this.OnDataViewColumnListTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewColumnListTypeID = value;
					this.SendPropertyChanged("DataViewColumnListTypeID");
					this.OnDataViewColumnListTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="VarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<DataViewColumn> DataViewColumn
		{
			get
			{
				return this._DataViewColumn;
			}
			set
			{
				this._DataViewColumn.Assign(value);
			}
		}
		
		
		private void attach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.DataViewColumnListType = this;
		}
		
		private void detach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.DataViewColumnListType = null;
		}
	}
	
	[Table(Name="dbo.DataViewConditionType")]
	public partial class DataViewConditionType : LinqMicajahEntitybase
	{
		
		private int _DataViewConditionTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<DataViewWhere> _DataViewWhere;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataViewConditionTypeIDChanging(int value);
    partial void OnDataViewConditionTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DataViewConditionType()
		{
			this._DataViewWhere = new EntitySet<DataViewWhere>(new Action<DataViewWhere>(this.attach_DataViewWhere), new Action<DataViewWhere>(this.detach_DataViewWhere));
			OnCreated();
		}
		
		[Column(Name="DataViewConditionTypeID", Storage="_DataViewConditionTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataViewConditionTypeID
		{
			get
			{
				return this._DataViewConditionTypeID;
			}
			set
			{
				if ((this._DataViewConditionTypeID != value))
				{
					this.OnDataViewConditionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewConditionTypeID = value;
					this.SendPropertyChanged("DataViewConditionTypeID");
					this.OnDataViewConditionTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public EntitySet<DataViewWhere> DataViewWhere
		{
			get
			{
				return this._DataViewWhere;
			}
			set
			{
				this._DataViewWhere.Assign(value);
			}
		}
		
		
		private void attach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewConditionType = this;
		}
		
		private void detach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewConditionType = null;
		}
	}
	
	[Table(Name="dbo.DataViewList")]
	public partial class DataViewList : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _DataViewListID;
		
		private System.Guid _DataViewTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private string _WhereCondition;
		
		private bool _Slave;
		
		private string _WhereConditionSlave;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntitySet<DataViewColumn> _DataViewColumn;
		
		private EntitySet<DataViewWhere> _DataViewWhere;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnDataViewListIDChanging(System.Guid value);
    partial void OnDataViewListIDChanged();
    partial void OnDataViewTypeIDChanging(System.Guid value);
    partial void OnDataViewTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnWhereConditionChanging(string value);
    partial void OnWhereConditionChanged();
    partial void OnSlaveChanging(bool value);
    partial void OnSlaveChanged();
    partial void OnWhereConditionSlaveChanging(string value);
    partial void OnWhereConditionSlaveChanged();
    #endregion
		
		public DataViewList()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._DataViewColumn = new EntitySet<DataViewColumn>(new Action<DataViewColumn>(this.attach_DataViewColumn), new Action<DataViewColumn>(this.detach_DataViewColumn));
			this._DataViewWhere = new EntitySet<DataViewWhere>(new Action<DataViewWhere>(this.attach_DataViewWhere), new Action<DataViewWhere>(this.detach_DataViewWhere));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="DataViewListID", Storage="_DataViewListID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataViewListID
		{
			get
			{
				return this._DataViewListID;
			}
			set
			{
				if ((this._DataViewListID != value))
				{
					this.OnDataViewListIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewListID = value;
					this.SendPropertyChanged("DataViewListID");
					this.OnDataViewListIDChanged();
				}
			}
		}
		
		[Column(Name="DataViewTypeID", Storage="_DataViewTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataViewTypeID
		{
			get
			{
				return this._DataViewTypeID;
			}
			set
			{
				if ((this._DataViewTypeID != value))
				{
					this.OnDataViewTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewTypeID = value;
					this.SendPropertyChanged("DataViewTypeID");
					this.OnDataViewTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="WhereCondition", Storage="_WhereCondition", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string WhereCondition
		{
			get
			{
				return this._WhereCondition;
			}
			set
			{
				if ((this._WhereCondition != value))
				{
					this.OnWhereConditionChanging(value);
					this.SendPropertyChanging();
					this._WhereCondition = value;
					this.SendPropertyChanged("WhereCondition");
					this.OnWhereConditionChanged();
				}
			}
		}
		
		[Column(Name="Slave", Storage="_Slave", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Slave
		{
			get
			{
				return this._Slave;
			}
			set
			{
				if ((this._Slave != value))
				{
					this.OnSlaveChanging(value);
					this.SendPropertyChanging();
					this._Slave = value;
					this.SendPropertyChanged("Slave");
					this.OnSlaveChanged();
				}
			}
		}
		
		[Column(Name="WhereConditionSlave", Storage="_WhereConditionSlave", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string WhereConditionSlave
		{
			get
			{
				return this._WhereConditionSlave;
			}
			set
			{
				if ((this._WhereConditionSlave != value))
				{
					this.OnWhereConditionSlaveChanging(value);
					this.SendPropertyChanging();
					this._WhereConditionSlave = value;
					this.SendPropertyChanged("WhereConditionSlave");
					this.OnWhereConditionSlaveChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.DataViewList.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.DataViewList.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public EntitySet<DataViewColumn> DataViewColumn
		{
			get
			{
				return this._DataViewColumn;
			}
			set
			{
				this._DataViewColumn.Assign(value);
			}
		}
		
		public EntitySet<DataViewWhere> DataViewWhere
		{
			get
			{
				return this._DataViewWhere;
			}
			set
			{
				this._DataViewWhere.Assign(value);
			}
		}
		
		
		private void attach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.DataViewList = this;
		}
		
		private void detach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.DataViewList = null;
		}
		
		private void attach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewList = this;
		}
		
		private void detach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.DataViewList = null;
		}
	}
	
	[Table(Name="dbo.DataViewWhere")]
	public partial class DataViewWhere : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _DataViewWhereID;
		
		private System.Guid _DataViewColumnID;
		
		private int _DataViewConditionTypeID;
		
		private string _CompareValue;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private bool _Slave;
		
		private System.Guid _DataViewListID;
		
		private EntityRef<DataViewColumn> _DataViewColumn;
		
		private EntityRef<DataViewConditionType> _DataViewConditionType;
		
		private EntityRef<DataViewList> _DataViewList;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnDataViewWhereIDChanging(System.Guid value);
    partial void OnDataViewWhereIDChanged();
    partial void OnDataViewColumnIDChanging(System.Guid value);
    partial void OnDataViewColumnIDChanged();
    partial void OnDataViewConditionTypeIDChanging(int value);
    partial void OnDataViewConditionTypeIDChanged();
    partial void OnCompareValueChanging(string value);
    partial void OnCompareValueChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnSlaveChanging(bool value);
    partial void OnSlaveChanged();
    partial void OnDataViewListIDChanging(System.Guid value);
    partial void OnDataViewListIDChanged();
    #endregion
		
		public DataViewWhere()
		{
			this._DataViewColumn = default(EntityRef<DataViewColumn>);
			this._DataViewConditionType = default(EntityRef<DataViewConditionType>);
			this._DataViewList = default(EntityRef<DataViewList>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._DataViewColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="DataViewWhereID", Storage="_DataViewWhereID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataViewWhereID
		{
			get
			{
				return this._DataViewWhereID;
			}
			set
			{
				if ((this._DataViewWhereID != value))
				{
					this.OnDataViewWhereIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewWhereID = value;
					this.SendPropertyChanged("DataViewWhereID");
					this.OnDataViewWhereIDChanged();
				}
			}
		}
		
		[Column(Name="DataViewColumnID", Storage="_DataViewColumnID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataViewColumnID
		{
			get
			{
				return this._DataViewColumnID;
			}
			set
			{
				if ((this._DataViewColumnID != value))
				{
					if (this._DataViewColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataViewColumnIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewColumnID = value;
					this.SendPropertyChanged("DataViewColumnID");
					this.OnDataViewColumnIDChanged();
				}
			}
		}
		
		[Column(Name="DataViewConditionTypeID", Storage="_DataViewConditionTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int DataViewConditionTypeID
		{
			get
			{
				return this._DataViewConditionTypeID;
			}
			set
			{
				if ((this._DataViewConditionTypeID != value))
				{
					if (this._DataViewConditionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataViewConditionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewConditionTypeID = value;
					this.SendPropertyChanged("DataViewConditionTypeID");
					this.OnDataViewConditionTypeIDChanged();
				}
			}
		}
		
		[Column(Name="CompareValue", Storage="_CompareValue", DbType="NVarChar(100)", IsPrimaryKey=false)]
		public string CompareValue
		{
			get
			{
				return this._CompareValue;
			}
			set
			{
				if ((this._CompareValue != value))
				{
					this.OnCompareValueChanging(value);
					this.SendPropertyChanging();
					this._CompareValue = value;
					this.SendPropertyChanged("CompareValue");
					this.OnCompareValueChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="Slave", Storage="_Slave", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Slave
		{
			get
			{
				return this._Slave;
			}
			set
			{
				if ((this._Slave != value))
				{
					this.OnSlaveChanging(value);
					this.SendPropertyChanging();
					this._Slave = value;
					this.SendPropertyChanged("Slave");
					this.OnSlaveChanged();
				}
			}
		}
		
		[Column(Name="DataViewListID", Storage="_DataViewListID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DataViewListID
		{
			get
			{
				return this._DataViewListID;
			}
			set
			{
				if ((this._DataViewListID != value))
				{
					if (this._DataViewList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataViewListIDChanging(value);
					this.SendPropertyChanging();
					this._DataViewListID = value;
					this.SendPropertyChanged("DataViewListID");
					this.OnDataViewListIDChanged();
				}
			}
		}
		
		public DataViewColumn DataViewColumn
		{
			get
			{
				return this._DataViewColumn.Entity;
			}
			set
			{
				DataViewColumn previousValue = this._DataViewColumn.Entity;
				if (((previousValue != value) 
							|| (this._DataViewColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataViewColumn.Entity = null;
						previousValue.DataViewWhere.Remove(this);
					}
					this._DataViewColumn.Entity = value;
					if ((value != null))
					{
						value.DataViewWhere.Add(this);
						this._InstanceId = value.InstanceId;
						this._DataViewColumnID = value.DataViewColumnID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._DataViewColumnID = default(System.Guid);
					}
					this.SendPropertyChanged("DataViewColumn");
				}
			}
		}
		
		public DataViewConditionType DataViewConditionType
		{
			get
			{
				return this._DataViewConditionType.Entity;
			}
			set
			{
				DataViewConditionType previousValue = this._DataViewConditionType.Entity;
				if (((previousValue != value) 
							|| (this._DataViewConditionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataViewConditionType.Entity = null;
						previousValue.DataViewWhere.Remove(this);
					}
					this._DataViewConditionType.Entity = value;
					if ((value != null))
					{
						value.DataViewWhere.Add(this);
						this._DataViewConditionTypeID = value.DataViewConditionTypeID;
					}
					else
					{
						this._DataViewConditionTypeID = default(int);
					}
					this.SendPropertyChanged("DataViewConditionType");
				}
			}
		}
		
		public DataViewList DataViewList
		{
			get
			{
				return this._DataViewList.Entity;
			}
			set
			{
				DataViewList previousValue = this._DataViewList.Entity;
				if (((previousValue != value) 
							|| (this._DataViewList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataViewList.Entity = null;
						previousValue.DataViewWhere.Remove(this);
					}
					this._DataViewList.Entity = value;
					if ((value != null))
					{
						value.DataViewWhere.Add(this);
						this._InstanceId = value.InstanceId;
						this._DataViewListID = value.DataViewListID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._DataViewListID = default(System.Guid);
					}
					this.SendPropertyChanged("DataViewList");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.DataViewWhere.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.DataViewWhere.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.EntityNodeFullNameView")]
	public partial class EntityNodeFullNameView : LinqMicajahEntitybase
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Guid _EntityNodeId;
		
		private System.Nullable<System.Guid> _EntityNodeTypeId;
		
		private System.Nullable<System.Guid> _Parent1;
		
		private System.Nullable<System.Guid> _ParOrgId1;
		
		private System.Nullable<System.Guid> _Parent2;
		
		private System.Nullable<System.Guid> _ParOrgId2;
		
		private System.Nullable<System.Guid> _Parent3;
		
		private System.Nullable<System.Guid> _ParOrgId3;
		
		private System.Nullable<System.Guid> _Parent4;
		
		private System.Nullable<System.Guid> _ParOrgId4;
		
		private System.Nullable<System.Guid> _Parent5;
		
		private System.Nullable<System.Guid> _ParOrgId5;
		
		private string _FullName;
		
		public EntityNodeFullNameView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="EntityNodeId", Storage="_EntityNodeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityNodeId
		{
			get
			{
				return this._EntityNodeId;
			}
			set
			{
				if ((this._EntityNodeId != value))
				{
					this._EntityNodeId = value;
				}
			}
		}
		
		[Column(Name="EntityNodeTypeId", Storage="_EntityNodeTypeId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> EntityNodeTypeId
		{
			get
			{
				return this._EntityNodeTypeId;
			}
			set
			{
				if ((this._EntityNodeTypeId != value))
				{
					this._EntityNodeTypeId = value;
				}
			}
		}
		
		[Column(Name="Parent1", Storage="_Parent1", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent1
		{
			get
			{
				return this._Parent1;
			}
			set
			{
				if ((this._Parent1 != value))
				{
					this._Parent1 = value;
				}
			}
		}
		
		[Column(Name="ParOrgId1", Storage="_ParOrgId1", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParOrgId1
		{
			get
			{
				return this._ParOrgId1;
			}
			set
			{
				if ((this._ParOrgId1 != value))
				{
					this._ParOrgId1 = value;
				}
			}
		}
		
		[Column(Name="Parent2", Storage="_Parent2", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent2
		{
			get
			{
				return this._Parent2;
			}
			set
			{
				if ((this._Parent2 != value))
				{
					this._Parent2 = value;
				}
			}
		}
		
		[Column(Name="ParOrgId2", Storage="_ParOrgId2", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParOrgId2
		{
			get
			{
				return this._ParOrgId2;
			}
			set
			{
				if ((this._ParOrgId2 != value))
				{
					this._ParOrgId2 = value;
				}
			}
		}
		
		[Column(Name="Parent3", Storage="_Parent3", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent3
		{
			get
			{
				return this._Parent3;
			}
			set
			{
				if ((this._Parent3 != value))
				{
					this._Parent3 = value;
				}
			}
		}
		
		[Column(Name="ParOrgId3", Storage="_ParOrgId3", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParOrgId3
		{
			get
			{
				return this._ParOrgId3;
			}
			set
			{
				if ((this._ParOrgId3 != value))
				{
					this._ParOrgId3 = value;
				}
			}
		}
		
		[Column(Name="Parent4", Storage="_Parent4", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent4
		{
			get
			{
				return this._Parent4;
			}
			set
			{
				if ((this._Parent4 != value))
				{
					this._Parent4 = value;
				}
			}
		}
		
		[Column(Name="ParOrgId4", Storage="_ParOrgId4", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParOrgId4
		{
			get
			{
				return this._ParOrgId4;
			}
			set
			{
				if ((this._ParOrgId4 != value))
				{
					this._ParOrgId4 = value;
				}
			}
		}
		
		[Column(Name="Parent5", Storage="_Parent5", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent5
		{
			get
			{
				return this._Parent5;
			}
			set
			{
				if ((this._Parent5 != value))
				{
					this._Parent5 = value;
				}
			}
		}
		
		[Column(Name="ParOrgId5", Storage="_ParOrgId5", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParOrgId5
		{
			get
			{
				return this._ParOrgId5;
			}
			set
			{
				if ((this._ParOrgId5 != value))
				{
					this._ParOrgId5 = value;
				}
			}
		}
		
		[Column(Name="FullName", Storage="_FullName", DbType="NVarChar(1545) NOT NULL", IsPrimaryKey=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	[Table(Name="mfs.File")]
	public partial class Mfs_File : LinqMicajahEntitybase
	{
		
		private string _FileUniqueId;
		
		private System.Guid _OrganizationId;
		
		private System.Guid _DepartmentId;
		
		private string _LocalObjectType;
		
		private string _LocalObjectId;
		
		private string _Name;
		
		private int _SizeInBytes;
		
		private System.DateTime _UpdatedTime;
		
		private string _UpdatedBy;
		
		private bool _Deleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileUniqueIdChanging(string value);
    partial void OnFileUniqueIdChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnDepartmentIdChanging(System.Guid value);
    partial void OnDepartmentIdChanged();
    partial void OnLocalObjectTypeChanging(string value);
    partial void OnLocalObjectTypeChanged();
    partial void OnLocalObjectIdChanging(string value);
    partial void OnLocalObjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSizeInBytesChanging(int value);
    partial void OnSizeInBytesChanged();
    partial void OnUpdatedTimeChanging(System.DateTime value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mfs_File()
		{
			OnCreated();
		}
		
		[Column(Name="FileUniqueId", Storage="_FileUniqueId", DbType="NVarChar(32) NOT NULL", IsPrimaryKey=true)]
		public string FileUniqueId
		{
			get
			{
				return this._FileUniqueId;
			}
			set
			{
				if ((this._FileUniqueId != value))
				{
					this.OnFileUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._FileUniqueId = value;
					this.SendPropertyChanged("FileUniqueId");
					this.OnFileUniqueIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="DepartmentId", Storage="_DepartmentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Name="LocalObjectType", Storage="_LocalObjectType", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string LocalObjectType
		{
			get
			{
				return this._LocalObjectType;
			}
			set
			{
				if ((this._LocalObjectType != value))
				{
					this.OnLocalObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._LocalObjectType = value;
					this.SendPropertyChanged("LocalObjectType");
					this.OnLocalObjectTypeChanged();
				}
			}
		}
		
		[Column(Name="LocalObjectId", Storage="_LocalObjectId", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string LocalObjectId
		{
			get
			{
				return this._LocalObjectId;
			}
			set
			{
				if ((this._LocalObjectId != value))
				{
					this.OnLocalObjectIdChanging(value);
					this.SendPropertyChanging();
					this._LocalObjectId = value;
					this.SendPropertyChanged("LocalObjectId");
					this.OnLocalObjectIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="SizeInBytes", Storage="_SizeInBytes", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int SizeInBytes
		{
			get
			{
				return this._SizeInBytes;
			}
			set
			{
				if ((this._SizeInBytes != value))
				{
					this.OnSizeInBytesChanging(value);
					this.SendPropertyChanging();
					this._SizeInBytes = value;
					this.SendPropertyChanged("SizeInBytes");
					this.OnSizeInBytesChanged();
				}
			}
		}
		
		[Column(Name="UpdatedTime", Storage="_UpdatedTime", DbType="DateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[Column(Name="UpdatedBy", Storage="_UpdatedBy", DbType="NVarChar(255)", IsPrimaryKey=false)]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Frequency")]
	public partial class Frequency : LinqMicajahEntitybase
	{
		
		private int _FrequencyID;
		
		private string _Name;
		
		private EntitySet<D_PeriodDate> _D_PeriodDate;
		
		private EntitySet<Metric> _Metric;
		
		private EntitySet<MetricValue> _MetricValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFrequencyIDChanging(int value);
    partial void OnFrequencyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Frequency()
		{
			this._D_PeriodDate = new EntitySet<D_PeriodDate>(new Action<D_PeriodDate>(this.attach_D_PeriodDate), new Action<D_PeriodDate>(this.detach_D_PeriodDate));
			this._Metric = new EntitySet<Metric>(new Action<Metric>(this.attach_Metric), new Action<Metric>(this.detach_Metric));
			this._MetricValue = new EntitySet<MetricValue>(new Action<MetricValue>(this.attach_MetricValue), new Action<MetricValue>(this.detach_MetricValue));
			OnCreated();
		}
		
		[Column(Name="FrequencyID", Storage="_FrequencyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this.OnFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._FrequencyID = value;
					this.SendPropertyChanged("FrequencyID");
					this.OnFrequencyIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<D_PeriodDate> D_PeriodDate
		{
			get
			{
				return this._D_PeriodDate;
			}
			set
			{
				this._D_PeriodDate.Assign(value);
			}
		}
		
		public EntitySet<Metric> Metric
		{
			get
			{
				return this._Metric;
			}
			set
			{
				this._Metric.Assign(value);
			}
		}
		
		public EntitySet<MetricValue> MetricValue
		{
			get
			{
				return this._MetricValue;
			}
			set
			{
				this._MetricValue.Assign(value);
			}
		}
		
		
		private void attach_D_PeriodDate(D_PeriodDate entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = this;
		}
		
		private void detach_D_PeriodDate(D_PeriodDate entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = null;
		}
		
		private void attach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = this;
		}
		
		private void detach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = null;
		}
		
		private void attach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = this;
		}
		
		private void detach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Frequency = null;
		}
	}
	
	[Table(Name="dbo.GCAFullNameView")]
	public partial class GCAFullNameView : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _Parent1;
		
		private System.Nullable<System.Guid> _Parent2;
		
		private string _FullName;
		
		public GCAFullNameView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this._GroupCategoryAspectID = value;
				}
			}
		}
		
		[Column(Name="Parent1", Storage="_Parent1", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent1
		{
			get
			{
				return this._Parent1;
			}
			set
			{
				if ((this._Parent1 != value))
				{
					this._Parent1 = value;
				}
			}
		}
		
		[Column(Name="Parent2", Storage="_Parent2", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent2
		{
			get
			{
				return this._Parent2;
			}
			set
			{
				if ((this._Parent2 != value))
				{
					this._Parent2 = value;
				}
			}
		}
		
		[Column(Name="FullName", Storage="_FullName", DbType="NVarChar(326) NOT NULL", IsPrimaryKey=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.GroupCategoryAspect")]
	public partial class GroupCategoryAspect : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private string _Name;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect_GroupCategoryAspect;
		
		private EntitySet<GroupCategoryAspect> _GroupCategoryAspect_GroupCategoryAspect1;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<PerformanceIndicator> _PerformanceIndicator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Guid value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public GroupCategoryAspect()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._GroupCategoryAspect_GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._GroupCategoryAspect_GroupCategoryAspect1 = new EntitySet<GroupCategoryAspect>(new Action<GroupCategoryAspect>(this.attach_GroupCategoryAspect_GroupCategoryAspect1), new Action<GroupCategoryAspect>(this.detach_GroupCategoryAspect_GroupCategoryAspect1));
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._PerformanceIndicator = new EntitySet<PerformanceIndicator>(new Action<PerformanceIndicator>(this.attach_PerformanceIndicator), new Action<PerformanceIndicator>(this.detach_PerformanceIndicator));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._GroupCategoryAspect_GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="ParentId", Storage="_ParentId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._GroupCategoryAspect_GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect_GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect_GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect_GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect_GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect_GroupCategoryAspect.Entity = null;
						previousValue.GroupCategoryAspect_GroupCategoryAspect1.Remove(this);
					}
					this._GroupCategoryAspect_GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.GroupCategoryAspect_GroupCategoryAspect1.Add(this);
						this._InstanceId = value.InstanceId;
						this._ParentId = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect_GroupCategoryAspect");
				}
			}
		}
		
		public EntitySet<GroupCategoryAspect> GroupCategoryAspect_GroupCategoryAspect1
		{
			get
			{
				return this._GroupCategoryAspect_GroupCategoryAspect1;
			}
			set
			{
				this._GroupCategoryAspect_GroupCategoryAspect1.Assign(value);
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicator> PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator;
			}
			set
			{
				this._PerformanceIndicator.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = null;
		}
		
		private void attach_GroupCategoryAspect_GroupCategoryAspect1(GroupCategoryAspect entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect_GroupCategoryAspect = this;
		}
		
		private void detach_GroupCategoryAspect_GroupCategoryAspect1(GroupCategoryAspect entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect_GroupCategoryAspect = null;
		}
		
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = null;
		}
		
		private void attach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = this;
		}
		
		private void detach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.GroupCategoryAspect = null;
		}
	}
				
	[Table(Name="dbo.Mc_Database")]
	public partial class Mc_Database : LinqMicajahEntitybase
	{
		
		private System.Guid _DatabaseId;
		
		private string _Name;
		
		private string _Description;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Guid _DatabaseServerId;
		
		private bool _Deleted;
		
		private EntityRef<Mc_DatabaseServer> _Mc_DatabaseServer;
		
		private EntitySet<Mc_Organization> _Mc_Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseIdChanging(System.Guid value);
    partial void OnDatabaseIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDatabaseServerIdChanging(System.Guid value);
    partial void OnDatabaseServerIdChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_Database()
		{
			this._Mc_DatabaseServer = default(EntityRef<Mc_DatabaseServer>);
			this._Mc_Organization = new EntitySet<Mc_Organization>(new Action<Mc_Organization>(this.attach_Mc_Organization), new Action<Mc_Organization>(this.detach_Mc_Organization));
			OnCreated();
		}
		
		[Column(Name="DatabaseId", Storage="_DatabaseId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseId
		{
			get
			{
				return this._DatabaseId;
			}
			set
			{
				if ((this._DatabaseId != value))
				{
					this.OnDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseId = value;
					this.SendPropertyChanged("DatabaseId");
					this.OnDatabaseIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="UserName", Storage="_UserName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Name="Password", Storage="_Password", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Name="DatabaseServerId", Storage="_DatabaseServerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid DatabaseServerId
		{
			get
			{
				return this._DatabaseServerId;
			}
			set
			{
				if ((this._DatabaseServerId != value))
				{
					if (this._Mc_DatabaseServer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseServerIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseServerId = value;
					this.SendPropertyChanged("DatabaseServerId");
					this.OnDatabaseServerIdChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public Mc_DatabaseServer Mc_DatabaseServer
		{
			get
			{
				return this._Mc_DatabaseServer.Entity;
			}
			set
			{
				Mc_DatabaseServer previousValue = this._Mc_DatabaseServer.Entity;
				if (((previousValue != value) 
							|| (this._Mc_DatabaseServer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_DatabaseServer.Entity = null;
						previousValue.Mc_Database.Remove(this);
					}
					this._Mc_DatabaseServer.Entity = value;
					if ((value != null))
					{
						value.Mc_Database.Add(this);
						this._DatabaseServerId = value.DatabaseServerId;
					}
					else
					{
						this._DatabaseServerId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_DatabaseServer");
				}
			}
		}
		
		public EntitySet<Mc_Organization> Mc_Organization
		{
			get
			{
				return this._Mc_Organization;
			}
			set
			{
				this._Mc_Organization.Assign(value);
			}
		}
		
		
		private void attach_Mc_Organization(Mc_Organization entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Database = this;
		}
		
		private void detach_Mc_Organization(Mc_Organization entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Database = null;
		}
	}
	
	[Table(Name="dbo.Mc_DatabaseServer")]
	public partial class Mc_DatabaseServer : LinqMicajahEntitybase
	{
		
		private System.Guid _DatabaseServerId;
		
		private string _Name;
		
		private string _InstanceName;
		
		private int _Port;
		
		private string _Description;
		
		private System.Guid _WebsiteId;
		
		private bool _Deleted;
		
		private EntitySet<Mc_Database> _Mc_Database;
		
		private EntityRef<Mc_Website> _Mc_Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseServerIdChanging(System.Guid value);
    partial void OnDatabaseServerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInstanceNameChanging(string value);
    partial void OnInstanceNameChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteIdChanging(System.Guid value);
    partial void OnWebsiteIdChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_DatabaseServer()
		{
			this._Mc_Database = new EntitySet<Mc_Database>(new Action<Mc_Database>(this.attach_Mc_Database), new Action<Mc_Database>(this.detach_Mc_Database));
			this._Mc_Website = default(EntityRef<Mc_Website>);
			OnCreated();
		}
		
		[Column(Name="DatabaseServerId", Storage="_DatabaseServerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseServerId
		{
			get
			{
				return this._DatabaseServerId;
			}
			set
			{
				if ((this._DatabaseServerId != value))
				{
					this.OnDatabaseServerIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseServerId = value;
					this.SendPropertyChanged("DatabaseServerId");
					this.OnDatabaseServerIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="InstanceName", Storage="_InstanceName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string InstanceName
		{
			get
			{
				return this._InstanceName;
			}
			set
			{
				if ((this._InstanceName != value))
				{
					this.OnInstanceNameChanging(value);
					this.SendPropertyChanging();
					this._InstanceName = value;
					this.SendPropertyChanged("InstanceName");
					this.OnInstanceNameChanged();
				}
			}
		}
		
		[Column(Name="Port", Storage="_Port", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="WebsiteId", Storage="_WebsiteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid WebsiteId
		{
			get
			{
				return this._WebsiteId;
			}
			set
			{
				if ((this._WebsiteId != value))
				{
					if (this._Mc_Website.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebsiteIdChanging(value);
					this.SendPropertyChanging();
					this._WebsiteId = value;
					this.SendPropertyChanged("WebsiteId");
					this.OnWebsiteIdChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<Mc_Database> Mc_Database
		{
			get
			{
				return this._Mc_Database;
			}
			set
			{
				this._Mc_Database.Assign(value);
			}
		}
		
		public Mc_Website Mc_Website
		{
			get
			{
				return this._Mc_Website.Entity;
			}
			set
			{
				Mc_Website previousValue = this._Mc_Website.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Website.Entity = null;
						previousValue.Mc_DatabaseServer.Remove(this);
					}
					this._Mc_Website.Entity = value;
					if ((value != null))
					{
						value.Mc_DatabaseServer.Add(this);
						this._WebsiteId = value.WebsiteId;
					}
					else
					{
						this._WebsiteId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Website");
				}
			}
		}
		
		
		private void attach_Mc_Database(Mc_Database entity)
		{
			this.SendPropertyChanging();
			entity.Mc_DatabaseServer = this;
		}
		
		private void detach_Mc_Database(Mc_Database entity)
		{
			this.SendPropertyChanging();
			entity.Mc_DatabaseServer = null;
		}
	}
				
	[Table(Name="dbo.Mc_EntityNode")]
	public partial class Mc_EntityNode : LinqMicajahEntitybase
	{
		
		private System.Guid _EntityNodeId;
		
		private System.Nullable<System.Guid> _ParentEntityNodeId;
		
		private string _Name;
		
		private int _OrderNumber;
		
		private System.Guid _OrganizationId;
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Guid _EntityId;
		
		private System.Nullable<System.Guid> _EntityNodeTypeId;
		
		private System.Nullable<System.Guid> _SubEntityId;
		
		private string _SubEntityLocalId;
		
		private string _FullPath;
		
		private bool _Deleted;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_EntityNode> _D_EntityNode;
		
		private EntitySet<D_EntityNode> _EntityNode;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntityRef<Mc_EntityNode> _ParentEntityNode;
		
		private EntitySet<Mc_EntityNode> _Mc_EntityNode_Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<MetricOrgLocationName> _MetricOrgLocationName;
		
		private EntitySet<MetricOrgLocationUoM> _MetricOrgLocationUoM;
		
		private EntitySet<MetricValue> _MetricValue;
		
		private EntitySet<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNodeIdChanging(System.Guid value);
    partial void OnEntityNodeIdChanged();
    partial void OnParentEntityNodeIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentEntityNodeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnInstanceIdChanging(System.Nullable<System.Guid> value);
    partial void OnInstanceIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEntityNodeTypeIdChanging(System.Nullable<System.Guid> value);
    partial void OnEntityNodeTypeIdChanged();
    partial void OnSubEntityIdChanging(System.Nullable<System.Guid> value);
    partial void OnSubEntityIdChanged();
    partial void OnSubEntityLocalIdChanging(string value);
    partial void OnSubEntityLocalIdChanged();
    partial void OnFullPathChanging(string value);
    partial void OnFullPathChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_EntityNode()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_EntityNode = new EntitySet<D_EntityNode>(new Action<D_EntityNode>(this.attach_D_EntityNode), new Action<D_EntityNode>(this.detach_D_EntityNode));
			this._EntityNode = new EntitySet<D_EntityNode>(new Action<D_EntityNode>(this.attach_EntityNode), new Action<D_EntityNode>(this.detach_EntityNode));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._ParentEntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._MetricOrgLocationName = new EntitySet<MetricOrgLocationName>(new Action<MetricOrgLocationName>(this.attach_MetricOrgLocationName), new Action<MetricOrgLocationName>(this.detach_MetricOrgLocationName));
			this._MetricOrgLocationUoM = new EntitySet<MetricOrgLocationUoM>(new Action<MetricOrgLocationUoM>(this.attach_MetricOrgLocationUoM), new Action<MetricOrgLocationUoM>(this.detach_MetricOrgLocationUoM));
			this._MetricValue = new EntitySet<MetricValue>(new Action<MetricValue>(this.attach_MetricValue), new Action<MetricValue>(this.detach_MetricValue));
			this._ScoreCardMetric = new EntitySet<ScoreCardMetric>(new Action<ScoreCardMetric>(this.attach_ScoreCardMetric), new Action<ScoreCardMetric>(this.detach_ScoreCardMetric));
			OnCreated();
		}
		
		[Column(Name="EntityNodeId", Storage="_EntityNodeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNodeId
		{
			get
			{
				return this._EntityNodeId;
			}
			set
			{
				if ((this._EntityNodeId != value))
				{
					this.OnEntityNodeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodeId = value;
					this.SendPropertyChanged("EntityNodeId");
					this.OnEntityNodeIdChanged();
				}
			}
		}
		
		[Column(Name="ParentEntityNodeId", Storage="_ParentEntityNodeId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParentEntityNodeId
		{
			get
			{
				return this._ParentEntityNodeId;
			}
			set
			{
				if ((this._ParentEntityNodeId != value))
				{
					if (this._ParentEntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentEntityNodeIdChanging(value);
					this.SendPropertyChanging();
					this._ParentEntityNodeId = value;
					this.SendPropertyChanged("ParentEntityNodeId");
					this.OnParentEntityNodeIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="EntityId", Storage="_EntityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Name="EntityNodeTypeId", Storage="_EntityNodeTypeId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> EntityNodeTypeId
		{
			get
			{
				return this._EntityNodeTypeId;
			}
			set
			{
				if ((this._EntityNodeTypeId != value))
				{
					this.OnEntityNodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodeTypeId = value;
					this.SendPropertyChanged("EntityNodeTypeId");
					this.OnEntityNodeTypeIdChanged();
				}
			}
		}
		
		[Column(Name="SubEntityId", Storage="_SubEntityId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> SubEntityId
		{
			get
			{
				return this._SubEntityId;
			}
			set
			{
				if ((this._SubEntityId != value))
				{
					this.OnSubEntityIdChanging(value);
					this.SendPropertyChanging();
					this._SubEntityId = value;
					this.SendPropertyChanged("SubEntityId");
					this.OnSubEntityIdChanged();
				}
			}
		}
		
		[Column(Name="SubEntityLocalId", Storage="_SubEntityLocalId", DbType="NVarChar(255)", IsPrimaryKey=false)]
		public string SubEntityLocalId
		{
			get
			{
				return this._SubEntityLocalId;
			}
			set
			{
				if ((this._SubEntityLocalId != value))
				{
					this.OnSubEntityLocalIdChanging(value);
					this.SendPropertyChanging();
					this._SubEntityLocalId = value;
					this.SendPropertyChanged("SubEntityLocalId");
					this.OnSubEntityLocalIdChanged();
				}
			}
		}
		
		[Column(Name="FullPath", Storage="_FullPath", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string FullPath
		{
			get
			{
				return this._FullPath;
			}
			set
			{
				if ((this._FullPath != value))
				{
					this.OnFullPathChanging(value);
					this.SendPropertyChanging();
					this._FullPath = value;
					this.SendPropertyChanged("FullPath");
					this.OnFullPathChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_EntityNode> D_EntityNode
		{
			get
			{
				return this._D_EntityNode;
			}
			set
			{
				this._D_EntityNode.Assign(value);
			}
		}
		
		public EntitySet<D_EntityNode> EntityNode
		{
			get
			{
				return this._EntityNode;
			}
			set
			{
				this._EntityNode.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public Mc_EntityNode ParentEntityNode
		{
			get
			{
				return this._ParentEntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._ParentEntityNode.Entity;
				if (((previousValue != value) 
							|| (this._ParentEntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentEntityNode.Entity = null;
						previousValue.Mc_EntityNode_Mc_EntityNode.Remove(this);
					}
					this._ParentEntityNode.Entity = value;
					if ((value != null))
					{
						value.Mc_EntityNode_Mc_EntityNode.Add(this);
						this._ParentEntityNodeId = value.EntityNodeId;
					}
					else
					{
						this._ParentEntityNodeId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ParentEntityNode");
				}
			}
		}
		
		public EntitySet<Mc_EntityNode> Mc_EntityNode_Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode_Mc_EntityNode;
			}
			set
			{
				this._Mc_EntityNode_Mc_EntityNode.Assign(value);
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.Mc_EntityNode.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.Mc_EntityNode.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationName> MetricOrgLocationName
		{
			get
			{
				return this._MetricOrgLocationName;
			}
			set
			{
				this._MetricOrgLocationName.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationUoM> MetricOrgLocationUoM
		{
			get
			{
				return this._MetricOrgLocationUoM;
			}
			set
			{
				this._MetricOrgLocationUoM.Assign(value);
			}
		}
		
		public EntitySet<MetricValue> MetricValue
		{
			get
			{
				return this._MetricValue;
			}
			set
			{
				this._MetricValue.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric;
			}
			set
			{
				this._ScoreCardMetric.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Included = this;
		}
		
		private void detach_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Included = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
						
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
		
		private void attach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = this;
		}
		
		private void detach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_EntityNode = null;
		}
	}
	
	[Table(Name="dbo.Mc_EntityNodesRelatedEntityNodes")]
	public partial class Mc_EntityNodesRelatedEntityNodes : LinqMicajahEntitybase
	{
		
		private System.Guid _EntityNodesRelatedEntityNodesId;
		
		private System.Guid _EntityNodeId;
		
		private System.Guid _RelatedEntityNodeId;
		
		private System.Guid _EntityId;
		
		private int _RelationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNodesRelatedEntityNodesIdChanging(System.Guid value);
    partial void OnEntityNodesRelatedEntityNodesIdChanged();
    partial void OnEntityNodeIdChanging(System.Guid value);
    partial void OnEntityNodeIdChanged();
    partial void OnRelatedEntityNodeIdChanging(System.Guid value);
    partial void OnRelatedEntityNodeIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnRelationTypeChanging(int value);
    partial void OnRelationTypeChanged();
    #endregion
		
		public Mc_EntityNodesRelatedEntityNodes()
		{
			OnCreated();
		}
		
		[Column(Name="EntityNodesRelatedEntityNodesId", Storage="_EntityNodesRelatedEntityNodesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNodesRelatedEntityNodesId
		{
			get
			{
				return this._EntityNodesRelatedEntityNodesId;
			}
			set
			{
				if ((this._EntityNodesRelatedEntityNodesId != value))
				{
					this.OnEntityNodesRelatedEntityNodesIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodesRelatedEntityNodesId = value;
					this.SendPropertyChanged("EntityNodesRelatedEntityNodesId");
					this.OnEntityNodesRelatedEntityNodesIdChanged();
				}
			}
		}
		
		[Column(Name="EntityNodeId", Storage="_EntityNodeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityNodeId
		{
			get
			{
				return this._EntityNodeId;
			}
			set
			{
				if ((this._EntityNodeId != value))
				{
					this.OnEntityNodeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodeId = value;
					this.SendPropertyChanged("EntityNodeId");
					this.OnEntityNodeIdChanged();
				}
			}
		}
		
		[Column(Name="RelatedEntityNodeId", Storage="_RelatedEntityNodeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid RelatedEntityNodeId
		{
			get
			{
				return this._RelatedEntityNodeId;
			}
			set
			{
				if ((this._RelatedEntityNodeId != value))
				{
					this.OnRelatedEntityNodeIdChanging(value);
					this.SendPropertyChanging();
					this._RelatedEntityNodeId = value;
					this.SendPropertyChanged("RelatedEntityNodeId");
					this.OnRelatedEntityNodeIdChanged();
				}
			}
		}
		
		[Column(Name="EntityId", Storage="_EntityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Name="RelationType", Storage="_RelationType", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int RelationType
		{
			get
			{
				return this._RelationType;
			}
			set
			{
				if ((this._RelationType != value))
				{
					this.OnRelationTypeChanging(value);
					this.SendPropertyChanging();
					this._RelationType = value;
					this.SendPropertyChanged("RelationType");
					this.OnRelationTypeChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Mc_EntityNodeType")]
	public partial class Mc_EntityNodeType : LinqMicajahEntitybase
	{
		
		private System.Guid _EntityNodeTypeId;
		
		private System.Guid _EntityId;
		
		private string _Name;
		
		private int _OrderNumber;
		
		private System.Guid _OrganizationId;
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private bool _Deleted;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNodeTypeIdChanging(System.Guid value);
    partial void OnEntityNodeTypeIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnInstanceIdChanging(System.Nullable<System.Guid> value);
    partial void OnInstanceIdChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_EntityNodeType()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			OnCreated();
		}
		
		[Column(Name="EntityNodeTypeId", Storage="_EntityNodeTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNodeTypeId
		{
			get
			{
				return this._EntityNodeTypeId;
			}
			set
			{
				if ((this._EntityNodeTypeId != value))
				{
					this.OnEntityNodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNodeTypeId = value;
					this.SendPropertyChanged("EntityNodeTypeId");
					this.OnEntityNodeTypeIdChanged();
				}
			}
		}
		
		[Column(Name="EntityId", Storage="_EntityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="OrderNumber", Storage="_OrderNumber", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.Mc_EntityNodeType.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.Mc_EntityNodeType.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Mc_Group")]
	public partial class Mc_Group : LinqMicajahEntitybase
	{
		
		private System.Guid _GroupId;
		
		private System.Guid _OrganizationId;
		
		private string _Name;
		
		private string _Description;
		
		private bool _BuiltIn;
		
		private bool _Deleted;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<D_MetricOrgLocationRule> _Group;
		
		private EntitySet<DataRule> _DataRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(System.Guid value);
    partial void OnGroupIdChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBuiltInChanging(bool value);
    partial void OnBuiltInChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_Group()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._Group = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_Group), new Action<D_MetricOrgLocationRule>(this.detach_Group));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			OnCreated();
		}
		
		[Column(Name="GroupId", Storage="_GroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="BuiltIn", Storage="_BuiltIn", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool BuiltIn
		{
			get
			{
				return this._BuiltIn;
			}
			set
			{
				if ((this._BuiltIn != value))
				{
					this.OnBuiltInChanging(value);
					this.SendPropertyChanging();
					this._BuiltIn = value;
					this.SendPropertyChanged("BuiltIn");
					this.OnBuiltInChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				this._Group.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
										
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = null;
		}
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = null;
		}
		
		private void attach_Group(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.CollectorGroup = this;
		}
		
		private void detach_Group(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.CollectorGroup = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Group = null;
		}
																	}
			
	[Table(Name="dbo.Mc_Instance")]
	public partial class Mc_Instance : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _OrganizationId;
		
		private string _Name;
		
		private string _Description;
		
		private bool _EnableSignUpUser;
		
		private bool _Deleted;
		
		private EntitySet<D_EntityNode> _D_EntityNode;
		
		private EntitySet<D_MetricCategory> _D_MetricCategory;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<D_MetricRelation> _D_MetricRelation;
		
		private EntitySet<DataCollectorRuleOut> _DataCollectorRuleOut;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntitySet<DataViewList> _DataViewList;
		
		private EntitySet<DataViewColumn> _DataViewColumn;
		
		private EntitySet<DataViewWhere> _DataViewWhere;
		
		private EntitySet<Mc_EntityNode> _Mc_EntityNode;
		
		private EntitySet<Mc_EntityNodeType> _Mc_EntityNodeType;
		
		private EntitySet<Metric> _Metric;
		
		private EntitySet<MetricCategory> _MetricCategory;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<MetricFormula> _MetricFormula;
		
		private EntitySet<MetricOrgLocationName> _MetricOrgLocationName;
		
		private EntitySet<MetricOrgLocationUoM> _MetricOrgLocationUoM;
		
		private EntitySet<MetricRelation> _MetricRelation;
		
		private EntitySet<MetricValue> _MetricValue;
		
		private EntitySet<MetricValueChangeLog> _MetricValueChangeLog;
		
		private EntitySet<PerformanceIndicator> _PerformanceIndicator;
		
		private EntitySet<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
		private EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> _PerformanceIndicatorFormPerformanceIndicatorJunc;
		
		private EntitySet<PerformanceIndicatorMetricJunc> _PerformanceIndicatorMetricJunc;
		
		private EntitySet<ScoreCard> _ScoreCard;
		
		private EntitySet<ScoreCardDashboard> _ScoreCardDashboard;
		
		private EntitySet<ScoreCardHidden> _ScoreCardHidden;
		
		private EntitySet<ScoreCardMetric> _ScoreCardMetric;
		
		private EntitySet<ScoreCardValue> _ScoreCardValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEnableSignUpUserChanging(bool value);
    partial void OnEnableSignUpUserChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_Instance()
		{
			this._D_EntityNode = new EntitySet<D_EntityNode>(new Action<D_EntityNode>(this.attach_D_EntityNode), new Action<D_EntityNode>(this.detach_D_EntityNode));
			this._D_MetricCategory = new EntitySet<D_MetricCategory>(new Action<D_MetricCategory>(this.attach_D_MetricCategory), new Action<D_MetricCategory>(this.detach_D_MetricCategory));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._D_MetricRelation = new EntitySet<D_MetricRelation>(new Action<D_MetricRelation>(this.attach_D_MetricRelation), new Action<D_MetricRelation>(this.detach_D_MetricRelation));
			this._DataCollectorRuleOut = new EntitySet<DataCollectorRuleOut>(new Action<DataCollectorRuleOut>(this.attach_DataCollectorRuleOut), new Action<DataCollectorRuleOut>(this.detach_DataCollectorRuleOut));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._DataViewList = new EntitySet<DataViewList>(new Action<DataViewList>(this.attach_DataViewList), new Action<DataViewList>(this.detach_DataViewList));
			this._DataViewColumn = new EntitySet<DataViewColumn>(new Action<DataViewColumn>(this.attach_DataViewColumn), new Action<DataViewColumn>(this.detach_DataViewColumn));
			this._DataViewWhere = new EntitySet<DataViewWhere>(new Action<DataViewWhere>(this.attach_DataViewWhere), new Action<DataViewWhere>(this.detach_DataViewWhere));
			this._Mc_EntityNode = new EntitySet<Mc_EntityNode>(new Action<Mc_EntityNode>(this.attach_Mc_EntityNode), new Action<Mc_EntityNode>(this.detach_Mc_EntityNode));
			this._Mc_EntityNodeType = new EntitySet<Mc_EntityNodeType>(new Action<Mc_EntityNodeType>(this.attach_Mc_EntityNodeType), new Action<Mc_EntityNodeType>(this.detach_Mc_EntityNodeType));
			this._Metric = new EntitySet<Metric>(new Action<Metric>(this.attach_Metric), new Action<Metric>(this.detach_Metric));
			this._MetricCategory = new EntitySet<MetricCategory>(new Action<MetricCategory>(this.attach_MetricCategory), new Action<MetricCategory>(this.detach_MetricCategory));
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._MetricFormula = new EntitySet<MetricFormula>(new Action<MetricFormula>(this.attach_MetricFormula), new Action<MetricFormula>(this.detach_MetricFormula));
			this._MetricOrgLocationName = new EntitySet<MetricOrgLocationName>(new Action<MetricOrgLocationName>(this.attach_MetricOrgLocationName), new Action<MetricOrgLocationName>(this.detach_MetricOrgLocationName));
			this._MetricOrgLocationUoM = new EntitySet<MetricOrgLocationUoM>(new Action<MetricOrgLocationUoM>(this.attach_MetricOrgLocationUoM), new Action<MetricOrgLocationUoM>(this.detach_MetricOrgLocationUoM));
			this._MetricRelation = new EntitySet<MetricRelation>(new Action<MetricRelation>(this.attach_MetricRelation), new Action<MetricRelation>(this.detach_MetricRelation));
			this._MetricValue = new EntitySet<MetricValue>(new Action<MetricValue>(this.attach_MetricValue), new Action<MetricValue>(this.detach_MetricValue));
			this._MetricValueChangeLog = new EntitySet<MetricValueChangeLog>(new Action<MetricValueChangeLog>(this.attach_MetricValueChangeLog), new Action<MetricValueChangeLog>(this.detach_MetricValueChangeLog));
			this._PerformanceIndicator = new EntitySet<PerformanceIndicator>(new Action<PerformanceIndicator>(this.attach_PerformanceIndicator), new Action<PerformanceIndicator>(this.detach_PerformanceIndicator));
			this._PerformanceIndicatorForm = new EntitySet<PerformanceIndicatorForm>(new Action<PerformanceIndicatorForm>(this.attach_PerformanceIndicatorForm), new Action<PerformanceIndicatorForm>(this.detach_PerformanceIndicatorForm));
			this._PerformanceIndicatorFormPerformanceIndicatorJunc = new EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc>(new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.attach_PerformanceIndicatorFormPerformanceIndicatorJunc), new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.detach_PerformanceIndicatorFormPerformanceIndicatorJunc));
			this._PerformanceIndicatorMetricJunc = new EntitySet<PerformanceIndicatorMetricJunc>(new Action<PerformanceIndicatorMetricJunc>(this.attach_PerformanceIndicatorMetricJunc), new Action<PerformanceIndicatorMetricJunc>(this.detach_PerformanceIndicatorMetricJunc));
			this._ScoreCard = new EntitySet<ScoreCard>(new Action<ScoreCard>(this.attach_ScoreCard), new Action<ScoreCard>(this.detach_ScoreCard));
			this._ScoreCardDashboard = new EntitySet<ScoreCardDashboard>(new Action<ScoreCardDashboard>(this.attach_ScoreCardDashboard), new Action<ScoreCardDashboard>(this.detach_ScoreCardDashboard));
			this._ScoreCardHidden = new EntitySet<ScoreCardHidden>(new Action<ScoreCardHidden>(this.attach_ScoreCardHidden), new Action<ScoreCardHidden>(this.detach_ScoreCardHidden));
			this._ScoreCardMetric = new EntitySet<ScoreCardMetric>(new Action<ScoreCardMetric>(this.attach_ScoreCardMetric), new Action<ScoreCardMetric>(this.detach_ScoreCardMetric));
			this._ScoreCardValue = new EntitySet<ScoreCardValue>(new Action<ScoreCardValue>(this.attach_ScoreCardValue), new Action<ScoreCardValue>(this.detach_ScoreCardValue));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="EnableSignUpUser", Storage="_EnableSignUpUser", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool EnableSignUpUser
		{
			get
			{
				return this._EnableSignUpUser;
			}
			set
			{
				if ((this._EnableSignUpUser != value))
				{
					this.OnEnableSignUpUserChanging(value);
					this.SendPropertyChanging();
					this._EnableSignUpUser = value;
					this.SendPropertyChanged("EnableSignUpUser");
					this.OnEnableSignUpUserChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<D_EntityNode> D_EntityNode
		{
			get
			{
				return this._D_EntityNode;
			}
			set
			{
				this._D_EntityNode.Assign(value);
			}
		}
		
		public EntitySet<D_MetricCategory> D_MetricCategory
		{
			get
			{
				return this._D_MetricCategory;
			}
			set
			{
				this._D_MetricCategory.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricRelation> D_MetricRelation
		{
			get
			{
				return this._D_MetricRelation;
			}
			set
			{
				this._D_MetricRelation.Assign(value);
			}
		}
		
		public EntitySet<DataCollectorRuleOut> DataCollectorRuleOut
		{
			get
			{
				return this._DataCollectorRuleOut;
			}
			set
			{
				this._DataCollectorRuleOut.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public EntitySet<DataViewList> DataViewList
		{
			get
			{
				return this._DataViewList;
			}
			set
			{
				this._DataViewList.Assign(value);
			}
		}
		
		public EntitySet<DataViewColumn> DataViewColumn
		{
			get
			{
				return this._DataViewColumn;
			}
			set
			{
				this._DataViewColumn.Assign(value);
			}
		}
		
		public EntitySet<DataViewWhere> DataViewWhere
		{
			get
			{
				return this._DataViewWhere;
			}
			set
			{
				this._DataViewWhere.Assign(value);
			}
		}
				
		public EntitySet<Mc_EntityNode> Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode;
			}
			set
			{
				this._Mc_EntityNode.Assign(value);
			}
		}
		
		public EntitySet<Mc_EntityNodeType> Mc_EntityNodeType
		{
			get
			{
				return this._Mc_EntityNodeType;
			}
			set
			{
				this._Mc_EntityNodeType.Assign(value);
			}
		}
								
		public EntitySet<Metric> Metric
		{
			get
			{
				return this._Metric;
			}
			set
			{
				this._Metric.Assign(value);
			}
		}
		
		public EntitySet<MetricCategory> MetricCategory
		{
			get
			{
				return this._MetricCategory;
			}
			set
			{
				this._MetricCategory.Assign(value);
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<MetricFormula> MetricFormula
		{
			get
			{
				return this._MetricFormula;
			}
			set
			{
				this._MetricFormula.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationName> MetricOrgLocationName
		{
			get
			{
				return this._MetricOrgLocationName;
			}
			set
			{
				this._MetricOrgLocationName.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationUoM> MetricOrgLocationUoM
		{
			get
			{
				return this._MetricOrgLocationUoM;
			}
			set
			{
				this._MetricOrgLocationUoM.Assign(value);
			}
		}
		
		public EntitySet<MetricRelation> MetricRelation
		{
			get
			{
				return this._MetricRelation;
			}
			set
			{
				this._MetricRelation.Assign(value);
			}
		}
		
		public EntitySet<MetricValue> MetricValue
		{
			get
			{
				return this._MetricValue;
			}
			set
			{
				this._MetricValue.Assign(value);
			}
		}
		
		public EntitySet<MetricValueChangeLog> MetricValueChangeLog
		{
			get
			{
				return this._MetricValueChangeLog;
			}
			set
			{
				this._MetricValueChangeLog.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicator> PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator;
			}
			set
			{
				this._PerformanceIndicator.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicatorForm> PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm;
			}
			set
			{
				this._PerformanceIndicatorForm.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> PerformanceIndicatorFormPerformanceIndicatorJunc
		{
			get
			{
				return this._PerformanceIndicatorFormPerformanceIndicatorJunc;
			}
			set
			{
				this._PerformanceIndicatorFormPerformanceIndicatorJunc.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicatorMetricJunc> PerformanceIndicatorMetricJunc
		{
			get
			{
				return this._PerformanceIndicatorMetricJunc;
			}
			set
			{
				this._PerformanceIndicatorMetricJunc.Assign(value);
			}
		}
		
		public EntitySet<ScoreCard> ScoreCard
		{
			get
			{
				return this._ScoreCard;
			}
			set
			{
				this._ScoreCard.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardDashboard> ScoreCardDashboard
		{
			get
			{
				return this._ScoreCardDashboard;
			}
			set
			{
				this._ScoreCardDashboard.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardHidden> ScoreCardHidden
		{
			get
			{
				return this._ScoreCardHidden;
			}
			set
			{
				this._ScoreCardHidden.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric;
			}
			set
			{
				this._ScoreCardMetric.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardValue> ScoreCardValue
		{
			get
			{
				return this._ScoreCardValue;
			}
			set
			{
				this._ScoreCardValue.Assign(value);
			}
		}
		
		
		private void attach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_D_MetricCategory(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_D_MetricCategory(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_D_MetricRelation(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_D_MetricRelation(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_DataCollectorRuleOut(DataCollectorRuleOut entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_DataCollectorRuleOut(DataCollectorRuleOut entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_DataViewList(DataViewList entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_DataViewList(DataViewList entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_DataViewColumn(DataViewColumn entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_DataViewWhere(DataViewWhere entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
						
		private void attach_Mc_EntityNode(Mc_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_Mc_EntityNode(Mc_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_Mc_EntityNodeType(Mc_EntityNodeType entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_Mc_EntityNodeType(Mc_EntityNodeType entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
														
		private void attach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricCategory(MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricCategory(MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_PerformanceIndicatorForm(PerformanceIndicatorForm entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_PerformanceIndicatorForm(PerformanceIndicatorForm entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_ScoreCard(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_ScoreCard(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
		
		private void attach_ScoreCardValue(ScoreCardValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = this;
		}
		
		private void detach_ScoreCardValue(ScoreCardValue entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Instance = null;
		}
	}
				
	[Table(Name="dbo.Mc_Organization")]
	public partial class Mc_Organization : LinqMicajahEntitybase
	{
		
		private System.Guid _OrganizationId;
		
		private string _Name;
		
		private string _Description;
		
		private string _WebsiteUrl;
		
		private System.Nullable<System.Guid> _DatabaseId;
		
		private bool _Deleted;
		
		private System.Nullable<int> _FiscalYearStartDay;
		
		private System.Nullable<int> _FiscalYearStartMonth;
		
		private System.Nullable<int> _WeekStartsDay;
		
		private EntitySet<D_EntityNode> _D_EntityNode;
		
		private EntityRef<Mc_Database> _Mc_Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteUrlChanging(string value);
    partial void OnWebsiteUrlChanged();
    partial void OnDatabaseIdChanging(System.Nullable<System.Guid> value);
    partial void OnDatabaseIdChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnFiscalYearStartDayChanging(System.Nullable<int> value);
    partial void OnFiscalYearStartDayChanged();
    partial void OnFiscalYearStartMonthChanging(System.Nullable<int> value);
    partial void OnFiscalYearStartMonthChanged();
    partial void OnWeekStartsDayChanging(System.Nullable<int> value);
    partial void OnWeekStartsDayChanged();
    #endregion
		
		public Mc_Organization()
		{
			this._D_EntityNode = new EntitySet<D_EntityNode>(new Action<D_EntityNode>(this.attach_D_EntityNode), new Action<D_EntityNode>(this.detach_D_EntityNode));
			this._Mc_Database = default(EntityRef<Mc_Database>);
			OnCreated();
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="WebsiteUrl", Storage="_WebsiteUrl", DbType="NVarChar(2048) NOT NULL", IsPrimaryKey=false)]
		public string WebsiteUrl
		{
			get
			{
				return this._WebsiteUrl;
			}
			set
			{
				if ((this._WebsiteUrl != value))
				{
					this.OnWebsiteUrlChanging(value);
					this.SendPropertyChanging();
					this._WebsiteUrl = value;
					this.SendPropertyChanged("WebsiteUrl");
					this.OnWebsiteUrlChanged();
				}
			}
		}
		
		[Column(Name="DatabaseId", Storage="_DatabaseId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> DatabaseId
		{
			get
			{
				return this._DatabaseId;
			}
			set
			{
				if ((this._DatabaseId != value))
				{
					if (this._Mc_Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseId = value;
					this.SendPropertyChanged("DatabaseId");
					this.OnDatabaseIdChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Name="FiscalYearStartDay", Storage="_FiscalYearStartDay", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> FiscalYearStartDay
		{
			get
			{
				return this._FiscalYearStartDay;
			}
			set
			{
				if ((this._FiscalYearStartDay != value))
				{
					this.OnFiscalYearStartDayChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearStartDay = value;
					this.SendPropertyChanged("FiscalYearStartDay");
					this.OnFiscalYearStartDayChanged();
				}
			}
		}
		
		[Column(Name="FiscalYearStartMonth", Storage="_FiscalYearStartMonth", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> FiscalYearStartMonth
		{
			get
			{
				return this._FiscalYearStartMonth;
			}
			set
			{
				if ((this._FiscalYearStartMonth != value))
				{
					this.OnFiscalYearStartMonthChanging(value);
					this.SendPropertyChanging();
					this._FiscalYearStartMonth = value;
					this.SendPropertyChanged("FiscalYearStartMonth");
					this.OnFiscalYearStartMonthChanged();
				}
			}
		}
		
		[Column(Name="WeekStartsDay", Storage="_WeekStartsDay", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> WeekStartsDay
		{
			get
			{
				return this._WeekStartsDay;
			}
			set
			{
				if ((this._WeekStartsDay != value))
				{
					this.OnWeekStartsDayChanging(value);
					this.SendPropertyChanging();
					this._WeekStartsDay = value;
					this.SendPropertyChanged("WeekStartsDay");
					this.OnWeekStartsDayChanged();
				}
			}
		}
		
		public EntitySet<D_EntityNode> D_EntityNode
		{
			get
			{
				return this._D_EntityNode;
			}
			set
			{
				this._D_EntityNode.Assign(value);
			}
		}
				
		public Mc_Database Mc_Database
		{
			get
			{
				return this._Mc_Database.Entity;
			}
			set
			{
				Mc_Database previousValue = this._Mc_Database.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Database.Entity = null;
						previousValue.Mc_Organization.Remove(this);
					}
					this._Mc_Database.Entity = value;
					if ((value != null))
					{
						value.Mc_Organization.Add(this);
						this._DatabaseId = value.DatabaseId;
					}
					else
					{
						this._DatabaseId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_Database");
				}
			}
		}
				
		
		private void attach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Organization = this;
		}
		
		private void detach_D_EntityNode(D_EntityNode entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Organization = null;
		}
									}
		
	[Table(Name="dbo.Mc_OrganizationsUsers")]
	public partial class Mc_OrganizationsUsers : LinqMicajahEntitybase
	{
		
		private System.Guid _OrganizationId;
		
		private System.Guid _UserId;
		
		private bool _OrganizationAdministrator;
		
		private EntityRef<Mc_User> _Mc_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnOrganizationAdministratorChanging(bool value);
    partial void OnOrganizationAdministratorChanged();
    #endregion
		
		public Mc_OrganizationsUsers()
		{
			this._Mc_User = default(EntityRef<Mc_User>);
			OnCreated();
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationAdministrator", Storage="_OrganizationAdministrator", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool OrganizationAdministrator
		{
			get
			{
				return this._OrganizationAdministrator;
			}
			set
			{
				if ((this._OrganizationAdministrator != value))
				{
					this.OnOrganizationAdministratorChanging(value);
					this.SendPropertyChanging();
					this._OrganizationAdministrator = value;
					this.SendPropertyChanged("OrganizationAdministrator");
					this.OnOrganizationAdministratorChanged();
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.Mc_OrganizationsUsers.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.Mc_OrganizationsUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
	}
												
	[Table(Name="dbo.Mc_UnitsOfMeasure")]
	public partial class Mc_UnitsOfMeasure : LinqMicajahEntitybase
	{
		
		private System.Guid _UnitsOfMeasureId;
		
		private System.Guid _OrganizationId;
		
		private string _SingularName;
		
		private string _SingularAbbrv;
		
		private string _PluralName;
		
		private string _PluralAbbrv;
		
		private string _GroupName;
		
		private string _LocalName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitsOfMeasureIdChanging(System.Guid value);
    partial void OnUnitsOfMeasureIdChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    partial void OnSingularNameChanging(string value);
    partial void OnSingularNameChanged();
    partial void OnSingularAbbrvChanging(string value);
    partial void OnSingularAbbrvChanged();
    partial void OnPluralNameChanging(string value);
    partial void OnPluralNameChanged();
    partial void OnPluralAbbrvChanging(string value);
    partial void OnPluralAbbrvChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnLocalNameChanging(string value);
    partial void OnLocalNameChanged();
    #endregion
		
		public Mc_UnitsOfMeasure()
		{
			OnCreated();
		}
		
		[Column(Name="UnitsOfMeasureId", Storage="_UnitsOfMeasureId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UnitsOfMeasureId
		{
			get
			{
				return this._UnitsOfMeasureId;
			}
			set
			{
				if ((this._UnitsOfMeasureId != value))
				{
					this.OnUnitsOfMeasureIdChanging(value);
					this.SendPropertyChanging();
					this._UnitsOfMeasureId = value;
					this.SendPropertyChanged("UnitsOfMeasureId");
					this.OnUnitsOfMeasureIdChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[Column(Name="SingularName", Storage="_SingularName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string SingularName
		{
			get
			{
				return this._SingularName;
			}
			set
			{
				if ((this._SingularName != value))
				{
					this.OnSingularNameChanging(value);
					this.SendPropertyChanging();
					this._SingularName = value;
					this.SendPropertyChanged("SingularName");
					this.OnSingularNameChanged();
				}
			}
		}
		
		[Column(Name="SingularAbbrv", Storage="_SingularAbbrv", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string SingularAbbrv
		{
			get
			{
				return this._SingularAbbrv;
			}
			set
			{
				if ((this._SingularAbbrv != value))
				{
					this.OnSingularAbbrvChanging(value);
					this.SendPropertyChanging();
					this._SingularAbbrv = value;
					this.SendPropertyChanged("SingularAbbrv");
					this.OnSingularAbbrvChanged();
				}
			}
		}
		
		[Column(Name="PluralName", Storage="_PluralName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string PluralName
		{
			get
			{
				return this._PluralName;
			}
			set
			{
				if ((this._PluralName != value))
				{
					this.OnPluralNameChanging(value);
					this.SendPropertyChanging();
					this._PluralName = value;
					this.SendPropertyChanged("PluralName");
					this.OnPluralNameChanged();
				}
			}
		}
		
		[Column(Name="PluralAbbrv", Storage="_PluralAbbrv", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string PluralAbbrv
		{
			get
			{
				return this._PluralAbbrv;
			}
			set
			{
				if ((this._PluralAbbrv != value))
				{
					this.OnPluralAbbrvChanging(value);
					this.SendPropertyChanging();
					this._PluralAbbrv = value;
					this.SendPropertyChanged("PluralAbbrv");
					this.OnPluralAbbrvChanged();
				}
			}
		}
		
		[Column(Name="GroupName", Storage="_GroupName", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Name="LocalName", Storage="_LocalName", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string LocalName
		{
			get
			{
				return this._LocalName;
			}
			set
			{
				if ((this._LocalName != value))
				{
					this.OnLocalNameChanging(value);
					this.SendPropertyChanging();
					this._LocalName = value;
					this.SendPropertyChanged("LocalName");
					this.OnLocalNameChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Mc_UnitsOfMeasureConversion")]
	public partial class Mc_UnitsOfMeasureConversion : LinqMicajahEntitybase
	{
		
		private System.Guid _UnitOfMeasureFrom;
		
		private System.Guid _UnitOfMeasureTo;
		
		private double _Factor;
		
		private System.Guid _OrganizationId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitOfMeasureFromChanging(System.Guid value);
    partial void OnUnitOfMeasureFromChanged();
    partial void OnUnitOfMeasureToChanging(System.Guid value);
    partial void OnUnitOfMeasureToChanged();
    partial void OnFactorChanging(double value);
    partial void OnFactorChanged();
    partial void OnOrganizationIdChanging(System.Guid value);
    partial void OnOrganizationIdChanged();
    #endregion
		
		public Mc_UnitsOfMeasureConversion()
		{
			OnCreated();
		}
		
		[Column(Name="UnitOfMeasureFrom", Storage="_UnitOfMeasureFrom", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UnitOfMeasureFrom
		{
			get
			{
				return this._UnitOfMeasureFrom;
			}
			set
			{
				if ((this._UnitOfMeasureFrom != value))
				{
					this.OnUnitOfMeasureFromChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureFrom = value;
					this.SendPropertyChanged("UnitOfMeasureFrom");
					this.OnUnitOfMeasureFromChanged();
				}
			}
		}
		
		[Column(Name="UnitOfMeasureTo", Storage="_UnitOfMeasureTo", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UnitOfMeasureTo
		{
			get
			{
				return this._UnitOfMeasureTo;
			}
			set
			{
				if ((this._UnitOfMeasureTo != value))
				{
					this.OnUnitOfMeasureToChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureTo = value;
					this.SendPropertyChanged("UnitOfMeasureTo");
					this.OnUnitOfMeasureToChanged();
				}
			}
		}
		
		[Column(Name="Factor", Storage="_Factor", DbType="Float NOT NULL", IsPrimaryKey=false)]
		public double Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[Column(Name="OrganizationId", Storage="_OrganizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Mc_User")]
	public partial class Mc_User : LinqMicajahEntitybase
	{
		
		private System.Guid _UserId;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _Phone;
		
		private string _MobilePhone;
		
		private string _Fax;
		
		private string _Title;
		
		private string _Department;
		
		private string _Street;
		
		private string _Street2;
		
		private string _City;
		
		private string _State;
		
		private string _PostalCode;
		
		private string _Country;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private bool _Deleted;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<D_MetricOrgLocationRule> _User;
		
		private EntitySet<DataCollectorRuleOut> _DataCollectorRuleOut;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntitySet<Mc_OrganizationsUsers> _Mc_OrganizationsUsers;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<MetricFilter> _MetricFilter_Mc_User1;
		
		private EntitySet<MetricFormula> _MetricFormula;
		
		private EntitySet<MetricValueChangeLog> _MetricValueChangeLog;
		
		private EntitySet<ScoreCard> _ScoreCard;
		
		private EntitySet<ScoreCardDashboard> _ScoreCardDashboard;
		
		private EntitySet<ScoreCardHidden> _ScoreCardHidden;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_User()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._User = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_User), new Action<D_MetricOrgLocationRule>(this.detach_User));
			this._DataCollectorRuleOut = new EntitySet<DataCollectorRuleOut>(new Action<DataCollectorRuleOut>(this.attach_DataCollectorRuleOut), new Action<DataCollectorRuleOut>(this.detach_DataCollectorRuleOut));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._Mc_OrganizationsUsers = new EntitySet<Mc_OrganizationsUsers>(new Action<Mc_OrganizationsUsers>(this.attach_Mc_OrganizationsUsers), new Action<Mc_OrganizationsUsers>(this.detach_Mc_OrganizationsUsers));
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._MetricFilter_Mc_User1 = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter_Mc_User1), new Action<MetricFilter>(this.detach_MetricFilter_Mc_User1));
			this._MetricFormula = new EntitySet<MetricFormula>(new Action<MetricFormula>(this.attach_MetricFormula), new Action<MetricFormula>(this.detach_MetricFormula));
			this._MetricValueChangeLog = new EntitySet<MetricValueChangeLog>(new Action<MetricValueChangeLog>(this.attach_MetricValueChangeLog), new Action<MetricValueChangeLog>(this.detach_MetricValueChangeLog));
			this._ScoreCard = new EntitySet<ScoreCard>(new Action<ScoreCard>(this.attach_ScoreCard), new Action<ScoreCard>(this.detach_ScoreCard));
			this._ScoreCardDashboard = new EntitySet<ScoreCardDashboard>(new Action<ScoreCardDashboard>(this.attach_ScoreCardDashboard), new Action<ScoreCardDashboard>(this.detach_ScoreCardDashboard));
			this._ScoreCardHidden = new EntitySet<ScoreCardHidden>(new Action<ScoreCardHidden>(this.attach_ScoreCardHidden), new Action<ScoreCardHidden>(this.detach_ScoreCardHidden));
			OnCreated();
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="Email", Storage="_Email", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="FirstName", Storage="_FirstName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Name="LastName", Storage="_LastName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Name="MiddleName", Storage="_MiddleName", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Name="Phone", Storage="_Phone", DbType="NVarChar(20) NOT NULL", IsPrimaryKey=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="MobilePhone", Storage="_MobilePhone", DbType="NVarChar(20) NOT NULL", IsPrimaryKey=false)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Name="Fax", Storage="_Fax", DbType="NVarChar(20) NOT NULL", IsPrimaryKey=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Name="Title", Storage="_Title", DbType="NVarChar(20) NOT NULL", IsPrimaryKey=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Name="Department", Storage="_Department", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[Column(Name="Street", Storage="_Street", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[Column(Name="Street2", Storage="_Street2", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[Column(Name="City", Storage="_City", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Name="State", Storage="_State", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Name="PostalCode", Storage="_PostalCode", DbType="NVarChar(20) NOT NULL", IsPrimaryKey=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Name="Country", Storage="_Country", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Name="LastLoginDate", Storage="_LastLoginDate", DbType="DateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public EntitySet<DataCollectorRuleOut> DataCollectorRuleOut
		{
			get
			{
				return this._DataCollectorRuleOut;
			}
			set
			{
				this._DataCollectorRuleOut.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
						
		public EntitySet<Mc_OrganizationsUsers> Mc_OrganizationsUsers
		{
			get
			{
				return this._Mc_OrganizationsUsers;
			}
			set
			{
				this._Mc_OrganizationsUsers.Assign(value);
			}
		}
				
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter_Mc_User1
		{
			get
			{
				return this._MetricFilter_Mc_User1;
			}
			set
			{
				this._MetricFilter_Mc_User1.Assign(value);
			}
		}
		
		public EntitySet<MetricFormula> MetricFormula
		{
			get
			{
				return this._MetricFormula;
			}
			set
			{
				this._MetricFormula.Assign(value);
			}
		}
		
		public EntitySet<MetricValueChangeLog> MetricValueChangeLog
		{
			get
			{
				return this._MetricValueChangeLog;
			}
			set
			{
				this._MetricValueChangeLog.Assign(value);
			}
		}
		
		public EntitySet<ScoreCard> ScoreCard
		{
			get
			{
				return this._ScoreCard;
			}
			set
			{
				this._ScoreCard.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardDashboard> ScoreCardDashboard
		{
			get
			{
				return this._ScoreCardDashboard;
			}
			set
			{
				this._ScoreCardDashboard.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardHidden> ScoreCardHidden
		{
			get
			{
				return this._ScoreCardHidden;
			}
			set
			{
				this._ScoreCardHidden.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_User(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.CollectorUser = this;
		}
		
		private void detach_User(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.CollectorUser = null;
		}
		
		private void attach_DataCollectorRuleOut(DataCollectorRuleOut entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_DataCollectorRuleOut(DataCollectorRuleOut entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
										
		private void attach_Mc_OrganizationsUsers(Mc_OrganizationsUsers entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_Mc_OrganizationsUsers(Mc_OrganizationsUsers entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
						
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_MetricFilter_Mc_User1(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.DataCollector = this;
		}
		
		private void detach_MetricFilter_Mc_User1(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.DataCollector = null;
		}
		
		private void attach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_ScoreCard(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_ScoreCard(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
		
		private void attach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = this;
		}
		
		private void detach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.Mc_User = null;
		}
	}
				
	[Table(Name="dbo.Mc_Website")]
	public partial class Mc_Website : LinqMicajahEntitybase
	{
		
		private System.Guid _WebsiteId;
		
		private string _Name;
		
		private string _Url;
		
		private string _Description;
		
		private string _AdminContactInfo;
		
		private bool _Deleted;
		
		private EntitySet<Mc_DatabaseServer> _Mc_DatabaseServer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWebsiteIdChanging(System.Guid value);
    partial void OnWebsiteIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAdminContactInfoChanging(string value);
    partial void OnAdminContactInfoChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Mc_Website()
		{
			this._Mc_DatabaseServer = new EntitySet<Mc_DatabaseServer>(new Action<Mc_DatabaseServer>(this.attach_Mc_DatabaseServer), new Action<Mc_DatabaseServer>(this.detach_Mc_DatabaseServer));
			OnCreated();
		}
		
		[Column(Name="WebsiteId", Storage="_WebsiteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WebsiteId
		{
			get
			{
				return this._WebsiteId;
			}
			set
			{
				if ((this._WebsiteId != value))
				{
					this.OnWebsiteIdChanging(value);
					this.SendPropertyChanging();
					this._WebsiteId = value;
					this.SendPropertyChanged("WebsiteId");
					this.OnWebsiteIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(255) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Url", Storage="_Url", DbType="NVarChar(2048) NOT NULL", IsPrimaryKey=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(1024) NOT NULL", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="AdminContactInfo", Storage="_AdminContactInfo", DbType="NVarChar(2048) NOT NULL", IsPrimaryKey=false)]
		public string AdminContactInfo
		{
			get
			{
				return this._AdminContactInfo;
			}
			set
			{
				if ((this._AdminContactInfo != value))
				{
					this.OnAdminContactInfoChanging(value);
					this.SendPropertyChanging();
					this._AdminContactInfo = value;
					this.SendPropertyChanged("AdminContactInfo");
					this.OnAdminContactInfoChanged();
				}
			}
		}
		
		[Column(Name="Deleted", Storage="_Deleted", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public EntitySet<Mc_DatabaseServer> Mc_DatabaseServer
		{
			get
			{
				return this._Mc_DatabaseServer;
			}
			set
			{
				this._Mc_DatabaseServer.Assign(value);
			}
		}
		
		
		private void attach_Mc_DatabaseServer(Mc_DatabaseServer entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Website = this;
		}
		
		private void detach_Mc_DatabaseServer(Mc_DatabaseServer entity)
		{
			this.SendPropertyChanging();
			entity.Mc_Website = null;
		}
	}
	
	[Table(Name="dbo.Metric")]
	public partial class Metric : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricID;
		
		private string _Name;
		
		private string _Notes;
		
		private int _FrequencyID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _MetricCategoryID;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private int _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<decimal> _NOMinValue;
		
		private System.Nullable<decimal> _NOMaxValue;
		
		private string _Definition;
		
		private string _Documentation;
		
		private string _MetricReferences;
		
		private string _Code;
		
		private int _MetricTypeID;
		
		private string _Alias;
		
		private int _Generation;
		
		private string _FormulaCode;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private string _Variable;
		
		private System.Nullable<bool> _GrowUpIsGood;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private bool _AllowCustomNames;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<D_MetricOrgLocationRule> _D_MetricOrgLocationRule;
		
		private EntitySet<D_MetricRelation> _D_MetricRelation;
		
		private EntitySet<D_MetricRelation> _D_MetricRelation_Metric_Input;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntityRef<Frequency> _Frequency;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<MetricCategory> _MetricCategory;
		
		private EntityRef<MetricDataType> _MetricDataType;
		
		private EntityRef<MetricType> _MetricType;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<MetricFormula> _MetricFormula;
		
		private EntitySet<MetricOrgLocationName> _MetricOrgLocationName;
		
		private EntitySet<MetricOrgLocationUoM> _MetricOrgLocationUoM;
		
		private EntitySet<MetricRelation> _MetricRelation;
		
		private EntitySet<MetricRelation> _MetricRelation_Metric1;
		
		private EntitySet<MetricValue> _MetricValue;
		
		private EntitySet<PerformanceIndicatorMetricJunc> _PerformanceIndicatorMetricJunc;
		
		private EntitySet<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFrequencyIDChanging(int value);
    partial void OnFrequencyIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnMetricCategoryIDChanging(System.Nullable<System.Guid> value);
    partial void OnMetricCategoryIDChanged();
    partial void OnUnitOfMeasureIDChanging(System.Nullable<System.Guid> value);
    partial void OnUnitOfMeasureIDChanged();
    partial void OnMetricDataTypeIDChanging(int value);
    partial void OnMetricDataTypeIDChanged();
    partial void OnNODecPlacesChanging(System.Nullable<int> value);
    partial void OnNODecPlacesChanged();
    partial void OnNOMinValueChanging(System.Nullable<decimal> value);
    partial void OnNOMinValueChanged();
    partial void OnNOMaxValueChanging(System.Nullable<decimal> value);
    partial void OnNOMaxValueChanged();
    partial void OnDefinitionChanging(string value);
    partial void OnDefinitionChanged();
    partial void OnDocumentationChanging(string value);
    partial void OnDocumentationChanged();
    partial void OnMetricReferencesChanging(string value);
    partial void OnMetricReferencesChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMetricTypeIDChanging(int value);
    partial void OnMetricTypeIDChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnGenerationChanging(int value);
    partial void OnGenerationChanged();
    partial void OnFormulaCodeChanging(string value);
    partial void OnFormulaCodeChanged();
    partial void OnInputUnitOfMeasureIDChanging(System.Nullable<System.Guid> value);
    partial void OnInputUnitOfMeasureIDChanged();
    partial void OnVariableChanging(string value);
    partial void OnVariableChanged();
    partial void OnGrowUpIsGoodChanging(System.Nullable<bool> value);
    partial void OnGrowUpIsGoodChanged();
    partial void OnCollectionStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCollectionStartDateChanged();
    partial void OnCollectionEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCollectionEndDateChanged();
    partial void OnAllowCustomNamesChanging(bool value);
    partial void OnAllowCustomNamesChanged();
    #endregion
		
		public Metric()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._D_MetricOrgLocationRule = new EntitySet<D_MetricOrgLocationRule>(new Action<D_MetricOrgLocationRule>(this.attach_D_MetricOrgLocationRule), new Action<D_MetricOrgLocationRule>(this.detach_D_MetricOrgLocationRule));
			this._D_MetricRelation = new EntitySet<D_MetricRelation>(new Action<D_MetricRelation>(this.attach_D_MetricRelation), new Action<D_MetricRelation>(this.detach_D_MetricRelation));
			this._D_MetricRelation_Metric_Input = new EntitySet<D_MetricRelation>(new Action<D_MetricRelation>(this.attach_D_MetricRelation_Metric_Input), new Action<D_MetricRelation>(this.detach_D_MetricRelation_Metric_Input));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._Frequency = default(EntityRef<Frequency>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._MetricCategory = default(EntityRef<MetricCategory>);
			this._MetricDataType = default(EntityRef<MetricDataType>);
			this._MetricType = default(EntityRef<MetricType>);
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._MetricFormula = new EntitySet<MetricFormula>(new Action<MetricFormula>(this.attach_MetricFormula), new Action<MetricFormula>(this.detach_MetricFormula));
			this._MetricOrgLocationName = new EntitySet<MetricOrgLocationName>(new Action<MetricOrgLocationName>(this.attach_MetricOrgLocationName), new Action<MetricOrgLocationName>(this.detach_MetricOrgLocationName));
			this._MetricOrgLocationUoM = new EntitySet<MetricOrgLocationUoM>(new Action<MetricOrgLocationUoM>(this.attach_MetricOrgLocationUoM), new Action<MetricOrgLocationUoM>(this.detach_MetricOrgLocationUoM));
			this._MetricRelation = new EntitySet<MetricRelation>(new Action<MetricRelation>(this.attach_MetricRelation), new Action<MetricRelation>(this.detach_MetricRelation));
			this._MetricRelation_Metric1 = new EntitySet<MetricRelation>(new Action<MetricRelation>(this.attach_MetricRelation_Metric1), new Action<MetricRelation>(this.detach_MetricRelation_Metric1));
			this._MetricValue = new EntitySet<MetricValue>(new Action<MetricValue>(this.attach_MetricValue), new Action<MetricValue>(this.detach_MetricValue));
			this._PerformanceIndicatorMetricJunc = new EntitySet<PerformanceIndicatorMetricJunc>(new Action<PerformanceIndicatorMetricJunc>(this.attach_PerformanceIndicatorMetricJunc), new Action<PerformanceIndicatorMetricJunc>(this.detach_PerformanceIndicatorMetricJunc));
			this._ScoreCardMetric = new EntitySet<ScoreCardMetric>(new Action<ScoreCardMetric>(this.attach_ScoreCardMetric), new Action<ScoreCardMetric>(this.detach_ScoreCardMetric));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Notes", Storage="_Notes", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Name="FrequencyID", Storage="_FrequencyID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					if (this._Frequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._FrequencyID = value;
					this.SendPropertyChanged("FrequencyID");
					this.OnFrequencyIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="MetricCategoryID", Storage="_MetricCategoryID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					if (this._MetricCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MetricCategoryID = value;
					this.SendPropertyChanged("MetricCategoryID");
					this.OnMetricCategoryIDChanged();
				}
			}
		}
		
		[Column(Name="UnitOfMeasureID", Storage="_UnitOfMeasureID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this.OnUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureID = value;
					this.SendPropertyChanged("UnitOfMeasureID");
					this.OnUnitOfMeasureIDChanged();
				}
			}
		}
		
		[Column(Name="MetricDataTypeID", Storage="_MetricDataTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					if (this._MetricDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricDataTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricDataTypeID = value;
					this.SendPropertyChanged("MetricDataTypeID");
					this.OnMetricDataTypeIDChanged();
				}
			}
		}
		
		[Column(Name="NODecPlaces", Storage="_NODecPlaces", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this.OnNODecPlacesChanging(value);
					this.SendPropertyChanging();
					this._NODecPlaces = value;
					this.SendPropertyChanged("NODecPlaces");
					this.OnNODecPlacesChanged();
				}
			}
		}
		
		[Column(Name="NOMinValue", Storage="_NOMinValue", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> NOMinValue
		{
			get
			{
				return this._NOMinValue;
			}
			set
			{
				if ((this._NOMinValue != value))
				{
					this.OnNOMinValueChanging(value);
					this.SendPropertyChanging();
					this._NOMinValue = value;
					this.SendPropertyChanged("NOMinValue");
					this.OnNOMinValueChanged();
				}
			}
		}
		
		[Column(Name="NOMaxValue", Storage="_NOMaxValue", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> NOMaxValue
		{
			get
			{
				return this._NOMaxValue;
			}
			set
			{
				if ((this._NOMaxValue != value))
				{
					this.OnNOMaxValueChanging(value);
					this.SendPropertyChanging();
					this._NOMaxValue = value;
					this.SendPropertyChanged("NOMaxValue");
					this.OnNOMaxValueChanged();
				}
			}
		}
		
		[Column(Name="Definition", Storage="_Definition", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this.OnDefinitionChanging(value);
					this.SendPropertyChanging();
					this._Definition = value;
					this.SendPropertyChanged("Definition");
					this.OnDefinitionChanged();
				}
			}
		}
		
		[Column(Name="Documentation", Storage="_Documentation", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Documentation
		{
			get
			{
				return this._Documentation;
			}
			set
			{
				if ((this._Documentation != value))
				{
					this.OnDocumentationChanging(value);
					this.SendPropertyChanging();
					this._Documentation = value;
					this.SendPropertyChanged("Documentation");
					this.OnDocumentationChanged();
				}
			}
		}
		
		[Column(Name="MetricReferences", Storage="_MetricReferences", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string MetricReferences
		{
			get
			{
				return this._MetricReferences;
			}
			set
			{
				if ((this._MetricReferences != value))
				{
					this.OnMetricReferencesChanging(value);
					this.SendPropertyChanging();
					this._MetricReferences = value;
					this.SendPropertyChanged("MetricReferences");
					this.OnMetricReferencesChanged();
				}
			}
		}
		
		[Column(Name="Code", Storage="_Code", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Name="MetricTypeID", Storage="_MetricTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					if (this._MetricType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricTypeID = value;
					this.SendPropertyChanged("MetricTypeID");
					this.OnMetricTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Alias", Storage="_Alias", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Name="Generation", Storage="_Generation", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this.OnGenerationChanging(value);
					this.SendPropertyChanging();
					this._Generation = value;
					this.SendPropertyChanged("Generation");
					this.OnGenerationChanged();
				}
			}
		}
		
		[Column(Name="FormulaCode", Storage="_FormulaCode", DbType="NVarChar(200)", IsPrimaryKey=false)]
		public string FormulaCode
		{
			get
			{
				return this._FormulaCode;
			}
			set
			{
				if ((this._FormulaCode != value))
				{
					this.OnFormulaCodeChanging(value);
					this.SendPropertyChanging();
					this._FormulaCode = value;
					this.SendPropertyChanged("FormulaCode");
					this.OnFormulaCodeChanged();
				}
			}
		}
		
		[Column(Name="InputUnitOfMeasureID", Storage="_InputUnitOfMeasureID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this.OnInputUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._InputUnitOfMeasureID = value;
					this.SendPropertyChanged("InputUnitOfMeasureID");
					this.OnInputUnitOfMeasureIDChanged();
				}
			}
		}
		
		[Column(Name="Variable", Storage="_Variable", DbType="NVarChar(200)", IsPrimaryKey=false)]
		public string Variable
		{
			get
			{
				return this._Variable;
			}
			set
			{
				if ((this._Variable != value))
				{
					this.OnVariableChanging(value);
					this.SendPropertyChanging();
					this._Variable = value;
					this.SendPropertyChanged("Variable");
					this.OnVariableChanged();
				}
			}
		}
		
		[Column(Name="GrowUpIsGood", Storage="_GrowUpIsGood", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> GrowUpIsGood
		{
			get
			{
				return this._GrowUpIsGood;
			}
			set
			{
				if ((this._GrowUpIsGood != value))
				{
					this.OnGrowUpIsGoodChanging(value);
					this.SendPropertyChanging();
					this._GrowUpIsGood = value;
					this.SendPropertyChanged("GrowUpIsGood");
					this.OnGrowUpIsGoodChanged();
				}
			}
		}
		
		[Column(Name="CollectionStartDate", Storage="_CollectionStartDate", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this.OnCollectionStartDateChanging(value);
					this.SendPropertyChanging();
					this._CollectionStartDate = value;
					this.SendPropertyChanged("CollectionStartDate");
					this.OnCollectionStartDateChanged();
				}
			}
		}
		
		[Column(Name="CollectionEndDate", Storage="_CollectionEndDate", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this.OnCollectionEndDateChanging(value);
					this.SendPropertyChanging();
					this._CollectionEndDate = value;
					this.SendPropertyChanged("CollectionEndDate");
					this.OnCollectionEndDateChanged();
				}
			}
		}
		
		[Column(Name="AllowCustomNames", Storage="_AllowCustomNames", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this.OnAllowCustomNamesChanging(value);
					this.SendPropertyChanging();
					this._AllowCustomNames = value;
					this.SendPropertyChanged("AllowCustomNames");
					this.OnAllowCustomNamesChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationRule> D_MetricOrgLocationRule
		{
			get
			{
				return this._D_MetricOrgLocationRule;
			}
			set
			{
				this._D_MetricOrgLocationRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricRelation> D_MetricRelation
		{
			get
			{
				return this._D_MetricRelation;
			}
			set
			{
				this._D_MetricRelation.Assign(value);
			}
		}
		
		public EntitySet<D_MetricRelation> D_MetricRelation_Metric_Input
		{
			get
			{
				return this._D_MetricRelation_Metric_Input;
			}
			set
			{
				this._D_MetricRelation_Metric_Input.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public Frequency Frequency
		{
			get
			{
				return this._Frequency.Entity;
			}
			set
			{
				Frequency previousValue = this._Frequency.Entity;
				if (((previousValue != value) 
							|| (this._Frequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Frequency.Entity = null;
						previousValue.Metric.Remove(this);
					}
					this._Frequency.Entity = value;
					if ((value != null))
					{
						value.Metric.Add(this);
						this._FrequencyID = value.FrequencyID;
					}
					else
					{
						this._FrequencyID = default(int);
					}
					this.SendPropertyChanged("Frequency");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.Metric.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.Metric.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public MetricCategory MetricCategory
		{
			get
			{
				return this._MetricCategory.Entity;
			}
			set
			{
				MetricCategory previousValue = this._MetricCategory.Entity;
				if (((previousValue != value) 
							|| (this._MetricCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricCategory.Entity = null;
						previousValue.Metric.Remove(this);
					}
					this._MetricCategory.Entity = value;
					if ((value != null))
					{
						value.Metric.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricCategoryID = value.MetricCategoryID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricCategoryID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MetricCategory");
				}
			}
		}
		
		public MetricDataType MetricDataType
		{
			get
			{
				return this._MetricDataType.Entity;
			}
			set
			{
				MetricDataType previousValue = this._MetricDataType.Entity;
				if (((previousValue != value) 
							|| (this._MetricDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricDataType.Entity = null;
						previousValue.Metric.Remove(this);
					}
					this._MetricDataType.Entity = value;
					if ((value != null))
					{
						value.Metric.Add(this);
						this._MetricDataTypeID = value.MetricDataTypeID;
					}
					else
					{
						this._MetricDataTypeID = default(int);
					}
					this.SendPropertyChanged("MetricDataType");
				}
			}
		}
		
		public MetricType MetricType
		{
			get
			{
				return this._MetricType.Entity;
			}
			set
			{
				MetricType previousValue = this._MetricType.Entity;
				if (((previousValue != value) 
							|| (this._MetricType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricType.Entity = null;
						previousValue.Metric.Remove(this);
					}
					this._MetricType.Entity = value;
					if ((value != null))
					{
						value.Metric.Add(this);
						this._MetricTypeID = value.MetricTypeID;
					}
					else
					{
						this._MetricTypeID = default(int);
					}
					this.SendPropertyChanged("MetricType");
				}
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<MetricFormula> MetricFormula
		{
			get
			{
				return this._MetricFormula;
			}
			set
			{
				this._MetricFormula.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationName> MetricOrgLocationName
		{
			get
			{
				return this._MetricOrgLocationName;
			}
			set
			{
				this._MetricOrgLocationName.Assign(value);
			}
		}
		
		public EntitySet<MetricOrgLocationUoM> MetricOrgLocationUoM
		{
			get
			{
				return this._MetricOrgLocationUoM;
			}
			set
			{
				this._MetricOrgLocationUoM.Assign(value);
			}
		}
		
		public EntitySet<MetricRelation> MetricRelation
		{
			get
			{
				return this._MetricRelation;
			}
			set
			{
				this._MetricRelation.Assign(value);
			}
		}
		
		public EntitySet<MetricRelation> MetricRelation_Metric1
		{
			get
			{
				return this._MetricRelation_Metric1;
			}
			set
			{
				this._MetricRelation_Metric1.Assign(value);
			}
		}
		
		public EntitySet<MetricValue> MetricValue
		{
			get
			{
				return this._MetricValue;
			}
			set
			{
				this._MetricValue.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicatorMetricJunc> PerformanceIndicatorMetricJunc
		{
			get
			{
				return this._PerformanceIndicatorMetricJunc;
			}
			set
			{
				this._PerformanceIndicatorMetricJunc.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric;
			}
			set
			{
				this._ScoreCardMetric.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_D_MetricOrgLocationRule(D_MetricOrgLocationRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_D_MetricRelation(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_D_MetricRelation(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_D_MetricRelation_Metric_Input(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricRelation_Metric_Input = this;
		}
		
		private void detach_D_MetricRelation_Metric_Input(D_MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricRelation_Metric_Input = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricFormula(MetricFormula entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricOrgLocationName(MetricOrgLocationName entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricOrgLocationUoM(MetricOrgLocationUoM entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_MetricRelation_Metric1(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetricRelation_Metric1 = this;
		}
		
		private void detach_MetricRelation_Metric1(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetricRelation_Metric1 = null;
		}
		
		private void attach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
		
		private void attach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Metric = this;
		}
		
		private void detach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.Metric = null;
		}
	}
	
	[Table(Name="dbo.MetricCategory")]
	public partial class MetricCategory : LinqMicajahEntitybase
	{
		
		private System.Guid _MetricCategoryID;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private string _Name;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Guid _InstanceId;
		
		private EntitySet<D_MetricCategory> _D_MetricCategory;
		
		private EntitySet<D_MetricCategory> _D_MetricCategory_MetricCategory1;
		
		private EntitySet<Metric> _Metric;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<MetricCategory> _MetricCategory_MetricCategory;
		
		private EntitySet<MetricCategory> _MetricCategory_MetricCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetricCategoryIDChanging(System.Guid value);
    partial void OnMetricCategoryIDChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    #endregion
		
		public MetricCategory()
		{
			this._D_MetricCategory = new EntitySet<D_MetricCategory>(new Action<D_MetricCategory>(this.attach_D_MetricCategory), new Action<D_MetricCategory>(this.detach_D_MetricCategory));
			this._D_MetricCategory_MetricCategory1 = new EntitySet<D_MetricCategory>(new Action<D_MetricCategory>(this.attach_D_MetricCategory_MetricCategory1), new Action<D_MetricCategory>(this.detach_D_MetricCategory_MetricCategory1));
			this._Metric = new EntitySet<Metric>(new Action<Metric>(this.attach_Metric), new Action<Metric>(this.detach_Metric));
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._MetricCategory_MetricCategory = default(EntityRef<MetricCategory>);
			this._MetricCategory_MetricCategory1 = new EntitySet<MetricCategory>(new Action<MetricCategory>(this.attach_MetricCategory_MetricCategory1), new Action<MetricCategory>(this.detach_MetricCategory_MetricCategory1));
			OnCreated();
		}
		
		[Column(Name="MetricCategoryID", Storage="_MetricCategoryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this.OnMetricCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MetricCategoryID = value;
					this.SendPropertyChanged("MetricCategoryID");
					this.OnMetricCategoryIDChanged();
				}
			}
		}
		
		[Column(Name="ParentId", Storage="_ParentId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._MetricCategory_MetricCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		public EntitySet<D_MetricCategory> D_MetricCategory
		{
			get
			{
				return this._D_MetricCategory;
			}
			set
			{
				this._D_MetricCategory.Assign(value);
			}
		}
		
		public EntitySet<D_MetricCategory> D_MetricCategory_MetricCategory1
		{
			get
			{
				return this._D_MetricCategory_MetricCategory1;
			}
			set
			{
				this._D_MetricCategory_MetricCategory1.Assign(value);
			}
		}
		
		public EntitySet<Metric> Metric
		{
			get
			{
				return this._Metric;
			}
			set
			{
				this._Metric.Assign(value);
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricCategory.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricCategory.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public MetricCategory MetricCategory_MetricCategory
		{
			get
			{
				return this._MetricCategory_MetricCategory.Entity;
			}
			set
			{
				MetricCategory previousValue = this._MetricCategory_MetricCategory.Entity;
				if (((previousValue != value) 
							|| (this._MetricCategory_MetricCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricCategory_MetricCategory.Entity = null;
						previousValue.MetricCategory_MetricCategory1.Remove(this);
					}
					this._MetricCategory_MetricCategory.Entity = value;
					if ((value != null))
					{
						value.MetricCategory_MetricCategory1.Add(this);
						this._InstanceId = value.InstanceId;
						this._ParentId = value.MetricCategoryID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MetricCategory_MetricCategory");
				}
			}
		}
		
		public EntitySet<MetricCategory> MetricCategory_MetricCategory1
		{
			get
			{
				return this._MetricCategory_MetricCategory1;
			}
			set
			{
				this._MetricCategory_MetricCategory1.Assign(value);
			}
		}
		
		
		private void attach_D_MetricCategory(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory = this;
		}
		
		private void detach_D_MetricCategory(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory = null;
		}
		
		private void attach_D_MetricCategory_MetricCategory1(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricCategory_MetricCategory1 = this;
		}
		
		private void detach_D_MetricCategory_MetricCategory1(D_MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.D_MetricCategory_MetricCategory1 = null;
		}
		
		private void attach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory = this;
		}
		
		private void detach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory = null;
		}
		
		private void attach_MetricCategory_MetricCategory1(MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory_MetricCategory = this;
		}
		
		private void detach_MetricCategory_MetricCategory1(MetricCategory entity)
		{
			this.SendPropertyChanging();
			entity.MetricCategory_MetricCategory = null;
		}
	}
	
	[Table(Name="dbo.MetricCategoryFullNameView")]
	public partial class MetricCategoryFullNameView : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricCategoryID;
		
		private System.Nullable<System.Guid> _Parent1;
		
		private System.Nullable<System.Guid> _Parent2;
		
		private string _FullName;
		
		public MetricCategoryFullNameView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="MetricCategoryID", Storage="_MetricCategoryID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this._MetricCategoryID = value;
				}
			}
		}
		
		[Column(Name="Parent1", Storage="_Parent1", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent1
		{
			get
			{
				return this._Parent1;
			}
			set
			{
				if ((this._Parent1 != value))
				{
					this._Parent1 = value;
				}
			}
		}
		
		[Column(Name="Parent2", Storage="_Parent2", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> Parent2
		{
			get
			{
				return this._Parent2;
			}
			set
			{
				if ((this._Parent2 != value))
				{
					this._Parent2 = value;
				}
			}
		}
		
		[Column(Name="FullName", Storage="_FullName", DbType="NVarChar(306) NOT NULL", IsPrimaryKey=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MetricDataType")]
	public partial class MetricDataType : LinqMicajahEntitybase
	{
		
		private int _MetricDataTypeID;
		
		private string _Name;
		
		private EntitySet<Metric> _Metric;
		
		private EntitySet<MetricValue> _MetricValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetricDataTypeIDChanging(int value);
    partial void OnMetricDataTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MetricDataType()
		{
			this._Metric = new EntitySet<Metric>(new Action<Metric>(this.attach_Metric), new Action<Metric>(this.detach_Metric));
			this._MetricValue = new EntitySet<MetricValue>(new Action<MetricValue>(this.attach_MetricValue), new Action<MetricValue>(this.detach_MetricValue));
			OnCreated();
		}
		
		[Column(Name="MetricDataTypeID", Storage="_MetricDataTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this.OnMetricDataTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricDataTypeID = value;
					this.SendPropertyChanged("MetricDataTypeID");
					this.OnMetricDataTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<Metric> Metric
		{
			get
			{
				return this._Metric;
			}
			set
			{
				this._Metric.Assign(value);
			}
		}
		
		public EntitySet<MetricValue> MetricValue
		{
			get
			{
				return this._MetricValue;
			}
			set
			{
				this._MetricValue.Assign(value);
			}
		}
		
		
		private void attach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricDataType = this;
		}
		
		private void detach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricDataType = null;
		}
		
		private void attach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.MetricDataType = this;
		}
		
		private void detach_MetricValue(MetricValue entity)
		{
			this.SendPropertyChanging();
			entity.MetricDataType = null;
		}
	}
	
	[Table(Name="dbo.MetricFilter")]
	public partial class MetricFilter : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceID;
		
		private System.Guid _MetricFilterID;
		
		private System.Guid _UserID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Nullable<System.Guid> _DataCollectorID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private string _OrgLocations;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<Mc_User> _DataCollector;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIDChanging(System.Guid value);
    partial void OnInstanceIDChanged();
    partial void OnMetricFilterIDChanging(System.Guid value);
    partial void OnMetricFilterIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMetricIDChanging(System.Nullable<System.Guid> value);
    partial void OnMetricIDChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Nullable<System.Guid> value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnDataCollectorIDChanging(System.Nullable<System.Guid> value);
    partial void OnDataCollectorIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnOrgLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrgLocationIDChanged();
    partial void OnOrgLocationsChanging(string value);
    partial void OnOrgLocationsChanged();
    #endregion
		
		public MetricFilter()
		{
			this._GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._DataCollector = default(EntityRef<Mc_User>);
			this._Metric = default(EntityRef<Metric>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._PerformanceIndicatorForm = default(EntityRef<PerformanceIndicatorForm>);
			OnCreated();
		}
		
		[Column(Name="InstanceID", Storage="_InstanceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Name="MetricFilterID", Storage="_MetricFilterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricFilterID
		{
			get
			{
				return this._MetricFilterID;
			}
			set
			{
				if ((this._MetricFilterID != value))
				{
					this.OnMetricFilterIDChanging(value);
					this.SendPropertyChanging();
					this._MetricFilterID = value;
					this.SendPropertyChanged("MetricFilterID");
					this.OnMetricFilterIDChanged();
				}
			}
		}
		
		[Column(Name="UserID", Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					if (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="DataCollectorID", Storage="_DataCollectorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> DataCollectorID
		{
			get
			{
				return this._DataCollectorID;
			}
			set
			{
				if ((this._DataCollectorID != value))
				{
					if (this._DataCollector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataCollectorIDChanging(value);
					this.SendPropertyChanging();
					this._DataCollectorID = value;
					this.SendPropertyChanged("DataCollectorID");
					this.OnDataCollectorIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="OrgLocations", Storage="_OrgLocations", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string OrgLocations
		{
			get
			{
				return this._OrgLocations;
			}
			set
			{
				if ((this._OrgLocations != value))
				{
					this.OnOrgLocationsChanging(value);
					this.SendPropertyChanging();
					this._OrgLocations = value;
					this.SendPropertyChanged("OrgLocations");
					this.OnOrgLocationsChanged();
				}
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._InstanceID = value.InstanceId;
						this._GroupCategoryAspectID = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceID = default(System.Guid);
						this._GroupCategoryAspectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._InstanceID = value.InstanceId;
					}
					else
					{
						this._InstanceID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public Mc_User DataCollector
		{
			get
			{
				return this._DataCollector.Entity;
			}
			set
			{
				Mc_User previousValue = this._DataCollector.Entity;
				if (((previousValue != value) 
							|| (this._DataCollector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataCollector.Entity = null;
						previousValue.MetricFilter_Mc_User1.Remove(this);
					}
					this._DataCollector.Entity = value;
					if ((value != null))
					{
						value.MetricFilter_Mc_User1.Add(this);
						this._DataCollectorID = value.UserId;
					}
					else
					{
						this._DataCollectorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataCollector");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._InstanceID = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceID = default(System.Guid);
						this._MetricID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._InstanceID = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceID = default(System.Guid);
						this._PerformanceIndicatorID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public PerformanceIndicatorForm PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm.Entity;
			}
			set
			{
				PerformanceIndicatorForm previousValue = this._PerformanceIndicatorForm.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicatorForm.Entity = null;
						previousValue.MetricFilter.Remove(this);
					}
					this._PerformanceIndicatorForm.Entity = value;
					if ((value != null))
					{
						value.MetricFilter.Add(this);
						this._InstanceID = value.InstanceId;
						this._PerformanceIndicatorFormID = value.PerformanceIndicatorFormID;
					}
					else
					{
						this._InstanceID = default(System.Guid);
						this._PerformanceIndicatorFormID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PerformanceIndicatorForm");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.MetricFormula")]
	public partial class MetricFormula : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricFormulaID;
		
		private System.Guid _MetricID;
		
		private string _Formula;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private string _Comment;
		
		private string _VariableFormula;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<Metric> _Metric;
		
		private EntitySet<MetricRelation> _MetricRelation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricFormulaIDChanging(System.Guid value);
    partial void OnMetricFormulaIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnVariableFormulaChanging(string value);
    partial void OnVariableFormulaChanged();
    #endregion
		
		public MetricFormula()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._Metric = default(EntityRef<Metric>);
			this._MetricRelation = new EntitySet<MetricRelation>(new Action<MetricRelation>(this.attach_MetricRelation), new Action<MetricRelation>(this.detach_MetricRelation));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricFormulaID", Storage="_MetricFormulaID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricFormulaID
		{
			get
			{
				return this._MetricFormulaID;
			}
			set
			{
				if ((this._MetricFormulaID != value))
				{
					this.OnMetricFormulaIDChanging(value);
					this.SendPropertyChanging();
					this._MetricFormulaID = value;
					this.SendPropertyChanged("MetricFormulaID");
					this.OnMetricFormulaIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="Formula", Storage="_Formula", DbType="NVarChar(MAX) NOT NULL", IsPrimaryKey=false)]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[Column(Name="BeginDate", Storage="_BeginDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Name="EndDate", Storage="_EndDate", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="UpdatedBy", Storage="_UpdatedBy", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[Column(Name="Comment", Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", IsPrimaryKey=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Name="VariableFormula", Storage="_VariableFormula", DbType="NVarChar(MAX) NOT NULL", IsPrimaryKey=false)]
		public string VariableFormula
		{
			get
			{
				return this._VariableFormula;
			}
			set
			{
				if ((this._VariableFormula != value))
				{
					this.OnVariableFormulaChanging(value);
					this.SendPropertyChanging();
					this._VariableFormula = value;
					this.SendPropertyChanged("VariableFormula");
					this.OnVariableFormulaChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricFormula.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricFormula.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.MetricFormula.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.MetricFormula.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricFormula.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricFormula.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public EntitySet<MetricRelation> MetricRelation
		{
			get
			{
				return this._MetricRelation;
			}
			set
			{
				this._MetricRelation.Assign(value);
			}
		}
		
		
		private void attach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetricFormula = this;
		}
		
		private void detach_MetricRelation(MetricRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetricFormula = null;
		}
	}
	
	[Table(Name="dbo.MetricOrgLocationName")]
	public partial class MetricOrgLocationName : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricOrgLocationNameID;
		
		private System.Guid _MetricID;
		
		private System.Guid _OrgLocationID;
		
		private string _Alias;
		
		private string _Code;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricOrgLocationNameIDChanging(System.Guid value);
    partial void OnMetricOrgLocationNameIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnOrgLocationIDChanging(System.Guid value);
    partial void OnOrgLocationIDChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public MetricOrgLocationName()
		{
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricOrgLocationNameID", Storage="_MetricOrgLocationNameID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricOrgLocationNameID
		{
			get
			{
				return this._MetricOrgLocationNameID;
			}
			set
			{
				if ((this._MetricOrgLocationNameID != value))
				{
					this.OnMetricOrgLocationNameIDChanging(value);
					this.SendPropertyChanging();
					this._MetricOrgLocationNameID = value;
					this.SendPropertyChanged("MetricOrgLocationNameID");
					this.OnMetricOrgLocationNameIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="Alias", Storage="_Alias", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Name="Code", Storage="_Code", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.MetricOrgLocationName.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationName.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricOrgLocationName.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationName.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricOrgLocationName.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationName.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.MetricOrgLocationUoM")]
	public partial class MetricOrgLocationUoM : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricOrgLocationUoMID;
		
		private System.Guid _MetricID;
		
		private System.Guid _OrgLocationID;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricOrgLocationUoMIDChanging(System.Guid value);
    partial void OnMetricOrgLocationUoMIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnOrgLocationIDChanging(System.Guid value);
    partial void OnOrgLocationIDChanged();
    partial void OnInputUnitOfMeasureIDChanging(System.Nullable<System.Guid> value);
    partial void OnInputUnitOfMeasureIDChanged();
    #endregion
		
		public MetricOrgLocationUoM()
		{
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricOrgLocationUoMID", Storage="_MetricOrgLocationUoMID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this.OnMetricOrgLocationUoMIDChanging(value);
					this.SendPropertyChanging();
					this._MetricOrgLocationUoMID = value;
					this.SendPropertyChanged("MetricOrgLocationUoMID");
					this.OnMetricOrgLocationUoMIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="InputUnitOfMeasureID", Storage="_InputUnitOfMeasureID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this.OnInputUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._InputUnitOfMeasureID = value;
					this.SendPropertyChanged("InputUnitOfMeasureID");
					this.OnInputUnitOfMeasureIDChanged();
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.MetricOrgLocationUoM.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationUoM.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricOrgLocationUoM.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationUoM.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricOrgLocationUoM.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricOrgLocationUoM.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.MetricPathView")]
	public partial class MetricPathView : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricID;
		
		private int _MetricTypeID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorFormID;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		public MetricPathView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		[Column(Name="MetricTypeID", Storage="_MetricTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					this._PerformanceIndicatorID = value;
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this._GroupCategoryAspectID = value;
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					this._PerformanceIndicatorFormID = value;
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MetricRelation")]
	public partial class MetricRelation : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricRelationID;
		
		private System.Guid _MetricID;
		
		private System.Guid _ReferenceMetricID;
		
		private System.Guid _MetricFormulaID;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<Metric> _MetricRelation_Metric1;
		
		private EntityRef<MetricFormula> _MetricFormula;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricRelationIDChanging(System.Guid value);
    partial void OnMetricRelationIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnReferenceMetricIDChanging(System.Guid value);
    partial void OnReferenceMetricIDChanged();
    partial void OnMetricFormulaIDChanging(System.Guid value);
    partial void OnMetricFormulaIDChanged();
    #endregion
		
		public MetricRelation()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			this._MetricRelation_Metric1 = default(EntityRef<Metric>);
			this._MetricFormula = default(EntityRef<MetricFormula>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricRelationID", Storage="_MetricRelationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricRelationID
		{
			get
			{
				return this._MetricRelationID;
			}
			set
			{
				if ((this._MetricRelationID != value))
				{
					this.OnMetricRelationIDChanging(value);
					this.SendPropertyChanging();
					this._MetricRelationID = value;
					this.SendPropertyChanged("MetricRelationID");
					this.OnMetricRelationIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="ReferenceMetricID", Storage="_ReferenceMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid ReferenceMetricID
		{
			get
			{
				return this._ReferenceMetricID;
			}
			set
			{
				if ((this._ReferenceMetricID != value))
				{
					if (this._MetricRelation_Metric1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceMetricIDChanging(value);
					this.SendPropertyChanging();
					this._ReferenceMetricID = value;
					this.SendPropertyChanged("ReferenceMetricID");
					this.OnReferenceMetricIDChanged();
				}
			}
		}
		
		[Column(Name="MetricFormulaID", Storage="_MetricFormulaID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricFormulaID
		{
			get
			{
				return this._MetricFormulaID;
			}
			set
			{
				if ((this._MetricFormulaID != value))
				{
					if (this._MetricFormula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricFormulaIDChanging(value);
					this.SendPropertyChanging();
					this._MetricFormulaID = value;
					this.SendPropertyChanged("MetricFormulaID");
					this.OnMetricFormulaIDChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricRelation.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricRelation.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricRelation.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricRelation.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public Metric MetricRelation_Metric1
		{
			get
			{
				return this._MetricRelation_Metric1.Entity;
			}
			set
			{
				Metric previousValue = this._MetricRelation_Metric1.Entity;
				if (((previousValue != value) 
							|| (this._MetricRelation_Metric1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricRelation_Metric1.Entity = null;
						previousValue.MetricRelation_Metric1.Remove(this);
					}
					this._MetricRelation_Metric1.Entity = value;
					if ((value != null))
					{
						value.MetricRelation_Metric1.Add(this);
						this._InstanceId = value.InstanceId;
						this._ReferenceMetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ReferenceMetricID = default(System.Guid);
					}
					this.SendPropertyChanged("MetricRelation_Metric1");
				}
			}
		}
		
		public MetricFormula MetricFormula
		{
			get
			{
				return this._MetricFormula.Entity;
			}
			set
			{
				MetricFormula previousValue = this._MetricFormula.Entity;
				if (((previousValue != value) 
							|| (this._MetricFormula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricFormula.Entity = null;
						previousValue.MetricRelation.Remove(this);
					}
					this._MetricFormula.Entity = value;
					if ((value != null))
					{
						value.MetricRelation.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricFormulaID = value.MetricFormulaID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricFormulaID = default(System.Guid);
					}
					this.SendPropertyChanged("MetricFormula");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.MetricType")]
	public partial class MetricType : LinqMicajahEntitybase
	{
		
		private int _MetricTypeID;
		
		private string _Name;
		
		private EntitySet<Metric> _Metric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetricTypeIDChanging(int value);
    partial void OnMetricTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MetricType()
		{
			this._Metric = new EntitySet<Metric>(new Action<Metric>(this.attach_Metric), new Action<Metric>(this.detach_Metric));
			OnCreated();
		}
		
		[Column(Name="MetricTypeID", Storage="_MetricTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this.OnMetricTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricTypeID = value;
					this.SendPropertyChanged("MetricTypeID");
					this.OnMetricTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<Metric> Metric
		{
			get
			{
				return this._Metric;
			}
			set
			{
				this._Metric.Assign(value);
			}
		}
		
		
		private void attach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricType = this;
		}
		
		private void detach_Metric(Metric entity)
		{
			this.SendPropertyChanging();
			entity.MetricType = null;
		}
	}
	
	[Table(Name="dbo.MetricValue")]
	public partial class MetricValue : LinqMicajahEntitybase
	{
		
		private System.Guid _MetricValueID;
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricID;
		
		private int _FrequencyID;
		
		private System.DateTime _Date;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private int _MetricDataTypeID;
		
		private string _Value;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private string _Notes;
		
		private bool _Verified;
		
		private System.Nullable<bool> _Approved;
		
		private bool _FilesAttached;
		
		private System.Nullable<System.Guid> _InputUserId;
		
		private bool _IsCalc;
		
		private bool _InProcess;
		
		private System.Nullable<System.Guid> _ApproveUserId;
		
		private System.Guid _OrgLocationID;
		
		private string _ConvertedValue;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private bool _ReviewUpdated;
		
		private bool _MissedCalc;
		
		private EntityRef<Frequency> _Frequency;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<MetricDataType> _MetricDataType;
		
		private EntitySet<MetricValueChangeLog> _MetricValueChangeLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetricValueIDChanging(System.Guid value);
    partial void OnMetricValueIDChanged();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnFrequencyIDChanging(int value);
    partial void OnFrequencyIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUnitOfMeasureIDChanging(System.Nullable<System.Guid> value);
    partial void OnUnitOfMeasureIDChanged();
    partial void OnMetricDataTypeIDChanging(int value);
    partial void OnMetricDataTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnVerifiedChanging(bool value);
    partial void OnVerifiedChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    partial void OnFilesAttachedChanging(bool value);
    partial void OnFilesAttachedChanged();
    partial void OnInputUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnInputUserIdChanged();
    partial void OnIsCalcChanging(bool value);
    partial void OnIsCalcChanged();
    partial void OnInProcessChanging(bool value);
    partial void OnInProcessChanged();
    partial void OnApproveUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnApproveUserIdChanged();
    partial void OnOrgLocationIDChanging(System.Guid value);
    partial void OnOrgLocationIDChanged();
    partial void OnConvertedValueChanging(string value);
    partial void OnConvertedValueChanged();
    partial void OnInputUnitOfMeasureIDChanging(System.Nullable<System.Guid> value);
    partial void OnInputUnitOfMeasureIDChanged();
    partial void OnReviewUpdatedChanging(bool value);
    partial void OnReviewUpdatedChanged();
    partial void OnMissedCalcChanging(bool value);
    partial void OnMissedCalcChanged();
    #endregion
		
		public MetricValue()
		{
			this._Frequency = default(EntityRef<Frequency>);
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			this._MetricDataType = default(EntityRef<MetricDataType>);
			this._MetricValueChangeLog = new EntitySet<MetricValueChangeLog>(new Action<MetricValueChangeLog>(this.attach_MetricValueChangeLog), new Action<MetricValueChangeLog>(this.detach_MetricValueChangeLog));
			OnCreated();
		}
		
		[Column(Name="MetricValueID", Storage="_MetricValueID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this.OnMetricValueIDChanging(value);
					this.SendPropertyChanging();
					this._MetricValueID = value;
					this.SendPropertyChanged("MetricValueID");
					this.OnMetricValueIDChanged();
				}
			}
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="FrequencyID", Storage="_FrequencyID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					if (this._Frequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._FrequencyID = value;
					this.SendPropertyChanged("FrequencyID");
					this.OnFrequencyIDChanged();
				}
			}
		}
		
		[Column(Name="Date", Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Name="UnitOfMeasureID", Storage="_UnitOfMeasureID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this.OnUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureID = value;
					this.SendPropertyChanged("UnitOfMeasureID");
					this.OnUnitOfMeasureIDChanged();
				}
			}
		}
		
		[Column(Name="MetricDataTypeID", Storage="_MetricDataTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					if (this._MetricDataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricDataTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricDataTypeID = value;
					this.SendPropertyChanged("MetricDataTypeID");
					this.OnMetricDataTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Value", Storage="_Value", DbType="NVarChar(MAX) NOT NULL", IsPrimaryKey=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="Notes", Storage="_Notes", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Name="Verified", Storage="_Verified", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this.OnVerifiedChanging(value);
					this.SendPropertyChanging();
					this._Verified = value;
					this.SendPropertyChanged("Verified");
					this.OnVerifiedChanged();
				}
			}
		}
		
		[Column(Name="Approved", Storage="_Approved", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[Column(Name="FilesAttached", Storage="_FilesAttached", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this.OnFilesAttachedChanging(value);
					this.SendPropertyChanging();
					this._FilesAttached = value;
					this.SendPropertyChanged("FilesAttached");
					this.OnFilesAttachedChanged();
				}
			}
		}
		
		[Column(Name="InputUserId", Storage="_InputUserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InputUserId
		{
			get
			{
				return this._InputUserId;
			}
			set
			{
				if ((this._InputUserId != value))
				{
					this.OnInputUserIdChanging(value);
					this.SendPropertyChanging();
					this._InputUserId = value;
					this.SendPropertyChanged("InputUserId");
					this.OnInputUserIdChanged();
				}
			}
		}
		
		[Column(Name="IsCalc", Storage="_IsCalc", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool IsCalc
		{
			get
			{
				return this._IsCalc;
			}
			set
			{
				if ((this._IsCalc != value))
				{
					this.OnIsCalcChanging(value);
					this.SendPropertyChanging();
					this._IsCalc = value;
					this.SendPropertyChanged("IsCalc");
					this.OnIsCalcChanged();
				}
			}
		}
		
		[Column(Name="InProcess", Storage="_InProcess", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool InProcess
		{
			get
			{
				return this._InProcess;
			}
			set
			{
				if ((this._InProcess != value))
				{
					this.OnInProcessChanging(value);
					this.SendPropertyChanging();
					this._InProcess = value;
					this.SendPropertyChanged("InProcess");
					this.OnInProcessChanged();
				}
			}
		}
		
		[Column(Name="ApproveUserId", Storage="_ApproveUserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> ApproveUserId
		{
			get
			{
				return this._ApproveUserId;
			}
			set
			{
				if ((this._ApproveUserId != value))
				{
					this.OnApproveUserIdChanging(value);
					this.SendPropertyChanging();
					this._ApproveUserId = value;
					this.SendPropertyChanged("ApproveUserId");
					this.OnApproveUserIdChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="ConvertedValue", Storage="_ConvertedValue", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string ConvertedValue
		{
			get
			{
				return this._ConvertedValue;
			}
			set
			{
				if ((this._ConvertedValue != value))
				{
					this.OnConvertedValueChanging(value);
					this.SendPropertyChanging();
					this._ConvertedValue = value;
					this.SendPropertyChanged("ConvertedValue");
					this.OnConvertedValueChanged();
				}
			}
		}
		
		[Column(Name="InputUnitOfMeasureID", Storage="_InputUnitOfMeasureID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this.OnInputUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._InputUnitOfMeasureID = value;
					this.SendPropertyChanged("InputUnitOfMeasureID");
					this.OnInputUnitOfMeasureIDChanged();
				}
			}
		}
		
		[Column(Name="ReviewUpdated", Storage="_ReviewUpdated", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this.OnReviewUpdatedChanging(value);
					this.SendPropertyChanging();
					this._ReviewUpdated = value;
					this.SendPropertyChanged("ReviewUpdated");
					this.OnReviewUpdatedChanged();
				}
			}
		}
		
		[Column(Name="MissedCalc", Storage="_MissedCalc", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool MissedCalc
		{
			get
			{
				return this._MissedCalc;
			}
			set
			{
				if ((this._MissedCalc != value))
				{
					this.OnMissedCalcChanging(value);
					this.SendPropertyChanging();
					this._MissedCalc = value;
					this.SendPropertyChanged("MissedCalc");
					this.OnMissedCalcChanged();
				}
			}
		}
		
		public Frequency Frequency
		{
			get
			{
				return this._Frequency.Entity;
			}
			set
			{
				Frequency previousValue = this._Frequency.Entity;
				if (((previousValue != value) 
							|| (this._Frequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Frequency.Entity = null;
						previousValue.MetricValue.Remove(this);
					}
					this._Frequency.Entity = value;
					if ((value != null))
					{
						value.MetricValue.Add(this);
						this._FrequencyID = value.FrequencyID;
					}
					else
					{
						this._FrequencyID = default(int);
					}
					this.SendPropertyChanged("Frequency");
				}
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.MetricValue.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.MetricValue.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricValue.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricValue.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.MetricValue.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.MetricValue.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public MetricDataType MetricDataType
		{
			get
			{
				return this._MetricDataType.Entity;
			}
			set
			{
				MetricDataType previousValue = this._MetricDataType.Entity;
				if (((previousValue != value) 
							|| (this._MetricDataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricDataType.Entity = null;
						previousValue.MetricValue.Remove(this);
					}
					this._MetricDataType.Entity = value;
					if ((value != null))
					{
						value.MetricValue.Add(this);
						this._MetricDataTypeID = value.MetricDataTypeID;
					}
					else
					{
						this._MetricDataTypeID = default(int);
					}
					this.SendPropertyChanged("MetricDataType");
				}
			}
		}
		
		public EntitySet<MetricValueChangeLog> MetricValueChangeLog
		{
			get
			{
				return this._MetricValueChangeLog;
			}
			set
			{
				this._MetricValueChangeLog.Assign(value);
			}
		}
		
		
		private void attach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.MetricValue = this;
		}
		
		private void detach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.MetricValue = null;
		}
	}
	
	[Table(Name="dbo.MetricValueChangeLog")]
	public partial class MetricValueChangeLog : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _MetricValueChangeLogID;
		
		private System.Guid _MetricValueID;
		
		private string _Event;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private System.DateTime _CreatedTime;
		
		private int _MetricValueChangeTypeID;
		
		private System.Guid _UserId;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<MetricValue> _MetricValue;
		
		private EntityRef<MetricValueChangeType> _MetricValueChangeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnMetricValueChangeLogIDChanging(System.Guid value);
    partial void OnMetricValueChangeLogIDChanged();
    partial void OnMetricValueIDChanging(System.Guid value);
    partial void OnMetricValueIDChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    partial void OnMetricValueChangeTypeIDChanging(int value);
    partial void OnMetricValueChangeTypeIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public MetricValueChangeLog()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._MetricValue = default(EntityRef<MetricValue>);
			this._MetricValueChangeType = default(EntityRef<MetricValueChangeType>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="MetricValueChangeLogID", Storage="_MetricValueChangeLogID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricValueChangeLogID
		{
			get
			{
				return this._MetricValueChangeLogID;
			}
			set
			{
				if ((this._MetricValueChangeLogID != value))
				{
					this.OnMetricValueChangeLogIDChanging(value);
					this.SendPropertyChanging();
					this._MetricValueChangeLogID = value;
					this.SendPropertyChanged("MetricValueChangeLogID");
					this.OnMetricValueChangeLogIDChanged();
				}
			}
		}
		
		[Column(Name="MetricValueID", Storage="_MetricValueID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					if (this._MetricValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricValueIDChanging(value);
					this.SendPropertyChanging();
					this._MetricValueID = value;
					this.SendPropertyChanged("MetricValueID");
					this.OnMetricValueIDChanged();
				}
			}
		}
		
		[Column(Name="Event", Storage="_Event", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[Column(Name="OldValue", Storage="_OldValue", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[Column(Name="NewValue", Storage="_NewValue", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[Column(Name="CreatedTime", Storage="_CreatedTime", DbType="DateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[Column(Name="MetricValueChangeTypeID", Storage="_MetricValueChangeTypeID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int MetricValueChangeTypeID
		{
			get
			{
				return this._MetricValueChangeTypeID;
			}
			set
			{
				if ((this._MetricValueChangeTypeID != value))
				{
					if (this._MetricValueChangeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricValueChangeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricValueChangeTypeID = value;
					this.SendPropertyChanged("MetricValueChangeTypeID");
					this.OnMetricValueChangeTypeIDChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.MetricValueChangeLog.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.MetricValueChangeLog.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.MetricValueChangeLog.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.MetricValueChangeLog.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public MetricValue MetricValue
		{
			get
			{
				return this._MetricValue.Entity;
			}
			set
			{
				MetricValue previousValue = this._MetricValue.Entity;
				if (((previousValue != value) 
							|| (this._MetricValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricValue.Entity = null;
						previousValue.MetricValueChangeLog.Remove(this);
					}
					this._MetricValue.Entity = value;
					if ((value != null))
					{
						value.MetricValueChangeLog.Add(this);
						this._MetricValueID = value.MetricValueID;
					}
					else
					{
						this._MetricValueID = default(System.Guid);
					}
					this.SendPropertyChanged("MetricValue");
				}
			}
		}
		
		public MetricValueChangeType MetricValueChangeType
		{
			get
			{
				return this._MetricValueChangeType.Entity;
			}
			set
			{
				MetricValueChangeType previousValue = this._MetricValueChangeType.Entity;
				if (((previousValue != value) 
							|| (this._MetricValueChangeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetricValueChangeType.Entity = null;
						previousValue.MetricValueChangeLog.Remove(this);
					}
					this._MetricValueChangeType.Entity = value;
					if ((value != null))
					{
						value.MetricValueChangeLog.Add(this);
						this._MetricValueChangeTypeID = value.MetricValueChangeTypeID;
					}
					else
					{
						this._MetricValueChangeTypeID = default(int);
					}
					this.SendPropertyChanged("MetricValueChangeType");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.MetricValueChangeType")]
	public partial class MetricValueChangeType : LinqMicajahEntitybase
	{
		
		private int _MetricValueChangeTypeID;
		
		private string _Name;
		
		private EntitySet<MetricValueChangeLog> _MetricValueChangeLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetricValueChangeTypeIDChanging(int value);
    partial void OnMetricValueChangeTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MetricValueChangeType()
		{
			this._MetricValueChangeLog = new EntitySet<MetricValueChangeLog>(new Action<MetricValueChangeLog>(this.attach_MetricValueChangeLog), new Action<MetricValueChangeLog>(this.detach_MetricValueChangeLog));
			OnCreated();
		}
		
		[Column(Name="MetricValueChangeTypeID", Storage="_MetricValueChangeTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MetricValueChangeTypeID
		{
			get
			{
				return this._MetricValueChangeTypeID;
			}
			set
			{
				if ((this._MetricValueChangeTypeID != value))
				{
					this.OnMetricValueChangeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MetricValueChangeTypeID = value;
					this.SendPropertyChanged("MetricValueChangeTypeID");
					this.OnMetricValueChangeTypeIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<MetricValueChangeLog> MetricValueChangeLog
		{
			get
			{
				return this._MetricValueChangeLog;
			}
			set
			{
				this._MetricValueChangeLog.Assign(value);
			}
		}
		
		
		private void attach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.MetricValueChangeType = this;
		}
		
		private void detach_MetricValueChangeLog(MetricValueChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.MetricValueChangeType = null;
		}
	}
	
	[Table(Name="dbo.PerformanceIndicator")]
	public partial class PerformanceIndicator : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _PerformanceIndicatorID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<int> _SectorID;
		
		private string _Help;
		
		private System.Nullable<int> _RequirementID;
		
		private string _Alias;
		
		private string _Code;
		
		private string _SortCode;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntitySet<PerformanceIndicatorMetricJunc> _PerformanceIndicatorMetricJunc;
		
		private EntityRef<GroupCategoryAspect> _GroupCategoryAspect;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Requirement> _Requirement;
		
		private EntityRef<Sector> _Sector;
		
		private EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> _PerformanceIndicatorFormPerformanceIndicatorJunc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Guid value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGroupCategoryAspectIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupCategoryAspectIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnSectorIDChanging(System.Nullable<int> value);
    partial void OnSectorIDChanged();
    partial void OnHelpChanging(string value);
    partial void OnHelpChanged();
    partial void OnRequirementIDChanging(System.Nullable<int> value);
    partial void OnRequirementIDChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSortCodeChanging(string value);
    partial void OnSortCodeChanged();
    #endregion
		
		public PerformanceIndicator()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._PerformanceIndicatorMetricJunc = new EntitySet<PerformanceIndicatorMetricJunc>(new Action<PerformanceIndicatorMetricJunc>(this.attach_PerformanceIndicatorMetricJunc), new Action<PerformanceIndicatorMetricJunc>(this.detach_PerformanceIndicatorMetricJunc));
			this._GroupCategoryAspect = default(EntityRef<GroupCategoryAspect>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Requirement = default(EntityRef<Requirement>);
			this._Sector = default(EntityRef<Sector>);
			this._PerformanceIndicatorFormPerformanceIndicatorJunc = new EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc>(new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.attach_PerformanceIndicatorFormPerformanceIndicatorJunc), new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.detach_PerformanceIndicatorFormPerformanceIndicatorJunc));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="GroupCategoryAspectID", Storage="_GroupCategoryAspectID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					if (this._GroupCategoryAspect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCategoryAspectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCategoryAspectID = value;
					this.SendPropertyChanged("GroupCategoryAspectID");
					this.OnGroupCategoryAspectIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="SectorID", Storage="_SectorID", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._Sector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[Column(Name="Help", Storage="_Help", DbType="Text", IsPrimaryKey=false)]
		public string Help
		{
			get
			{
				return this._Help;
			}
			set
			{
				if ((this._Help != value))
				{
					this.OnHelpChanging(value);
					this.SendPropertyChanging();
					this._Help = value;
					this.SendPropertyChanged("Help");
					this.OnHelpChanged();
				}
			}
		}
		
		[Column(Name="RequirementID", Storage="_RequirementID", DbType="Int", IsPrimaryKey=false)]
		public System.Nullable<int> RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementID = value;
					this.SendPropertyChanged("RequirementID");
					this.OnRequirementIDChanged();
				}
			}
		}
		
		[Column(Name="Alias", Storage="_Alias", DbType="NVarChar(50)", IsPrimaryKey=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Name="Code", Storage="_Code", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Name="SortCode", Storage="_SortCode", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string SortCode
		{
			get
			{
				return this._SortCode;
			}
			set
			{
				if ((this._SortCode != value))
				{
					this.OnSortCodeChanging(value);
					this.SendPropertyChanging();
					this._SortCode = value;
					this.SendPropertyChanged("SortCode");
					this.OnSortCodeChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public EntitySet<PerformanceIndicatorMetricJunc> PerformanceIndicatorMetricJunc
		{
			get
			{
				return this._PerformanceIndicatorMetricJunc;
			}
			set
			{
				this._PerformanceIndicatorMetricJunc.Assign(value);
			}
		}
		
		public GroupCategoryAspect GroupCategoryAspect
		{
			get
			{
				return this._GroupCategoryAspect.Entity;
			}
			set
			{
				GroupCategoryAspect previousValue = this._GroupCategoryAspect.Entity;
				if (((previousValue != value) 
							|| (this._GroupCategoryAspect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCategoryAspect.Entity = null;
						previousValue.PerformanceIndicator.Remove(this);
					}
					this._GroupCategoryAspect.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicator.Add(this);
						this._InstanceId = value.InstanceId;
						this._GroupCategoryAspectID = value.GroupCategoryAspectID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._GroupCategoryAspectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupCategoryAspect");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.PerformanceIndicator.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicator.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.PerformanceIndicator.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicator.Add(this);
						this._RequirementID = value.RequirementID;
					}
					else
					{
						this._RequirementID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public Sector Sector
		{
			get
			{
				return this._Sector.Entity;
			}
			set
			{
				Sector previousValue = this._Sector.Entity;
				if (((previousValue != value) 
							|| (this._Sector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sector.Entity = null;
						previousValue.PerformanceIndicator.Remove(this);
					}
					this._Sector.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicator.Add(this);
						this._SectorID = value.SectorID;
					}
					else
					{
						this._SectorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sector");
				}
			}
		}
		
		public EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> PerformanceIndicatorFormPerformanceIndicatorJunc
		{
			get
			{
				return this._PerformanceIndicatorFormPerformanceIndicatorJunc;
			}
			set
			{
				this._PerformanceIndicatorFormPerformanceIndicatorJunc.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
		
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
		
		private void attach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_PerformanceIndicatorMetricJunc(PerformanceIndicatorMetricJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
		
		private void attach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = this;
		}
		
		private void detach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicator = null;
		}
	}
	
	[Table(Name="dbo.PerformanceIndicatorForm")]
	public partial class PerformanceIndicatorForm : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _PerformanceIndicatorFormID;
		
		private string _Name;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<D_DataRule> _D_DataRule;
		
		private EntitySet<D_MetricOrgLocationPath> _D_MetricOrgLocationPath;
		
		private EntitySet<DataRule> _DataRule;
		
		private EntitySet<MetricFilter> _MetricFilter;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> _PerformanceIndicatorFormPerformanceIndicatorJunc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Guid value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public PerformanceIndicatorForm()
		{
			this._D_DataRule = new EntitySet<D_DataRule>(new Action<D_DataRule>(this.attach_D_DataRule), new Action<D_DataRule>(this.detach_D_DataRule));
			this._D_MetricOrgLocationPath = new EntitySet<D_MetricOrgLocationPath>(new Action<D_MetricOrgLocationPath>(this.attach_D_MetricOrgLocationPath), new Action<D_MetricOrgLocationPath>(this.detach_D_MetricOrgLocationPath));
			this._DataRule = new EntitySet<DataRule>(new Action<DataRule>(this.attach_DataRule), new Action<DataRule>(this.detach_DataRule));
			this._MetricFilter = new EntitySet<MetricFilter>(new Action<MetricFilter>(this.attach_MetricFilter), new Action<MetricFilter>(this.detach_MetricFilter));
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._PerformanceIndicatorFormPerformanceIndicatorJunc = new EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc>(new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.attach_PerformanceIndicatorFormPerformanceIndicatorJunc), new Action<PerformanceIndicatorFormPerformanceIndicatorJunc>(this.detach_PerformanceIndicatorFormPerformanceIndicatorJunc));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public EntitySet<D_DataRule> D_DataRule
		{
			get
			{
				return this._D_DataRule;
			}
			set
			{
				this._D_DataRule.Assign(value);
			}
		}
		
		public EntitySet<D_MetricOrgLocationPath> D_MetricOrgLocationPath
		{
			get
			{
				return this._D_MetricOrgLocationPath;
			}
			set
			{
				this._D_MetricOrgLocationPath.Assign(value);
			}
		}
		
		public EntitySet<DataRule> DataRule
		{
			get
			{
				return this._DataRule;
			}
			set
			{
				this._DataRule.Assign(value);
			}
		}
		
		public EntitySet<MetricFilter> MetricFilter
		{
			get
			{
				return this._MetricFilter;
			}
			set
			{
				this._MetricFilter.Assign(value);
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.PerformanceIndicatorForm.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorForm.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public EntitySet<PerformanceIndicatorFormPerformanceIndicatorJunc> PerformanceIndicatorFormPerformanceIndicatorJunc
		{
			get
			{
				return this._PerformanceIndicatorFormPerformanceIndicatorJunc;
			}
			set
			{
				this._PerformanceIndicatorFormPerformanceIndicatorJunc.Assign(value);
			}
		}
		
		
		private void attach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = this;
		}
		
		private void detach_D_DataRule(D_DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = null;
		}
		
		private void attach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = this;
		}
		
		private void detach_D_MetricOrgLocationPath(D_MetricOrgLocationPath entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = null;
		}
		
		private void attach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = this;
		}
		
		private void detach_DataRule(DataRule entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = null;
		}
		
		private void attach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = this;
		}
		
		private void detach_MetricFilter(MetricFilter entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = null;
		}
		
		private void attach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = this;
		}
		
		private void detach_PerformanceIndicatorFormPerformanceIndicatorJunc(PerformanceIndicatorFormPerformanceIndicatorJunc entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceIndicatorForm = null;
		}
	}
	
	[Table(Name="dbo.PerformanceIndicatorFormPerformanceIndicatorJunc")]
	public partial class PerformanceIndicatorFormPerformanceIndicatorJunc : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _PerformanceIndicatorFormID;
		
		private System.Guid _PerformanceIndicatorID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<PerformanceIndicatorForm> _PerformanceIndicatorForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnPerformanceIndicatorFormIDChanging(System.Guid value);
    partial void OnPerformanceIndicatorFormIDChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Guid value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public PerformanceIndicatorFormPerformanceIndicatorJunc()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._PerformanceIndicatorForm = default(EntityRef<PerformanceIndicatorForm>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					if (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorFormIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorFormID = value;
					this.SendPropertyChanged("PerformanceIndicatorFormID");
					this.OnPerformanceIndicatorFormIDChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.PerformanceIndicatorFormPerformanceIndicatorJunc.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorFormPerformanceIndicatorJunc.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.PerformanceIndicatorFormPerformanceIndicatorJunc.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorFormPerformanceIndicatorJunc.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorID = default(System.Guid);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public PerformanceIndicatorForm PerformanceIndicatorForm
		{
			get
			{
				return this._PerformanceIndicatorForm.Entity;
			}
			set
			{
				PerformanceIndicatorForm previousValue = this._PerformanceIndicatorForm.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicatorForm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicatorForm.Entity = null;
						previousValue.PerformanceIndicatorFormPerformanceIndicatorJunc.Remove(this);
					}
					this._PerformanceIndicatorForm.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorFormPerformanceIndicatorJunc.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorFormID = value.PerformanceIndicatorFormID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorFormID = default(System.Guid);
					}
					this.SendPropertyChanged("PerformanceIndicatorForm");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.PerformanceIndicatorMetricJunc")]
	public partial class PerformanceIndicatorMetricJunc : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _PerformanceIndicatorID;
		
		private System.Guid _MetricID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<PerformanceIndicator> _PerformanceIndicator;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnPerformanceIndicatorIDChanging(System.Guid value);
    partial void OnPerformanceIndicatorIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public PerformanceIndicatorMetricJunc()
		{
			this._Metric = default(EntityRef<Metric>);
			this._PerformanceIndicator = default(EntityRef<PerformanceIndicator>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorID", Storage="_PerformanceIndicatorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					if (this._PerformanceIndicator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformanceIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PerformanceIndicatorID = value;
					this.SendPropertyChanged("PerformanceIndicatorID");
					this.OnPerformanceIndicatorIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.PerformanceIndicatorMetricJunc.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorMetricJunc.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public PerformanceIndicator PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator.Entity;
			}
			set
			{
				PerformanceIndicator previousValue = this._PerformanceIndicator.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceIndicator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceIndicator.Entity = null;
						previousValue.PerformanceIndicatorMetricJunc.Remove(this);
					}
					this._PerformanceIndicator.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorMetricJunc.Add(this);
						this._InstanceId = value.InstanceId;
						this._PerformanceIndicatorID = value.PerformanceIndicatorID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._PerformanceIndicatorID = default(System.Guid);
					}
					this.SendPropertyChanged("PerformanceIndicator");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.PerformanceIndicatorMetricJunc.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.PerformanceIndicatorMetricJunc.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.PIFormOrgLocationJuncView")]
	public partial class PIFormOrgLocationJuncView : LinqMicajahEntitybase
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Guid _PerformanceIndicatorFormID;
		
		private System.Guid _OrgLocationID;
		
		public PIFormOrgLocationJuncView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="PerformanceIndicatorFormID", Storage="_PerformanceIndicatorFormID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid PerformanceIndicatorFormID
		{
			get
			{
				return this._PerformanceIndicatorFormID;
			}
			set
			{
				if ((this._PerformanceIndicatorFormID != value))
				{
					this._PerformanceIndicatorFormID = value;
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Requirement")]
	public partial class Requirement : LinqMicajahEntitybase
	{
		
		private int _RequirementID;
		
		private string _Name;
		
		private EntitySet<PerformanceIndicator> _PerformanceIndicator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequirementIDChanging(int value);
    partial void OnRequirementIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Requirement()
		{
			this._PerformanceIndicator = new EntitySet<PerformanceIndicator>(new Action<PerformanceIndicator>(this.attach_PerformanceIndicator), new Action<PerformanceIndicator>(this.detach_PerformanceIndicator));
			OnCreated();
		}
		
		[Column(Name="RequirementID", Storage="_RequirementID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					this.OnRequirementIDChanging(value);
					this.SendPropertyChanging();
					this._RequirementID = value;
					this.SendPropertyChanged("RequirementID");
					this.OnRequirementIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<PerformanceIndicator> PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator;
			}
			set
			{
				this._PerformanceIndicator.Assign(value);
			}
		}
		
		
		private void attach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
	}
	
	[Table(Name="dbo.ScoreCard")]
	public partial class ScoreCard : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _ScoreCardID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private bool _IsPublic;
		
		private System.Nullable<System.Guid> _UserId;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntitySet<ScoreCardHidden> _ScoreCardHidden;
		
		private EntitySet<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnScoreCardIDChanging(System.Guid value);
    partial void OnScoreCardIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
		
		public ScoreCard()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._ScoreCardHidden = new EntitySet<ScoreCardHidden>(new Action<ScoreCardHidden>(this.attach_ScoreCardHidden), new Action<ScoreCardHidden>(this.detach_ScoreCardHidden));
			this._ScoreCardMetric = new EntitySet<ScoreCardMetric>(new Action<ScoreCardMetric>(this.attach_ScoreCardMetric), new Action<ScoreCardMetric>(this.detach_ScoreCardMetric));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardID", Storage="_ScoreCardID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ScoreCardID
		{
			get
			{
				return this._ScoreCardID;
			}
			set
			{
				if ((this._ScoreCardID != value))
				{
					this.OnScoreCardIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardID = value;
					this.SendPropertyChanged("ScoreCardID");
					this.OnScoreCardIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Description", Storage="_Description", DbType="NVarChar(MAX)", IsPrimaryKey=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="IsPublic", Storage="_IsPublic", DbType="Bit NOT NULL", IsPrimaryKey=false)]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.ScoreCard.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.ScoreCard.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.ScoreCard.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.ScoreCard.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public EntitySet<ScoreCardHidden> ScoreCardHidden
		{
			get
			{
				return this._ScoreCardHidden;
			}
			set
			{
				this._ScoreCardHidden.Assign(value);
			}
		}
		
		public EntitySet<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric;
			}
			set
			{
				this._ScoreCardMetric.Assign(value);
			}
		}
		
		
		private void attach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = this;
		}
		
		private void detach_ScoreCardHidden(ScoreCardHidden entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = null;
		}
		
		private void attach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = this;
		}
		
		private void detach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = null;
		}
	}
	
	[Table(Name="dbo.ScoreCardDashboard")]
	public partial class ScoreCardDashboard : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _ScoreCardDashboardID;
		
		private System.Guid _UserId;
		
		private System.Guid _ScoreCardMetricID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnScoreCardDashboardIDChanging(System.Guid value);
    partial void OnScoreCardDashboardIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnScoreCardMetricIDChanging(System.Guid value);
    partial void OnScoreCardMetricIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public ScoreCardDashboard()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._ScoreCardMetric = default(EntityRef<ScoreCardMetric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardDashboardID", Storage="_ScoreCardDashboardID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ScoreCardDashboardID
		{
			get
			{
				return this._ScoreCardDashboardID;
			}
			set
			{
				if ((this._ScoreCardDashboardID != value))
				{
					this.OnScoreCardDashboardIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardDashboardID = value;
					this.SendPropertyChanged("ScoreCardDashboardID");
					this.OnScoreCardDashboardIDChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardMetricID", Storage="_ScoreCardMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid ScoreCardMetricID
		{
			get
			{
				return this._ScoreCardMetricID;
			}
			set
			{
				if ((this._ScoreCardMetricID != value))
				{
					if (this._ScoreCardMetric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardMetricIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardMetricID = value;
					this.SendPropertyChanged("ScoreCardMetricID");
					this.OnScoreCardMetricIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.ScoreCardDashboard.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.ScoreCardDashboard.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.ScoreCardDashboard.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.ScoreCardDashboard.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public ScoreCardMetric ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric.Entity;
			}
			set
			{
				ScoreCardMetric previousValue = this._ScoreCardMetric.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCardMetric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCardMetric.Entity = null;
						previousValue.ScoreCardDashboard.Remove(this);
					}
					this._ScoreCardMetric.Entity = value;
					if ((value != null))
					{
						value.ScoreCardDashboard.Add(this);
						this._InstanceId = value.InstanceId;
						this._ScoreCardMetricID = value.ScoreCardMetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ScoreCardMetricID = default(System.Guid);
					}
					this.SendPropertyChanged("ScoreCardMetric");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.ScoreCardHidden")]
	public partial class ScoreCardHidden : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _ScoreCardHiddenID;
		
		private System.Guid _UserId;
		
		private System.Guid _ScoreCardID;
		
		private System.DateTime _Created;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Mc_User> _Mc_User;
		
		private EntityRef<ScoreCard> _ScoreCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnScoreCardHiddenIDChanging(System.Guid value);
    partial void OnScoreCardHiddenIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnScoreCardIDChanging(System.Guid value);
    partial void OnScoreCardIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public ScoreCardHidden()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Mc_User = default(EntityRef<Mc_User>);
			this._ScoreCard = default(EntityRef<ScoreCard>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardHiddenID", Storage="_ScoreCardHiddenID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ScoreCardHiddenID
		{
			get
			{
				return this._ScoreCardHiddenID;
			}
			set
			{
				if ((this._ScoreCardHiddenID != value))
				{
					this.OnScoreCardHiddenIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardHiddenID = value;
					this.SendPropertyChanged("ScoreCardHiddenID");
					this.OnScoreCardHiddenIDChanged();
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Mc_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardID", Storage="_ScoreCardID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid ScoreCardID
		{
			get
			{
				return this._ScoreCardID;
			}
			set
			{
				if ((this._ScoreCardID != value))
				{
					if (this._ScoreCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardID = value;
					this.SendPropertyChanged("ScoreCardID");
					this.OnScoreCardIDChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.ScoreCardHidden.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.ScoreCardHidden.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Mc_User Mc_User
		{
			get
			{
				return this._Mc_User.Entity;
			}
			set
			{
				Mc_User previousValue = this._Mc_User.Entity;
				if (((previousValue != value) 
							|| (this._Mc_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_User.Entity = null;
						previousValue.ScoreCardHidden.Remove(this);
					}
					this._Mc_User.Entity = value;
					if ((value != null))
					{
						value.ScoreCardHidden.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_User");
				}
			}
		}
		
		public ScoreCard ScoreCard
		{
			get
			{
				return this._ScoreCard.Entity;
			}
			set
			{
				ScoreCard previousValue = this._ScoreCard.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCard.Entity = null;
						previousValue.ScoreCardHidden.Remove(this);
					}
					this._ScoreCard.Entity = value;
					if ((value != null))
					{
						value.ScoreCardHidden.Add(this);
						this._InstanceId = value.InstanceId;
						this._ScoreCardID = value.ScoreCardID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ScoreCardID = default(System.Guid);
					}
					this.SendPropertyChanged("ScoreCard");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.ScoreCardMetric")]
	public partial class ScoreCardMetric : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _ScoreCardMetricID;
		
		private System.Guid _ScoreCardID;
		
		private System.Guid _MetricID;
		
		private int _ScoreCardPeriodID;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<decimal> _BaselineValue;
		
		private System.Nullable<decimal> _Breakpoint1Value;
		
		private System.Nullable<decimal> _Breakpoint2Value;
		
		private System.Nullable<decimal> _MaxValue;
		
		private System.Nullable<decimal> _MinValue;
		
		private string _BaselineValueLabel;
		
		private string _Breakpoint1ValueLabel;
		
		private string _Breakpoint2ValueLabel;
		
		private EntitySet<ScoreCardDashboard> _ScoreCardDashboard;
		
		private EntityRef<Mc_EntityNode> _Mc_EntityNode;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<Metric> _Metric;
		
		private EntityRef<ScoreCard> _ScoreCard;
		
		private EntityRef<ScoreCardPeriod> _ScoreCardPeriod;
		
		private EntitySet<ScoreCardValue> _ScoreCardValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnScoreCardMetricIDChanging(System.Guid value);
    partial void OnScoreCardMetricIDChanged();
    partial void OnScoreCardIDChanging(System.Guid value);
    partial void OnScoreCardIDChanged();
    partial void OnMetricIDChanging(System.Guid value);
    partial void OnMetricIDChanged();
    partial void OnScoreCardPeriodIDChanging(int value);
    partial void OnScoreCardPeriodIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnOrgLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrgLocationIDChanged();
    partial void OnBaselineValueChanging(System.Nullable<decimal> value);
    partial void OnBaselineValueChanged();
    partial void OnBreakpoint1ValueChanging(System.Nullable<decimal> value);
    partial void OnBreakpoint1ValueChanged();
    partial void OnBreakpoint2ValueChanging(System.Nullable<decimal> value);
    partial void OnBreakpoint2ValueChanged();
    partial void OnMaxValueChanging(System.Nullable<decimal> value);
    partial void OnMaxValueChanged();
    partial void OnMinValueChanging(System.Nullable<decimal> value);
    partial void OnMinValueChanged();
    partial void OnBaselineValueLabelChanging(string value);
    partial void OnBaselineValueLabelChanged();
    partial void OnBreakpoint1ValueLabelChanging(string value);
    partial void OnBreakpoint1ValueLabelChanged();
    partial void OnBreakpoint2ValueLabelChanging(string value);
    partial void OnBreakpoint2ValueLabelChanged();
    #endregion
		
		public ScoreCardMetric()
		{
			this._ScoreCardDashboard = new EntitySet<ScoreCardDashboard>(new Action<ScoreCardDashboard>(this.attach_ScoreCardDashboard), new Action<ScoreCardDashboard>(this.detach_ScoreCardDashboard));
			this._Mc_EntityNode = default(EntityRef<Mc_EntityNode>);
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._Metric = default(EntityRef<Metric>);
			this._ScoreCard = default(EntityRef<ScoreCard>);
			this._ScoreCardPeriod = default(EntityRef<ScoreCardPeriod>);
			this._ScoreCardValue = new EntitySet<ScoreCardValue>(new Action<ScoreCardValue>(this.attach_ScoreCardValue), new Action<ScoreCardValue>(this.detach_ScoreCardValue));
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardMetricID", Storage="_ScoreCardMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ScoreCardMetricID
		{
			get
			{
				return this._ScoreCardMetricID;
			}
			set
			{
				if ((this._ScoreCardMetricID != value))
				{
					this.OnScoreCardMetricIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardMetricID = value;
					this.SendPropertyChanged("ScoreCardMetricID");
					this.OnScoreCardMetricIDChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardID", Storage="_ScoreCardID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid ScoreCardID
		{
			get
			{
				return this._ScoreCardID;
			}
			set
			{
				if ((this._ScoreCardID != value))
				{
					if (this._ScoreCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardID = value;
					this.SendPropertyChanged("ScoreCardID");
					this.OnScoreCardIDChanged();
				}
			}
		}
		
		[Column(Name="MetricID", Storage="_MetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					if (this._Metric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetricIDChanging(value);
					this.SendPropertyChanging();
					this._MetricID = value;
					this.SendPropertyChanged("MetricID");
					this.OnMetricIDChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardPeriodID", Storage="_ScoreCardPeriodID", DbType="Int NOT NULL", IsPrimaryKey=false)]
		public int ScoreCardPeriodID
		{
			get
			{
				return this._ScoreCardPeriodID;
			}
			set
			{
				if ((this._ScoreCardPeriodID != value))
				{
					if (this._ScoreCardPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardPeriodID = value;
					this.SendPropertyChanged("ScoreCardPeriodID");
					this.OnScoreCardPeriodIDChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Name="OrgLocationID", Storage="_OrgLocationID", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					if (this._Mc_EntityNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgLocationIDChanging(value);
					this.SendPropertyChanging();
					this._OrgLocationID = value;
					this.SendPropertyChanged("OrgLocationID");
					this.OnOrgLocationIDChanged();
				}
			}
		}
		
		[Column(Name="BaselineValue", Storage="_BaselineValue", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> BaselineValue
		{
			get
			{
				return this._BaselineValue;
			}
			set
			{
				if ((this._BaselineValue != value))
				{
					this.OnBaselineValueChanging(value);
					this.SendPropertyChanging();
					this._BaselineValue = value;
					this.SendPropertyChanged("BaselineValue");
					this.OnBaselineValueChanged();
				}
			}
		}
		
		[Column(Name="Breakpoint1Value", Storage="_Breakpoint1Value", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> Breakpoint1Value
		{
			get
			{
				return this._Breakpoint1Value;
			}
			set
			{
				if ((this._Breakpoint1Value != value))
				{
					this.OnBreakpoint1ValueChanging(value);
					this.SendPropertyChanging();
					this._Breakpoint1Value = value;
					this.SendPropertyChanged("Breakpoint1Value");
					this.OnBreakpoint1ValueChanged();
				}
			}
		}
		
		[Column(Name="Breakpoint2Value", Storage="_Breakpoint2Value", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> Breakpoint2Value
		{
			get
			{
				return this._Breakpoint2Value;
			}
			set
			{
				if ((this._Breakpoint2Value != value))
				{
					this.OnBreakpoint2ValueChanging(value);
					this.SendPropertyChanging();
					this._Breakpoint2Value = value;
					this.SendPropertyChanged("Breakpoint2Value");
					this.OnBreakpoint2ValueChanged();
				}
			}
		}
		
		[Column(Name="MaxValue", Storage="_MaxValue", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[Column(Name="MinValue", Storage="_MinValue", DbType="Decimal(29,10)", IsPrimaryKey=false)]
		public System.Nullable<decimal> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[Column(Name="BaselineValueLabel", Storage="_BaselineValueLabel", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string BaselineValueLabel
		{
			get
			{
				return this._BaselineValueLabel;
			}
			set
			{
				if ((this._BaselineValueLabel != value))
				{
					this.OnBaselineValueLabelChanging(value);
					this.SendPropertyChanging();
					this._BaselineValueLabel = value;
					this.SendPropertyChanged("BaselineValueLabel");
					this.OnBaselineValueLabelChanged();
				}
			}
		}
		
		[Column(Name="Breakpoint1ValueLabel", Storage="_Breakpoint1ValueLabel", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string Breakpoint1ValueLabel
		{
			get
			{
				return this._Breakpoint1ValueLabel;
			}
			set
			{
				if ((this._Breakpoint1ValueLabel != value))
				{
					this.OnBreakpoint1ValueLabelChanging(value);
					this.SendPropertyChanging();
					this._Breakpoint1ValueLabel = value;
					this.SendPropertyChanged("Breakpoint1ValueLabel");
					this.OnBreakpoint1ValueLabelChanged();
				}
			}
		}
		
		[Column(Name="Breakpoint2ValueLabel", Storage="_Breakpoint2ValueLabel", DbType="NVarChar(25)", IsPrimaryKey=false)]
		public string Breakpoint2ValueLabel
		{
			get
			{
				return this._Breakpoint2ValueLabel;
			}
			set
			{
				if ((this._Breakpoint2ValueLabel != value))
				{
					this.OnBreakpoint2ValueLabelChanging(value);
					this.SendPropertyChanging();
					this._Breakpoint2ValueLabel = value;
					this.SendPropertyChanged("Breakpoint2ValueLabel");
					this.OnBreakpoint2ValueLabelChanged();
				}
			}
		}
		
		public EntitySet<ScoreCardDashboard> ScoreCardDashboard
		{
			get
			{
				return this._ScoreCardDashboard;
			}
			set
			{
				this._ScoreCardDashboard.Assign(value);
			}
		}
		
		public Mc_EntityNode Mc_EntityNode
		{
			get
			{
				return this._Mc_EntityNode.Entity;
			}
			set
			{
				Mc_EntityNode previousValue = this._Mc_EntityNode.Entity;
				if (((previousValue != value) 
							|| (this._Mc_EntityNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_EntityNode.Entity = null;
						previousValue.ScoreCardMetric.Remove(this);
					}
					this._Mc_EntityNode.Entity = value;
					if ((value != null))
					{
						value.ScoreCardMetric.Add(this);
						this._OrgLocationID = value.EntityNodeId;
					}
					else
					{
						this._OrgLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Mc_EntityNode");
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.ScoreCardMetric.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.ScoreCardMetric.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public Metric Metric
		{
			get
			{
				return this._Metric.Entity;
			}
			set
			{
				Metric previousValue = this._Metric.Entity;
				if (((previousValue != value) 
							|| (this._Metric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Metric.Entity = null;
						previousValue.ScoreCardMetric.Remove(this);
					}
					this._Metric.Entity = value;
					if ((value != null))
					{
						value.ScoreCardMetric.Add(this);
						this._InstanceId = value.InstanceId;
						this._MetricID = value.MetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._MetricID = default(System.Guid);
					}
					this.SendPropertyChanged("Metric");
				}
			}
		}
		
		public ScoreCard ScoreCard
		{
			get
			{
				return this._ScoreCard.Entity;
			}
			set
			{
				ScoreCard previousValue = this._ScoreCard.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCard.Entity = null;
						previousValue.ScoreCardMetric.Remove(this);
					}
					this._ScoreCard.Entity = value;
					if ((value != null))
					{
						value.ScoreCardMetric.Add(this);
						this._InstanceId = value.InstanceId;
						this._ScoreCardID = value.ScoreCardID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ScoreCardID = default(System.Guid);
					}
					this.SendPropertyChanged("ScoreCard");
				}
			}
		}
		
		public ScoreCardPeriod ScoreCardPeriod
		{
			get
			{
				return this._ScoreCardPeriod.Entity;
			}
			set
			{
				ScoreCardPeriod previousValue = this._ScoreCardPeriod.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCardPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCardPeriod.Entity = null;
						previousValue.ScoreCardMetric.Remove(this);
					}
					this._ScoreCardPeriod.Entity = value;
					if ((value != null))
					{
						value.ScoreCardMetric.Add(this);
						this._ScoreCardPeriodID = value.ScoreCardPeriodID;
					}
					else
					{
						this._ScoreCardPeriodID = default(int);
					}
					this.SendPropertyChanged("ScoreCardPeriod");
				}
			}
		}
		
		public EntitySet<ScoreCardValue> ScoreCardValue
		{
			get
			{
				return this._ScoreCardValue;
			}
			set
			{
				this._ScoreCardValue.Assign(value);
			}
		}
		
		
		private void attach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardMetric = this;
		}
		
		private void detach_ScoreCardDashboard(ScoreCardDashboard entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardMetric = null;
		}
		
		private void attach_ScoreCardValue(ScoreCardValue entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardMetric = this;
		}
		
		private void detach_ScoreCardValue(ScoreCardValue entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardMetric = null;
		}
	}
	
	[Table(Name="dbo.ScoreCardPeriod")]
	public partial class ScoreCardPeriod : LinqMicajahEntitybase
	{
		
		private int _ScoreCardPeriodID;
		
		private string _Name;
		
		private EntitySet<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreCardPeriodIDChanging(int value);
    partial void OnScoreCardPeriodIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ScoreCardPeriod()
		{
			this._ScoreCardMetric = new EntitySet<ScoreCardMetric>(new Action<ScoreCardMetric>(this.attach_ScoreCardMetric), new Action<ScoreCardMetric>(this.detach_ScoreCardMetric));
			OnCreated();
		}
		
		[Column(Name="ScoreCardPeriodID", Storage="_ScoreCardPeriodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScoreCardPeriodID
		{
			get
			{
				return this._ScoreCardPeriodID;
			}
			set
			{
				if ((this._ScoreCardPeriodID != value))
				{
					this.OnScoreCardPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardPeriodID = value;
					this.SendPropertyChanged("ScoreCardPeriodID");
					this.OnScoreCardPeriodIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(100) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<ScoreCardMetric> ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric;
			}
			set
			{
				this._ScoreCardMetric.Assign(value);
			}
		}
		
		
		private void attach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardPeriod = this;
		}
		
		private void detach_ScoreCardMetric(ScoreCardMetric entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCardPeriod = null;
		}
	}
	
	[Table(Name="dbo.ScoreCardValue")]
	public partial class ScoreCardValue : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _ScoreCardValueID;
		
		private System.Guid _ScoreCardMetricID;
		
		private System.Nullable<double> _CurrentValue;
		
		private System.Nullable<double> _PreviousValue;
		
		private System.Nullable<System.Guid> _UnitsOfMeasureId;
		
		private System.Nullable<bool> _Status;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntityRef<Mc_Instance> _Mc_Instance;
		
		private EntityRef<ScoreCardMetric> _ScoreCardMetric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIdChanging(System.Guid value);
    partial void OnInstanceIdChanged();
    partial void OnScoreCardValueIDChanging(System.Guid value);
    partial void OnScoreCardValueIDChanged();
    partial void OnScoreCardMetricIDChanging(System.Guid value);
    partial void OnScoreCardMetricIDChanged();
    partial void OnCurrentValueChanging(System.Nullable<double> value);
    partial void OnCurrentValueChanged();
    partial void OnPreviousValueChanging(System.Nullable<double> value);
    partial void OnPreviousValueChanged();
    partial void OnUnitsOfMeasureIdChanging(System.Nullable<System.Guid> value);
    partial void OnUnitsOfMeasureIdChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public ScoreCardValue()
		{
			this._Mc_Instance = default(EntityRef<Mc_Instance>);
			this._ScoreCardMetric = default(EntityRef<ScoreCardMetric>);
			OnCreated();
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Mc_Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardValueID", Storage="_ScoreCardValueID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ScoreCardValueID
		{
			get
			{
				return this._ScoreCardValueID;
			}
			set
			{
				if ((this._ScoreCardValueID != value))
				{
					this.OnScoreCardValueIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardValueID = value;
					this.SendPropertyChanged("ScoreCardValueID");
					this.OnScoreCardValueIDChanged();
				}
			}
		}
		
		[Column(Name="ScoreCardMetricID", Storage="_ScoreCardMetricID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid ScoreCardMetricID
		{
			get
			{
				return this._ScoreCardMetricID;
			}
			set
			{
				if ((this._ScoreCardMetricID != value))
				{
					if (this._ScoreCardMetric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardMetricIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardMetricID = value;
					this.SendPropertyChanged("ScoreCardMetricID");
					this.OnScoreCardMetricIDChanged();
				}
			}
		}
		
		[Column(Name="CurrentValue", Storage="_CurrentValue", DbType="Float", IsPrimaryKey=false)]
		public System.Nullable<double> CurrentValue
		{
			get
			{
				return this._CurrentValue;
			}
			set
			{
				if ((this._CurrentValue != value))
				{
					this.OnCurrentValueChanging(value);
					this.SendPropertyChanging();
					this._CurrentValue = value;
					this.SendPropertyChanged("CurrentValue");
					this.OnCurrentValueChanged();
				}
			}
		}
		
		[Column(Name="PreviousValue", Storage="_PreviousValue", DbType="Float", IsPrimaryKey=false)]
		public System.Nullable<double> PreviousValue
		{
			get
			{
				return this._PreviousValue;
			}
			set
			{
				if ((this._PreviousValue != value))
				{
					this.OnPreviousValueChanging(value);
					this.SendPropertyChanging();
					this._PreviousValue = value;
					this.SendPropertyChanged("PreviousValue");
					this.OnPreviousValueChanged();
				}
			}
		}
		
		[Column(Name="UnitsOfMeasureId", Storage="_UnitsOfMeasureId", DbType="UniqueIdentifier", IsPrimaryKey=false)]
		public System.Nullable<System.Guid> UnitsOfMeasureId
		{
			get
			{
				return this._UnitsOfMeasureId;
			}
			set
			{
				if ((this._UnitsOfMeasureId != value))
				{
					this.OnUnitsOfMeasureIdChanging(value);
					this.SendPropertyChanging();
					this._UnitsOfMeasureId = value;
					this.SendPropertyChanged("UnitsOfMeasureId");
					this.OnUnitsOfMeasureIdChanged();
				}
			}
		}
		
		[Column(Name="Status", Storage="_Status", DbType="Bit", IsPrimaryKey=false)]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Created", Storage="_Created", DbType="SmallDateTime NOT NULL", IsPrimaryKey=false)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Name="Updated", Storage="_Updated", DbType="SmallDateTime", IsPrimaryKey=false)]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		public Mc_Instance Mc_Instance
		{
			get
			{
				return this._Mc_Instance.Entity;
			}
			set
			{
				Mc_Instance previousValue = this._Mc_Instance.Entity;
				if (((previousValue != value) 
							|| (this._Mc_Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mc_Instance.Entity = null;
						previousValue.ScoreCardValue.Remove(this);
					}
					this._Mc_Instance.Entity = value;
					if ((value != null))
					{
						value.ScoreCardValue.Add(this);
						this._InstanceId = value.InstanceId;
					}
					else
					{
						this._InstanceId = default(System.Guid);
					}
					this.SendPropertyChanged("Mc_Instance");
				}
			}
		}
		
		public ScoreCardMetric ScoreCardMetric
		{
			get
			{
				return this._ScoreCardMetric.Entity;
			}
			set
			{
				ScoreCardMetric previousValue = this._ScoreCardMetric.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCardMetric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCardMetric.Entity = null;
						previousValue.ScoreCardValue.Remove(this);
					}
					this._ScoreCardMetric.Entity = value;
					if ((value != null))
					{
						value.ScoreCardValue.Add(this);
						this._InstanceId = value.InstanceId;
						this._ScoreCardMetricID = value.ScoreCardMetricID;
					}
					else
					{
						this._InstanceId = default(System.Guid);
						this._ScoreCardMetricID = default(System.Guid);
					}
					this.SendPropertyChanged("ScoreCardMetric");
				}
			}
		}
		
	}
	
	[Table(Name="dbo.Sector")]
	public partial class Sector : LinqMicajahEntitybase
	{
		
		private int _SectorID;
		
		private string _Name;
		
		private EntitySet<PerformanceIndicator> _PerformanceIndicator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sector()
		{
			this._PerformanceIndicator = new EntitySet<PerformanceIndicator>(new Action<PerformanceIndicator>(this.attach_PerformanceIndicator), new Action<PerformanceIndicator>(this.detach_PerformanceIndicator));
			OnCreated();
		}
		
		[Column(Name="SectorID", Storage="_SectorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[Column(Name="Name", Storage="_Name", DbType="NVarChar(50) NOT NULL", IsPrimaryKey=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public EntitySet<PerformanceIndicator> PerformanceIndicator
		{
			get
			{
				return this._PerformanceIndicator;
			}
			set
			{
				this._PerformanceIndicator.Assign(value);
			}
		}
		
		
		private void attach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Sector = this;
		}
		
		private void detach_PerformanceIndicator(PerformanceIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Sector = null;
		}
	}
	
	[Table(Name="dbo.UserFullNameView")]
	public partial class UserFullNameView : LinqMicajahEntitybase
	{
		
		private System.Guid _InstanceId;
		
		private System.Guid _UserId;
		
		private string _FullName;
		
		public UserFullNameView()
		{
		}
		
		[Column(Name="InstanceId", Storage="_InstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		[Column(Name="UserId", Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=false)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Name="FullName", Storage="_FullName", DbType="NVarChar(767) NOT NULL", IsPrimaryKey=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	public partial class FxGetInputMetricListResult
	{
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _Generation;
		
		public FxGetInputMetricListResult()
		{
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this._Generation = value;
				}
			}
		}
	}
	
	public partial class Iter_charlist_to_tableResult
	{
		
		private System.Nullable<System.Guid> _Id;
		
		public Iter_charlist_to_tableResult()
		{
		}
		
		public System.Nullable<System.Guid> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
	}
																																																																																																																							
	public partial class Sp_SelectApproverWorkListResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _MetricFrequencyID;
		
		private System.Nullable<int> _MetricTypeID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private string _MetricCategoryFullName;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<bool> _FilesAttached;
		
		private System.Nullable<bool> _ReviewUpdated;
		
		private System.Nullable<bool> _MissedCalc;
		
		private string _Notes;
		
		private System.Nullable<int> _ValueFrequencyID;
		
		private string _ValueFrequencyName;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<int> _ValueDataTypeID;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private string _OrgLocationFullName;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		public Sp_SelectApproverWorkListResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> MetricFrequencyID
		{
			get
			{
				return this._MetricFrequencyID;
			}
			set
			{
				if ((this._MetricFrequencyID != value))
				{
					this._MetricFrequencyID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public string MetricCategoryFullName
		{
			get
			{
				return this._MetricCategoryFullName;
			}
			set
			{
				if ((this._MetricCategoryFullName != value))
				{
					this._MetricCategoryFullName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this._Approved = value;
				}
			}
		}
		
		public System.Nullable<bool> FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this._FilesAttached = value;
				}
			}
		}
		
		public System.Nullable<bool> ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this._ReviewUpdated = value;
				}
			}
		}
		
		public System.Nullable<bool> MissedCalc
		{
			get
			{
				return this._MissedCalc;
			}
			set
			{
				if ((this._MissedCalc != value))
				{
					this._MissedCalc = value;
				}
			}
		}
		
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		public System.Nullable<int> ValueFrequencyID
		{
			get
			{
				return this._ValueFrequencyID;
			}
			set
			{
				if ((this._ValueFrequencyID != value))
				{
					this._ValueFrequencyID = value;
				}
			}
		}
		
		public string ValueFrequencyName
		{
			get
			{
				return this._ValueFrequencyName;
			}
			set
			{
				if ((this._ValueFrequencyName != value))
				{
					this._ValueFrequencyName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<int> ValueDataTypeID
		{
			get
			{
				return this._ValueDataTypeID;
			}
			set
			{
				if ((this._ValueDataTypeID != value))
				{
					this._ValueDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public string OrgLocationFullName
		{
			get
			{
				return this._OrgLocationFullName;
			}
			set
			{
				if ((this._OrgLocationFullName != value))
				{
					this._OrgLocationFullName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectFilterMetricsResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _Name;
		
		private string _Notes;
		
		private System.Nullable<int> _FrequencyID;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _MetricCategoryID;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<decimal> _NOMinValue;
		
		private System.Nullable<decimal> _NOMaxValue;
		
		private string _Definition;
		
		private string _Documentation;
		
		private string _MetricReferences;
		
		private string _Code;
		
		private System.Nullable<int> _MetricTypeID;
		
		private string _Alias;
		
		private System.Nullable<int> _Generation;
		
		private string _FormulaCode;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private string _Variable;
		
		private System.Nullable<bool> _GrowUpIsGood;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private string _FrequencyName;
		
		private string _MetricCategoryName;
		
		private string _MetricDataTypeName;
		
		private string _MetricTypeName;
		
		public Sp_SelectFilterMetricsResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this._Updated = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this._MetricCategoryID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this._UnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMinValue
		{
			get
			{
				return this._NOMinValue;
			}
			set
			{
				if ((this._NOMinValue != value))
				{
					this._NOMinValue = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMaxValue
		{
			get
			{
				return this._NOMaxValue;
			}
			set
			{
				if ((this._NOMaxValue != value))
				{
					this._NOMaxValue = value;
				}
			}
		}
		
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
		
		public string Documentation
		{
			get
			{
				return this._Documentation;
			}
			set
			{
				if ((this._Documentation != value))
				{
					this._Documentation = value;
				}
			}
		}
		
		public string MetricReferences
		{
			get
			{
				return this._MetricReferences;
			}
			set
			{
				if ((this._MetricReferences != value))
				{
					this._MetricReferences = value;
				}
			}
		}
		
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this._Alias = value;
				}
			}
		}
		
		public System.Nullable<int> Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this._Generation = value;
				}
			}
		}
		
		public string FormulaCode
		{
			get
			{
				return this._FormulaCode;
			}
			set
			{
				if ((this._FormulaCode != value))
				{
					this._FormulaCode = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this._InputUnitOfMeasureID = value;
				}
			}
		}
		
		public string Variable
		{
			get
			{
				return this._Variable;
			}
			set
			{
				if ((this._Variable != value))
				{
					this._Variable = value;
				}
			}
		}
		
		public System.Nullable<bool> GrowUpIsGood
		{
			get
			{
				return this._GrowUpIsGood;
			}
			set
			{
				if ((this._GrowUpIsGood != value))
				{
					this._GrowUpIsGood = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this._CollectionStartDate = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this._CollectionEndDate = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public string FrequencyName
		{
			get
			{
				return this._FrequencyName;
			}
			set
			{
				if ((this._FrequencyName != value))
				{
					this._FrequencyName = value;
				}
			}
		}
		
		public string MetricCategoryName
		{
			get
			{
				return this._MetricCategoryName;
			}
			set
			{
				if ((this._MetricCategoryName != value))
				{
					this._MetricCategoryName = value;
				}
			}
		}
		
		public string MetricDataTypeName
		{
			get
			{
				return this._MetricDataTypeName;
			}
			set
			{
				if ((this._MetricDataTypeName != value))
				{
					this._MetricDataTypeName = value;
				}
			}
		}
		
		public string MetricTypeName
		{
			get
			{
				return this._MetricTypeName;
			}
			set
			{
				if ((this._MetricTypeName != value))
				{
					this._MetricTypeName = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectMetricListResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _Name;
		
		private string _Notes;
		
		private System.Nullable<int> _FrequencyID;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _MetricCategoryID;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<decimal> _NOMinValue;
		
		private System.Nullable<decimal> _NOMaxValue;
		
		private string _Definition;
		
		private string _Documentation;
		
		private string _MetricReferences;
		
		private string _Code;
		
		private System.Nullable<int> _MetricTypeID;
		
		private string _Alias;
		
		private System.Nullable<int> _Generation;
		
		private string _FormulaCode;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private string _Variable;
		
		private System.Nullable<bool> _GrowUpIsGood;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		public Sp_SelectMetricListResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this._Updated = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this._MetricCategoryID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this._UnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMinValue
		{
			get
			{
				return this._NOMinValue;
			}
			set
			{
				if ((this._NOMinValue != value))
				{
					this._NOMinValue = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMaxValue
		{
			get
			{
				return this._NOMaxValue;
			}
			set
			{
				if ((this._NOMaxValue != value))
				{
					this._NOMaxValue = value;
				}
			}
		}
		
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
		
		public string Documentation
		{
			get
			{
				return this._Documentation;
			}
			set
			{
				if ((this._Documentation != value))
				{
					this._Documentation = value;
				}
			}
		}
		
		public string MetricReferences
		{
			get
			{
				return this._MetricReferences;
			}
			set
			{
				if ((this._MetricReferences != value))
				{
					this._MetricReferences = value;
				}
			}
		}
		
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this._Alias = value;
				}
			}
		}
		
		public System.Nullable<int> Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this._Generation = value;
				}
			}
		}
		
		public string FormulaCode
		{
			get
			{
				return this._FormulaCode;
			}
			set
			{
				if ((this._FormulaCode != value))
				{
					this._FormulaCode = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this._InputUnitOfMeasureID = value;
				}
			}
		}
		
		public string Variable
		{
			get
			{
				return this._Variable;
			}
			set
			{
				if ((this._Variable != value))
				{
					this._Variable = value;
				}
			}
		}
		
		public System.Nullable<bool> GrowUpIsGood
		{
			get
			{
				return this._GrowUpIsGood;
			}
			set
			{
				if ((this._GrowUpIsGood != value))
				{
					this._GrowUpIsGood = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this._CollectionStartDate = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this._CollectionEndDate = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectMetricRelatedValuesResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private string _OrgLocationFullName;
		
		private string _FrequencyName;
		
		private System.Nullable<System.Guid> _MetricFormulaID;
		
		private string _Formula;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _MetricTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private string _Value;
		
		private System.Nullable<bool> _Verified;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<bool> _FilesAttached;
		
		private System.Nullable<bool> _ReviewUpdated;
		
		private System.Nullable<bool> _MissedCalc;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		private string _ValueType;
		
		public Sp_SelectMetricRelatedValuesResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public string OrgLocationFullName
		{
			get
			{
				return this._OrgLocationFullName;
			}
			set
			{
				if ((this._OrgLocationFullName != value))
				{
					this._OrgLocationFullName = value;
				}
			}
		}
		
		public string FrequencyName
		{
			get
			{
				return this._FrequencyName;
			}
			set
			{
				if ((this._FrequencyName != value))
				{
					this._FrequencyName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricFormulaID
		{
			get
			{
				return this._MetricFormulaID;
			}
			set
			{
				if ((this._MetricFormulaID != value))
				{
					this._MetricFormulaID = value;
				}
			}
		}
		
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this._Formula = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this._Verified = value;
				}
			}
		}
		
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this._Approved = value;
				}
			}
		}
		
		public System.Nullable<bool> FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this._FilesAttached = value;
				}
			}
		}
		
		public System.Nullable<bool> ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this._ReviewUpdated = value;
				}
			}
		}
		
		public System.Nullable<bool> MissedCalc
		{
			get
			{
				return this._MissedCalc;
			}
			set
			{
				if ((this._MissedCalc != value))
				{
					this._MissedCalc = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
		
		public string ValueType
		{
			get
			{
				return this._ValueType;
			}
			set
			{
				if ((this._ValueType != value))
				{
					this._ValueType = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectMetricValuesResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _MetricFrequencyID;
		
		private System.Nullable<System.Guid> _MetricCategoryID;
		
		private System.Nullable<System.Guid> _MetricUnitOfMeasureID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<decimal> _NOMinValue;
		
		private System.Nullable<decimal> _NOMaxValue;
		
		private System.Nullable<int> _MetricTypeID;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<int> _ValueFrequencyID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<bool> _Verified;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<bool> _FilesAttached;
		
		private System.Nullable<System.DateTime> _InputDate;
		
		private System.Nullable<bool> _ReviewUpdated;
		
		private System.Nullable<int> _ValueDataTypeID;
		
		private System.Nullable<System.Guid> _ValueUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private System.Nullable<bool> _MissedCalc;
		
		private string _Notes;
		
		private string _FrequencyName;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private string _OrgLocationFullName;
		
		private System.Nullable<System.Guid> _CollectorUserId;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricOrgLocationNameID;
		
		private string _CustomMetricAlias;
		
		private string _CustomMetricCode;
		
		public Sp_SelectMetricValuesResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> MetricFrequencyID
		{
			get
			{
				return this._MetricFrequencyID;
			}
			set
			{
				if ((this._MetricFrequencyID != value))
				{
					this._MetricFrequencyID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this._MetricCategoryID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricUnitOfMeasureID
		{
			get
			{
				return this._MetricUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricUnitOfMeasureID != value))
				{
					this._MetricUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMinValue
		{
			get
			{
				return this._NOMinValue;
			}
			set
			{
				if ((this._NOMinValue != value))
				{
					this._NOMinValue = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMaxValue
		{
			get
			{
				return this._NOMaxValue;
			}
			set
			{
				if ((this._NOMaxValue != value))
				{
					this._NOMaxValue = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this._CollectionStartDate = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this._CollectionEndDate = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<int> ValueFrequencyID
		{
			get
			{
				return this._ValueFrequencyID;
			}
			set
			{
				if ((this._ValueFrequencyID != value))
				{
					this._ValueFrequencyID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this._Verified = value;
				}
			}
		}
		
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this._Approved = value;
				}
			}
		}
		
		public System.Nullable<bool> FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this._FilesAttached = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> InputDate
		{
			get
			{
				return this._InputDate;
			}
			set
			{
				if ((this._InputDate != value))
				{
					this._InputDate = value;
				}
			}
		}
		
		public System.Nullable<bool> ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this._ReviewUpdated = value;
				}
			}
		}
		
		public System.Nullable<int> ValueDataTypeID
		{
			get
			{
				return this._ValueDataTypeID;
			}
			set
			{
				if ((this._ValueDataTypeID != value))
				{
					this._ValueDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueUnitOfMeasureID
		{
			get
			{
				return this._ValueUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueUnitOfMeasureID != value))
				{
					this._ValueUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<bool> MissedCalc
		{
			get
			{
				return this._MissedCalc;
			}
			set
			{
				if ((this._MissedCalc != value))
				{
					this._MissedCalc = value;
				}
			}
		}
		
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		public string FrequencyName
		{
			get
			{
				return this._FrequencyName;
			}
			set
			{
				if ((this._FrequencyName != value))
				{
					this._FrequencyName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public string OrgLocationFullName
		{
			get
			{
				return this._OrgLocationFullName;
			}
			set
			{
				if ((this._OrgLocationFullName != value))
				{
					this._OrgLocationFullName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> CollectorUserId
		{
			get
			{
				return this._CollectorUserId;
			}
			set
			{
				if ((this._CollectorUserId != value))
				{
					this._CollectorUserId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationNameID
		{
			get
			{
				return this._MetricOrgLocationNameID;
			}
			set
			{
				if ((this._MetricOrgLocationNameID != value))
				{
					this._MetricOrgLocationNameID = value;
				}
			}
		}
		
		public string CustomMetricAlias
		{
			get
			{
				return this._CustomMetricAlias;
			}
			set
			{
				if ((this._CustomMetricAlias != value))
				{
					this._CustomMetricAlias = value;
				}
			}
		}
		
		public string CustomMetricCode
		{
			get
			{
				return this._CustomMetricCode;
			}
			set
			{
				if ((this._CustomMetricCode != value))
				{
					this._CustomMetricCode = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectMissedInputMetricValuesResult
	{
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<bool> _FilesAttached;
		
		private System.Nullable<bool> _ReviewUpdated;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private string _OrgLocationFullName;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricOrgLocationNameID;
		
		private string _CustomMetricAlias;
		
		private string _CustomMetricCode;
		
		private string _ValuePosType;
		
		private string _UniName1;
		
		private System.Nullable<System.Guid> _UniID1;
		
		private string _UniName2;
		
		private System.Nullable<System.Guid> _UniID2;
		
		public Sp_SelectMissedInputMetricValuesResult()
		{
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this._CollectionStartDate = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this._CollectionEndDate = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this._Approved = value;
				}
			}
		}
		
		public System.Nullable<bool> FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this._FilesAttached = value;
				}
			}
		}
		
		public System.Nullable<bool> ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this._ReviewUpdated = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public string OrgLocationFullName
		{
			get
			{
				return this._OrgLocationFullName;
			}
			set
			{
				if ((this._OrgLocationFullName != value))
				{
					this._OrgLocationFullName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationNameID
		{
			get
			{
				return this._MetricOrgLocationNameID;
			}
			set
			{
				if ((this._MetricOrgLocationNameID != value))
				{
					this._MetricOrgLocationNameID = value;
				}
			}
		}
		
		public string CustomMetricAlias
		{
			get
			{
				return this._CustomMetricAlias;
			}
			set
			{
				if ((this._CustomMetricAlias != value))
				{
					this._CustomMetricAlias = value;
				}
			}
		}
		
		public string CustomMetricCode
		{
			get
			{
				return this._CustomMetricCode;
			}
			set
			{
				if ((this._CustomMetricCode != value))
				{
					this._CustomMetricCode = value;
				}
			}
		}
		
		public string ValuePosType
		{
			get
			{
				return this._ValuePosType;
			}
			set
			{
				if ((this._ValuePosType != value))
				{
					this._ValuePosType = value;
				}
			}
		}
		
		public string UniName1
		{
			get
			{
				return this._UniName1;
			}
			set
			{
				if ((this._UniName1 != value))
				{
					this._UniName1 = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UniID1
		{
			get
			{
				return this._UniID1;
			}
			set
			{
				if ((this._UniID1 != value))
				{
					this._UniID1 = value;
				}
			}
		}
		
		public string UniName2
		{
			get
			{
				return this._UniName2;
			}
			set
			{
				if ((this._UniName2 != value))
				{
					this._UniName2 = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UniID2
		{
			get
			{
				return this._UniID2;
			}
			set
			{
				if ((this._UniID2 != value))
				{
					this._UniID2 = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectOutputMetricValuesResult1
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<int> _FrequencyID;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricFormulaID;
		
		private string _VariableFormula;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.DateTime> _Date;
		
		public Sp_SelectOutputMetricValuesResult1()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricUnitOfMeasureID
		{
			get
			{
				return this._MetricUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricUnitOfMeasureID != value))
				{
					this._MetricUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricFormulaID
		{
			get
			{
				return this._MetricFormulaID;
			}
			set
			{
				if ((this._MetricFormulaID != value))
				{
					this._MetricFormulaID = value;
				}
			}
		}
		
		public string VariableFormula
		{
			get
			{
				return this._VariableFormula;
			}
			set
			{
				if ((this._VariableFormula != value))
				{
					this._VariableFormula = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectOutputMetricValuesResult2
	{
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _Variable;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricFormulaID;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<bool> _MissedCalc;
		
		private string _ConvertedValue;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _ValueUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		public Sp_SelectOutputMetricValuesResult2()
		{
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string Variable
		{
			get
			{
				return this._Variable;
			}
			set
			{
				if ((this._Variable != value))
				{
					this._Variable = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricUnitOfMeasureID
		{
			get
			{
				return this._MetricUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricUnitOfMeasureID != value))
				{
					this._MetricUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricFormulaID
		{
			get
			{
				return this._MetricFormulaID;
			}
			set
			{
				if ((this._MetricFormulaID != value))
				{
					this._MetricFormulaID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> MissedCalc
		{
			get
			{
				return this._MissedCalc;
			}
			set
			{
				if ((this._MissedCalc != value))
				{
					this._MissedCalc = value;
				}
			}
		}
		
		public string ConvertedValue
		{
			get
			{
				return this._ConvertedValue;
			}
			set
			{
				if ((this._ConvertedValue != value))
				{
					this._ConvertedValue = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueUnitOfMeasureID
		{
			get
			{
				return this._ValueUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueUnitOfMeasureID != value))
				{
					this._ValueUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectPIReportValuesResult1
	{
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private string _MetricCode;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private System.Nullable<int> _FrequencyID;
		
		private string _InputUoMName;
		
		private string _UoMName;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private string _PIName;
		
		private string _PICode;
		
		private string _SumValue;
		
		private System.Nullable<System.Guid> _GCAID;
		
		private string _GCAName;
		
		private System.Nullable<System.Guid> _GCA1ID;
		
		private string _GCA1Name;
		
		private System.Nullable<System.Guid> _GCA2ID;
		
		private string _GCA2Name;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private string _LocationFullName;
		
		private System.Nullable<bool> _AllowCustomMetricNames;
		
		private System.Nullable<System.Guid> _RelatedMetricOrgLocationNameID;
		
		private string _CustomMetricAlias;
		
		private string _CustomMetricCode;
		
		public Sp_SelectPIReportValuesResult1()
		{
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public string MetricCode
		{
			get
			{
				return this._MetricCode;
			}
			set
			{
				if ((this._MetricCode != value))
				{
					this._MetricCode = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this._InputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this._UnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public string InputUoMName
		{
			get
			{
				return this._InputUoMName;
			}
			set
			{
				if ((this._InputUoMName != value))
				{
					this._InputUoMName = value;
				}
			}
		}
		
		public string UoMName
		{
			get
			{
				return this._UoMName;
			}
			set
			{
				if ((this._UoMName != value))
				{
					this._UoMName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					this._PerformanceIndicatorID = value;
				}
			}
		}
		
		public string PIName
		{
			get
			{
				return this._PIName;
			}
			set
			{
				if ((this._PIName != value))
				{
					this._PIName = value;
				}
			}
		}
		
		public string PICode
		{
			get
			{
				return this._PICode;
			}
			set
			{
				if ((this._PICode != value))
				{
					this._PICode = value;
				}
			}
		}
		
		public string SumValue
		{
			get
			{
				return this._SumValue;
			}
			set
			{
				if ((this._SumValue != value))
				{
					this._SumValue = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> GCAID
		{
			get
			{
				return this._GCAID;
			}
			set
			{
				if ((this._GCAID != value))
				{
					this._GCAID = value;
				}
			}
		}
		
		public string GCAName
		{
			get
			{
				return this._GCAName;
			}
			set
			{
				if ((this._GCAName != value))
				{
					this._GCAName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> GCA1ID
		{
			get
			{
				return this._GCA1ID;
			}
			set
			{
				if ((this._GCA1ID != value))
				{
					this._GCA1ID = value;
				}
			}
		}
		
		public string GCA1Name
		{
			get
			{
				return this._GCA1Name;
			}
			set
			{
				if ((this._GCA1Name != value))
				{
					this._GCA1Name = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> GCA2ID
		{
			get
			{
				return this._GCA2ID;
			}
			set
			{
				if ((this._GCA2ID != value))
				{
					this._GCA2ID = value;
				}
			}
		}
		
		public string GCA2Name
		{
			get
			{
				return this._GCA2Name;
			}
			set
			{
				if ((this._GCA2Name != value))
				{
					this._GCA2Name = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public string LocationFullName
		{
			get
			{
				return this._LocationFullName;
			}
			set
			{
				if ((this._LocationFullName != value))
				{
					this._LocationFullName = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomMetricNames
		{
			get
			{
				return this._AllowCustomMetricNames;
			}
			set
			{
				if ((this._AllowCustomMetricNames != value))
				{
					this._AllowCustomMetricNames = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> RelatedMetricOrgLocationNameID
		{
			get
			{
				return this._RelatedMetricOrgLocationNameID;
			}
			set
			{
				if ((this._RelatedMetricOrgLocationNameID != value))
				{
					this._RelatedMetricOrgLocationNameID = value;
				}
			}
		}
		
		public string CustomMetricAlias
		{
			get
			{
				return this._CustomMetricAlias;
			}
			set
			{
				if ((this._CustomMetricAlias != value))
				{
					this._CustomMetricAlias = value;
				}
			}
		}
		
		public string CustomMetricCode
		{
			get
			{
				return this._CustomMetricCode;
			}
			set
			{
				if ((this._CustomMetricCode != value))
				{
					this._CustomMetricCode = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectPIReportValuesResult2
	{
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private System.Nullable<int> _FrequencyID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private System.Nullable<int> _ValueMetricDataTypeID;
		
		private string _Value;
		
		private string _ConvertedValue;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<System.DateTime> _InputDate;
		
		private System.Nullable<int> _MetricFrequencyID;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricUnitOfMeasureID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		public Sp_SelectPIReportValuesResult2()
		{
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this._UnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this._InputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> ValueMetricDataTypeID
		{
			get
			{
				return this._ValueMetricDataTypeID;
			}
			set
			{
				if ((this._ValueMetricDataTypeID != value))
				{
					this._ValueMetricDataTypeID = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public string ConvertedValue
		{
			get
			{
				return this._ConvertedValue;
			}
			set
			{
				if ((this._ConvertedValue != value))
				{
					this._ConvertedValue = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> InputDate
		{
			get
			{
				return this._InputDate;
			}
			set
			{
				if ((this._InputDate != value))
				{
					this._InputDate = value;
				}
			}
		}
		
		public System.Nullable<int> MetricFrequencyID
		{
			get
			{
				return this._MetricFrequencyID;
			}
			set
			{
				if ((this._MetricFrequencyID != value))
				{
					this._MetricFrequencyID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricUnitOfMeasureID
		{
			get
			{
				return this._MetricUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricUnitOfMeasureID != value))
				{
					this._MetricUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectUnassignedMetricResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _Name;
		
		private string _Notes;
		
		private System.Nullable<int> _FrequencyID;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.Guid> _MetricCategoryID;
		
		private System.Nullable<System.Guid> _UnitOfMeasureID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<decimal> _NOMinValue;
		
		private System.Nullable<decimal> _NOMaxValue;
		
		private string _Definition;
		
		private string _Documentation;
		
		private string _MetricReferences;
		
		private string _Code;
		
		private System.Nullable<int> _MetricTypeID;
		
		private string _Alias;
		
		private System.Nullable<int> _Generation;
		
		private string _FormulaCode;
		
		private System.Nullable<System.Guid> _InputUnitOfMeasureID;
		
		private string _Variable;
		
		private System.Nullable<bool> _GrowUpIsGood;
		
		private System.Nullable<System.DateTime> _CollectionStartDate;
		
		private System.Nullable<System.DateTime> _CollectionEndDate;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private string _FrequencyName;
		
		private string _MetricCategoryName;
		
		private string _MetricDataTypeName;
		
		private string _MetricTypeName;
		
		private string _UnitOfMeasureName;
		
		private string _InputUnitOfMeasureName;
		
		public Sp_SelectUnassignedMetricResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		public System.Nullable<int> FrequencyID
		{
			get
			{
				return this._FrequencyID;
			}
			set
			{
				if ((this._FrequencyID != value))
				{
					this._FrequencyID = value;
				}
			}
		}
		
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this._Updated = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricCategoryID
		{
			get
			{
				return this._MetricCategoryID;
			}
			set
			{
				if ((this._MetricCategoryID != value))
				{
					this._MetricCategoryID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					this._UnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMinValue
		{
			get
			{
				return this._NOMinValue;
			}
			set
			{
				if ((this._NOMinValue != value))
				{
					this._NOMinValue = value;
				}
			}
		}
		
		public System.Nullable<decimal> NOMaxValue
		{
			get
			{
				return this._NOMaxValue;
			}
			set
			{
				if ((this._NOMaxValue != value))
				{
					this._NOMaxValue = value;
				}
			}
		}
		
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
		
		public string Documentation
		{
			get
			{
				return this._Documentation;
			}
			set
			{
				if ((this._Documentation != value))
				{
					this._Documentation = value;
				}
			}
		}
		
		public string MetricReferences
		{
			get
			{
				return this._MetricReferences;
			}
			set
			{
				if ((this._MetricReferences != value))
				{
					this._MetricReferences = value;
				}
			}
		}
		
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this._Alias = value;
				}
			}
		}
		
		public System.Nullable<int> Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this._Generation = value;
				}
			}
		}
		
		public string FormulaCode
		{
			get
			{
				return this._FormulaCode;
			}
			set
			{
				if ((this._FormulaCode != value))
				{
					this._FormulaCode = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> InputUnitOfMeasureID
		{
			get
			{
				return this._InputUnitOfMeasureID;
			}
			set
			{
				if ((this._InputUnitOfMeasureID != value))
				{
					this._InputUnitOfMeasureID = value;
				}
			}
		}
		
		public string Variable
		{
			get
			{
				return this._Variable;
			}
			set
			{
				if ((this._Variable != value))
				{
					this._Variable = value;
				}
			}
		}
		
		public System.Nullable<bool> GrowUpIsGood
		{
			get
			{
				return this._GrowUpIsGood;
			}
			set
			{
				if ((this._GrowUpIsGood != value))
				{
					this._GrowUpIsGood = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionStartDate
		{
			get
			{
				return this._CollectionStartDate;
			}
			set
			{
				if ((this._CollectionStartDate != value))
				{
					this._CollectionStartDate = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> CollectionEndDate
		{
			get
			{
				return this._CollectionEndDate;
			}
			set
			{
				if ((this._CollectionEndDate != value))
				{
					this._CollectionEndDate = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public string FrequencyName
		{
			get
			{
				return this._FrequencyName;
			}
			set
			{
				if ((this._FrequencyName != value))
				{
					this._FrequencyName = value;
				}
			}
		}
		
		public string MetricCategoryName
		{
			get
			{
				return this._MetricCategoryName;
			}
			set
			{
				if ((this._MetricCategoryName != value))
				{
					this._MetricCategoryName = value;
				}
			}
		}
		
		public string MetricDataTypeName
		{
			get
			{
				return this._MetricDataTypeName;
			}
			set
			{
				if ((this._MetricDataTypeName != value))
				{
					this._MetricDataTypeName = value;
				}
			}
		}
		
		public string MetricTypeName
		{
			get
			{
				return this._MetricTypeName;
			}
			set
			{
				if ((this._MetricTypeName != value))
				{
					this._MetricTypeName = value;
				}
			}
		}
		
		public string UnitOfMeasureName
		{
			get
			{
				return this._UnitOfMeasureName;
			}
			set
			{
				if ((this._UnitOfMeasureName != value))
				{
					this._UnitOfMeasureName = value;
				}
			}
		}
		
		public string InputUnitOfMeasureName
		{
			get
			{
				return this._InputUnitOfMeasureName;
			}
			set
			{
				if ((this._InputUnitOfMeasureName != value))
				{
					this._InputUnitOfMeasureName = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectUnassignedPerformanceIndicatorResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _PerformanceIndicatorID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _GroupCategoryAspectID;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<int> _SectorID;
		
		private string _Help;
		
		private System.Nullable<int> _RequirementID;
		
		private string _Sector;
		
		private string _Requirement;
		
		private string _GCA;
		
		private string _Code;
		
		public Sp_SelectUnassignedPerformanceIndicatorResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> PerformanceIndicatorID
		{
			get
			{
				return this._PerformanceIndicatorID;
			}
			set
			{
				if ((this._PerformanceIndicatorID != value))
				{
					this._PerformanceIndicatorID = value;
				}
			}
		}
		
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> GroupCategoryAspectID
		{
			get
			{
				return this._GroupCategoryAspectID;
			}
			set
			{
				if ((this._GroupCategoryAspectID != value))
				{
					this._GroupCategoryAspectID = value;
				}
			}
		}
		
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this._Updated = value;
				}
			}
		}
		
		public System.Nullable<int> SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					this._SectorID = value;
				}
			}
		}
		
		public string Help
		{
			get
			{
				return this._Help;
			}
			set
			{
				if ((this._Help != value))
				{
					this._Help = value;
				}
			}
		}
		
		public System.Nullable<int> RequirementID
		{
			get
			{
				return this._RequirementID;
			}
			set
			{
				if ((this._RequirementID != value))
				{
					this._RequirementID = value;
				}
			}
		}
		
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this._Sector = value;
				}
			}
		}
		
		public string Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					this._Requirement = value;
				}
			}
		}
		
		public string GCA
		{
			get
			{
				return this._GCA;
			}
			set
			{
				if ((this._GCA != value))
				{
					this._GCA = value;
				}
			}
		}
		
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
	}
	
	public partial class Sp_SelectUnderReviewMetricValuesResult
	{
		
		private System.Nullable<System.Guid> _InstanceId;
		
		private System.Nullable<System.Guid> _MetricID;
		
		private string _MetricName;
		
		private System.Nullable<int> _MetricFrequencyID;
		
		private System.Nullable<int> _MetricTypeID;
		
		private System.Nullable<int> _MetricDataTypeID;
		
		private System.Nullable<int> _NODecPlaces;
		
		private System.Nullable<System.Guid> _MetricInputUnitOfMeasureID;
		
		private System.Nullable<bool> _AllowCustomNames;
		
		private System.Nullable<System.Guid> _MetricValueID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<bool> _Approved;
		
		private System.Nullable<bool> _FilesAttached;
		
		private System.Nullable<bool> _ReviewUpdated;
		
		private System.Nullable<System.Guid> _OrgLocationID;
		
		private System.Nullable<int> _ValueDataTypeID;
		
		private System.Nullable<System.Guid> _ValueInputUnitOfMeasureID;
		
		private string _OrgLocationFullName;
		
		private System.Nullable<System.Guid> _MetricOrgLocationUoMID;
		
		private System.Nullable<System.Guid> _OrgLocationUnitOfMeasureID;
		
		private System.Nullable<System.Guid> _MetricOrgLocationNameID;
		
		private string _CustomMetricAlias;
		
		private string _CustomMetricCode;
		
		private string _ValuePosType;
		
		public Sp_SelectUnderReviewMetricValuesResult()
		{
		}
		
		public System.Nullable<System.Guid> InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					this._InstanceId = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricID
		{
			get
			{
				return this._MetricID;
			}
			set
			{
				if ((this._MetricID != value))
				{
					this._MetricID = value;
				}
			}
		}
		
		public string MetricName
		{
			get
			{
				return this._MetricName;
			}
			set
			{
				if ((this._MetricName != value))
				{
					this._MetricName = value;
				}
			}
		}
		
		public System.Nullable<int> MetricFrequencyID
		{
			get
			{
				return this._MetricFrequencyID;
			}
			set
			{
				if ((this._MetricFrequencyID != value))
				{
					this._MetricFrequencyID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricTypeID
		{
			get
			{
				return this._MetricTypeID;
			}
			set
			{
				if ((this._MetricTypeID != value))
				{
					this._MetricTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> MetricDataTypeID
		{
			get
			{
				return this._MetricDataTypeID;
			}
			set
			{
				if ((this._MetricDataTypeID != value))
				{
					this._MetricDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<int> NODecPlaces
		{
			get
			{
				return this._NODecPlaces;
			}
			set
			{
				if ((this._NODecPlaces != value))
				{
					this._NODecPlaces = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricInputUnitOfMeasureID
		{
			get
			{
				return this._MetricInputUnitOfMeasureID;
			}
			set
			{
				if ((this._MetricInputUnitOfMeasureID != value))
				{
					this._MetricInputUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<bool> AllowCustomNames
		{
			get
			{
				return this._AllowCustomNames;
			}
			set
			{
				if ((this._AllowCustomNames != value))
				{
					this._AllowCustomNames = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricValueID
		{
			get
			{
				return this._MetricValueID;
			}
			set
			{
				if ((this._MetricValueID != value))
				{
					this._MetricValueID = value;
				}
			}
		}
		
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this._Approved = value;
				}
			}
		}
		
		public System.Nullable<bool> FilesAttached
		{
			get
			{
				return this._FilesAttached;
			}
			set
			{
				if ((this._FilesAttached != value))
				{
					this._FilesAttached = value;
				}
			}
		}
		
		public System.Nullable<bool> ReviewUpdated
		{
			get
			{
				return this._ReviewUpdated;
			}
			set
			{
				if ((this._ReviewUpdated != value))
				{
					this._ReviewUpdated = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationID
		{
			get
			{
				return this._OrgLocationID;
			}
			set
			{
				if ((this._OrgLocationID != value))
				{
					this._OrgLocationID = value;
				}
			}
		}
		
		public System.Nullable<int> ValueDataTypeID
		{
			get
			{
				return this._ValueDataTypeID;
			}
			set
			{
				if ((this._ValueDataTypeID != value))
				{
					this._ValueDataTypeID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> ValueInputUnitOfMeasureID
		{
			get
			{
				return this._ValueInputUnitOfMeasureID;
			}
			set
			{
				if ((this._ValueInputUnitOfMeasureID != value))
				{
					this._ValueInputUnitOfMeasureID = value;
				}
			}
		}
		
		public string OrgLocationFullName
		{
			get
			{
				return this._OrgLocationFullName;
			}
			set
			{
				if ((this._OrgLocationFullName != value))
				{
					this._OrgLocationFullName = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationUoMID
		{
			get
			{
				return this._MetricOrgLocationUoMID;
			}
			set
			{
				if ((this._MetricOrgLocationUoMID != value))
				{
					this._MetricOrgLocationUoMID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> OrgLocationUnitOfMeasureID
		{
			get
			{
				return this._OrgLocationUnitOfMeasureID;
			}
			set
			{
				if ((this._OrgLocationUnitOfMeasureID != value))
				{
					this._OrgLocationUnitOfMeasureID = value;
				}
			}
		}
		
		public System.Nullable<System.Guid> MetricOrgLocationNameID
		{
			get
			{
				return this._MetricOrgLocationNameID;
			}
			set
			{
				if ((this._MetricOrgLocationNameID != value))
				{
					this._MetricOrgLocationNameID = value;
				}
			}
		}
		
		public string CustomMetricAlias
		{
			get
			{
				return this._CustomMetricAlias;
			}
			set
			{
				if ((this._CustomMetricAlias != value))
				{
					this._CustomMetricAlias = value;
				}
			}
		}
		
		public string CustomMetricCode
		{
			get
			{
				return this._CustomMetricCode;
			}
			set
			{
				if ((this._CustomMetricCode != value))
				{
					this._CustomMetricCode = value;
				}
			}
		}
		
		public string ValuePosType
		{
			get
			{
				return this._ValuePosType;
			}
			set
			{
				if ((this._ValuePosType != value))
				{
					this._ValuePosType = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
