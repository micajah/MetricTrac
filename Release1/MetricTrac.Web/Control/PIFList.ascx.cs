using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Micajah.Common.WebControls;
using System.Data;
using System.Data.Linq;
using System.Collections;

namespace MetricTrac.Control
{    
    public partial class PIFList : System.Web.UI.UserControl
    {
        public bool OrgMode { get; set; }

        public bool SubNodes
        { get { return Request.QueryString["Sub"] == "True"; } }

        Guid? mOrgLocationID;
        public Guid OrgLocationID
        {
            get
            {
                if (!OrgMode) return Guid.Empty;
                if (mOrgLocationID!=null) return (Guid)mOrgLocationID;
                mOrgLocationID = Guid.Empty;
                string s = Request.QueryString["OrgLocationID"];
                if (string.IsNullOrEmpty(s)) return Guid.Empty;
                try { mOrgLocationID = new Guid(s); }
                catch { }
                return (Guid)mOrgLocationID;
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (OrgMode)
            {
                cgvPIF.AutoGenerateDeleteButton = false;
                cgvPIF.AutoGenerateEditButton = false;
                cgvPIF.ShowAddLink = false;
                cgvPIF.FindField("Location").Visible = true;
            }
            Utils.MetricUtils.InitLinqDataSources(ldsPerformanceIndicatorForm);
        }

        protected void cgvPIF_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            MetricTrac.Bll.PerformanceIndicatorForm.Extend pif = e.Row.DataItem as MetricTrac.Bll.PerformanceIndicatorForm.Extend;
            if (pif == null) return;
            Repeater rpLocation = e.Row.FindControl("rpLocation") as Repeater;
            rpLocation.DataSource = pif.OrgLocations;
            rpLocation.DataBind();
        }

        protected void ldsPerformanceIndicatorForm_Selecting(object sender, LinqDataSourceSelectEventArgs e)
        {
            if (OrgMode)e.Result = Bll.PerformanceIndicatorForm.List(OrgLocationID, SubNodes);
            else e.Result = Bll.PerformanceIndicatorForm.List();
        }

        protected void cgvPIF_RowEditing(object sender, GridViewEditEventArgs e)
        {
            if (e.NewEditIndex < 0 || e.NewEditIndex >= cgvPIF.DataKeys.Count) return;
            Utils.MetricUtils.ClearSession(Page.Session);
            Response.Redirect("PIFEdit.aspx?PerformanceIndicatorFormID=" + cgvPIF.DataKeys[e.NewEditIndex].Value.ToString());
        }

        protected void cgvPIF_Action(object sender, Micajah.Common.WebControls.CommonGridViewActionEventArgs e)
        {
            if (e.Action != CommandActions.Add) return;
            Utils.MetricUtils.ClearSession(Page.Session);
            Response.Redirect("PIFEdit.aspx");
        }
    }
}
